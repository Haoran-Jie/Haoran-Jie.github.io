<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Chapter1_InformationRepresentation</title>
    <url>/Notes/ASCS/Chapter1-InformationRepresentation/</url>
    <content><![CDATA[<img src="https://s2.loli.net/2023/02/04/4MZfO62Jb5hriEg.png" alt="DataRepresentation" style="zoom: 67%;">

<span id="more"></span>

<h2 id="Data-Representation"><a href="#Data-Representation" class="headerlink" title="Data Representation"></a>Data Representation</h2><h3 id="Prefixes"><a href="#Prefixes" class="headerlink" title="Prefixes"></a>Prefixes</h3><table>
<thead>
<tr>
<th>Binary prefix name</th>
<th>symbol</th>
<th>value</th>
<th>Decimal prefix name</th>
<th>symbol</th>
<th>value</th>
</tr>
</thead>
<tbody><tr>
<td>Kibi</td>
<td>Ki</td>
<td>$2^{10}$</td>
<td>Kilo</td>
<td>k</td>
<td>$10^3$</td>
</tr>
<tr>
<td>Mebi</td>
<td>Mi</td>
<td>$2^{20}$</td>
<td>Mega</td>
<td>M</td>
<td>$10^6$</td>
</tr>
<tr>
<td>Gibi</td>
<td>Gi</td>
<td>$2^{30}$</td>
<td>Giga</td>
<td>G</td>
<td>$10^9$</td>
</tr>
<tr>
<td>Tebi</td>
<td>Ti</td>
<td>$2^{40}$</td>
<td>Tera</td>
<td>T</td>
<td>$10^{12}$</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>Overflow</strong>: the result of carrying out a calculation which produces a value too large for the computer’s allocated word size </p>
</blockquote>
<h3 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h3><p><u>Application of hexadecimal system</u></p>
<ul>
<li><font color="#4a69bd">Memory dumps</font><ul>
<li><font color="#4a69bd">Memory contents are output to printer or monitor</font></li>
</ul>
</li>
<li><font color="#4a69bd">MAC address</font></li>
<li><font color="#4a69bd">Error message </font></li>
<li><font color="#4a69bd">IP address </font></li>
<li><font color="#4a69bd">Unicode</font></li>
<li><font color="#4a69bd">Colour in HTML</font></li>
</ul>
<p><u>Application of Binary Coded Decimal (BCD)</u></p>
<ul>
<li><font color="#4a69bd">Calculator</font></li>
<li><font color="#4a69bd">Clock</font></li>
</ul>
<h3 id="Character-sets"><a href="#Character-sets" class="headerlink" title="Character sets"></a>Character sets</h3><p><strong><u>Character set:</u></strong></p>
<ul>
<li><font color="#4a69bd">The symbols that computer uses</font></li>
<li><font color="#4a69bd">A list of characters recognized by computer software and hardware</font></li>
<li><font color="#4a69bd">Each character has a character code</font></li>
<li><font color="#4a69bd">The binary code for each character in the string is stored in sequence</font></li>
</ul>
<p><strong><u>Disadvantage of ASCII:</u></strong></p>
<ul>
<li><font color="#4a69bd">Only 256 characters can be represented</font></li>
<li><font color="#4a69bd">Uses values 0 to 127/256</font></li>
<li><font color="#4a69bd">Many characters in other languages cannot be represented</font></li>
<li><font color="#4a69bd">The extended ASCII the characters from 128 to 255 may be coded differently in different system. </font></li>
</ul>
<p><strong><u>UNICODE</u></strong>:</p>
<ul>
<li><font color="#4a69bd">UNICODE has greater range of characters than ASCII</font></li>
<li><font color="#4a69bd">UNICODE represents most written language in the world, while ASCII does not; used for English only</font></li>
<li><font color="#4a69bd">ASCII uses 7-8 bits per character, whereas UNICODE uses up to 4 bytes per character</font></li>
<li><font color="#4a69bd">UNICODE is standardized while ASCII is not</font></li>
</ul>
<hr>
<p><img src="https://s2.loli.net/2023/02/04/qEPKiyN9r31Mwcl.png" alt="Multimedia"></p>
<h2 id="Multimedia"><a href="#Multimedia" class="headerlink" title="Multimedia"></a>Multimedia</h2><h3 id="Graphics"><a href="#Graphics" class="headerlink" title="Graphics"></a>Graphics</h3><table>
<thead>
<tr>
<th></th>
<th>Bitmap</th>
<th>Vector  graphic</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Definitions</strong></td>
<td>· Made up of pixels (picture elements) <br>· Stored in a two-dimensional matrix of pixels <br>· Each pixel has a colour<br>· Stored as binary number<br>· The number of bits used to represent a pixel is called colour depth</td>
<td>· A series of geometric shapes<br>· Drawing object<br>· Exact dimension is not stored Stored coordinates<br>· Contains a drawing list<br>· Commands/formulae for creating each individual object<br>· Property for that object Eg: colour, thickness</td>
</tr>
<tr>
<td><strong>Properties</strong></td>
<td>· Takes up more memory<br>· Enlarging the bitmap can means that the image is pixelated<br>· Can be compressed with significant reduction in file size<br>· Suitable for photographs/scanned image<br>· Uses less processing power<br>· Individual elements of a bitmap cannot be grouped<br>· It is possible to change/edit each pixel to change the design</td>
<td>· Made up of geometric shapes which require definition/attributes<br>· Stores a set of instructions about how to draw the shape<br>· Takes up less memory<br>· Vector graphic image can be enlarged without being pixelated<br>· Do not compress well<br>· Suitable for geometric shape<br>· Individual elements of a vector graphic can be grouped<br>· Vector graphics need to be ‘rasterised’ in order to display or print.<br>· Image is redrawn with small adjustment<br>· It is necessary to change each of the geometric shape to alter the design</td>
</tr>
<tr>
<td><strong>Available formats</strong></td>
<td><code>.jpeg</code>, <code>.bmp</code>, <code>.png</code></td>
<td><code>.svg</code> , <code>.cgm</code>, <code>.odg</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td>Defined in XML text files which, therefore, allows them to be compressed.</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>Pixel</strong>: smallest picture element which can be drawn</p>
<p><strong>Screen resolution</strong>: the number of pixels which can be view horizontally and vertically</p>
<p><strong>Image resolution</strong>: the number of pixels that make up an image</p>
<p><strong>Resolution</strong>: the number of pixels per column and per row</p>
<p><strong>Pixel density</strong>: number of pixels per square centimetre. </p>
</blockquote>
<h3 id="Sound"><a href="#Sound" class="headerlink" title="Sound"></a>Sound</h3><p><u>Sampling analogue sound:</u></p>
<ul>
<li><font color="#4a69bd">Amplitude measured</font></li>
<li><font color="#4a69bd">At regular time interval</font></li>
<li><font color="#4a69bd">The value of sample is recorded as binary number. </font></li>
</ul>
<p><u>Increasing sampling resolution:</u></p>
<ul>
<li><font color="#4a69bd">More bits used to represent one sample</font></li>
<li><font color="#4a69bd">Larger file size</font><ul>
<li><font color="#4a69bd">Takes longer to transmit/download the file</font></li>
<li><font color="#4a69bd">Requires greater processing power </font></li>
</ul>
</li>
<li><font color="#4a69bd">More accurate representation of sound</font><ul>
<li><font color="#4a69bd">Less sound distortion</font></li>
<li><font color="#4a69bd">Larger dynamic range </font></li>
<li><font color="#4a69bd">Better sound quality</font></li>
</ul>
</li>
</ul>
<p><u>Decrease sample rate:</u></p>
<ul>
<li><font color="#4a69bd">Fewer samples per unit time</font></li>
<li><font color="#4a69bd">File size will reduce</font></li>
<li><font color="#4a69bd">Larger gaps/ space between samples // greater quantization errors</font></li>
<li><font color="#4a69bd">Sound accuracy will reduce. </font></li>
</ul>
<blockquote>
<p> <strong><u>Sampling:</u></strong></p>
<ul>
<li><font color="#4a69bd">amplitude of sound wave taken at different points in time.</font></li>
<li><font color="#4a69bd">Measurement the value of the analogue signal at regular time interval.</font></li>
</ul>
<p> <strong><u>Sampling rate:</u></strong></p>
<ul>
<li><font color="#4a69bd">Number of time that the amplitude of (analogue) sound wave is taken</font></li>
<li><font color="#4a69bd">Per unit time</font></li>
<li><font color="#4a69bd">Higher sampling rate results in more accurate digital representation.</font></li>
</ul>
<p> <u><strong>Sampling resolution:</strong></u></p>
<ul>
<li><font color="#4a69bd">Resolution is the number of distinct value able to encode/represent each sample</font></li>
<li><font color="#4a69bd">Specified the number of bits used to store each sample</font></li>
<li><font color="#4a69bd">Also called bit depth</font></li>
<li><font color="#4a69bd">The higher the sampling resolution, the lower the quantization error</font></li>
<li><font color="#4a69bd">The higher the sampling, the less sound distortion.</font></li>
<li><font color="#4a69bd">Usually 8 bits, 16 bits, 24 bits or 32 bits. </font></li>
<li><strong>Benefits:</strong><ul>
<li><font color="#4a69bd">Allows for larger dynamic ranges</font></li>
<li><font color="#4a69bd">More accurate representation/ sound quality</font></li>
</ul>
</li>
<li><strong>Drawbacks:</strong><ul>
<li><font color="#4a69bd">Bigger files / larger memory</font></li>
<li><font color="#4a69bd">Takes longer to transmit/download</font></li>
<li><font color="#4a69bd">Greater processing power needed</font></li>
</ul>
</li>
</ul>
</blockquote>
<p><u>Sound editing software:</u></p>
<ul>
<li><font color="#4a69bd">Edit start time, stop time and duration of any sound/time</font></li>
<li><font color="#4a69bd">Extract/delete/save part of a clip</font></li>
<li><font color="#4a69bd">Frequency, amplitude, pitch alteration</font></li>
<li><font color="#4a69bd">Conversion between different audio file formats</font></li>
<li><font color="#4a69bd">Use of filters</font></li>
<li><font color="#4a69bd">Mix/merge multiple sound sources</font></li>
</ul>
<p><u>Sound edit:</u></p>
<ul>
<li><font color="#4a69bd">Fading</font><ul>
<li><font color="#4a69bd">Change a volume of a section of sound for it to get louder.</font></li>
</ul>
</li>
<li><font color="#4a69bd">Removing sound element</font><ul>
<li><font color="#4a69bd">Delete sections of the sound wave.</font></li>
</ul>
</li>
<li><font color="#4a69bd">Copy</font><ul>
<li><font color="#4a69bd">Repeat elements of the sound wave.</font></li>
</ul>
</li>
</ul>
<p><u>Sound:</u></p>
<ul>
<li><font color="#4a69bd">Analogue value</font></li>
<li><font color="#4a69bd">Use ADC (analogue digital converter)</font></li>
<li><font color="#4a69bd">To convert to digital value</font></li>
</ul>
<p><img src="https://s2.loli.net/2023/02/04/TaAB6sl173JhkbY.png" alt="Compression"></p>
<hr>
<h2 id="Compression"><a href="#Compression" class="headerlink" title="Compression"></a>Compression</h2><p><u><strong>Lossy data compression:</strong></u></p>
<ul>
<li><font color="#4a69bd">Lossy may result in lost of detail compared to the original file</font></li>
<li><font color="#4a69bd">Lossy compression make decision about what parts of the file are important and not important. </font></li>
<li><font color="#4a69bd">Certain parts of the music can be eliminated without significantly degrading the listener’s     experience.</font></li>
<li><font color="#4a69bd">Discards softer sounds if two sounds played together.</font></li>
<li><font color="#4a69bd">Perceptual music shaping: only keeps sound that human ear can hear</font></li>
<li><font color="#4a69bd">Reduce to about 10% </font></li>
<li><font color="#4a69bd">E.g: mp3, jpeg</font></li>
</ul>
<p><u>Method1: Reduce the colour depth</u></p>
<ul>
<li><font color="#4a69bd">Reduce the number of bits per colour</font></li>
<li><font color="#4a69bd">Each pixel has fewer bits</font></li>
</ul>
<p><u>Method2: Reduce the resolution</u></p>
<ul>
<li><font color="#4a69bd">Fewer pixels per unit measurement</font></li>
<li><font color="#4a69bd">Fewer pixels are stored.</font></li>
</ul>
<p><u>Lossless data compression:</u></p>
<ul>
<li><font color="#4a69bd">Lose none of the original detail</font></li>
<li><font color="#4a69bd">Based on some form of replacement: Run line Encoding</font></li>
<li><font color="#4a69bd">Maximum compression to about 50%.</font></li>
</ul>
<p><u>RLE(Run line encoding):</u></p>
<ul>
<li><font color="#4a69bd">Lossless method of compression</font></li>
<li><font color="#4a69bd">Reduces the size of a string of adjacent, identical characters</font></li>
<li><font color="#4a69bd">The repeating string is encoded into two values</font></li>
<li><font color="#4a69bd">One value represent the number of characters in the run</font></li>
<li><font color="#4a69bd">The other value is the code of the character in the run</font></li>
<li><font color="#4a69bd">The run value and run count combination may be preceded by a control character</font></li>
</ul>
<h3 id="link-Recommended-article-s"><a href="#link-Recommended-article-s" class="headerlink" title=":link:Recommended article(s)"></a><span class="github-emoji"><span>🔗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f517.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Recommended article(s)</h3><p><a href="https://siipo.la/blog/whats-the-best-lossless-image-format-comparing-png-webp-avif-and-jpeg-xl">What’s the best lossless image format? Comparing PNG, WebP, AVIF, and JPEG XL</a></p>
<blockquote>
<p>The author first introduced concepts of lossy and lossless compression. Then explained the different image type supported for lossless compression. Finally, the article compares between the effectiveness between different image types’ lossless compression. The article gives quite a deep understanding and is interesting to read. </p>
</blockquote>
]]></content>
      <categories>
        <category>Notes</category>
        <category>ASCS</category>
      </categories>
  </entry>
  <entry>
    <title>Chapter 13.2: File organisation and access</title>
    <url>/Notes/ALCS/Chapter13.2_FileOrganisationAndAccess/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/02/04/1xLObVwpT6YFd8I.png"></p>
<hr>
<span id="more"></span>

<h2 id="File-organisation"><a href="#File-organisation" class="headerlink" title="File organisation"></a>File organisation</h2><h3 id="Serial-file-organisation"><a href="#Serial-file-organisation" class="headerlink" title="Serial file organisation"></a>Serial file organisation</h3><blockquote>
<p>Method of file organisation in which records of data are physically stored in a file, one after another, <strong>in the order they were added to the file</strong></p>
</blockquote>
<p>New records are appended to the end of the file. Serial file organisation is often used for temporary files storing transactions to be made to more permanent files. e.g. storing customer meter reading for gas/electricity before they are used to send the bills to all customers. </p>
<ul>
<li>Each transaction is added to the file in the order of arrival</li>
<li>These records will be in chronological order</li>
<li><font color="#4a69bd">High hit rate</font></li>
<li><font color="#4a69bd">Suitable for batch processing</font></li>
<li><font color="#4a69bd">Order not important</font></li>
<li><font color="#4a69bd">The records will be accessed one after another</font>[^1]</li>
</ul>
<p>[^1]: Sequential file access</p>
<h3 id="Sequential-file-organisation"><a href="#Sequential-file-organisation" class="headerlink" title="Sequential file organisation"></a>Sequential file organisation</h3><blockquote>
<p>Method of file organisation in which records of data are physically stored in a file, one after another, <strong>in a given order</strong></p>
</blockquote>
<p>Physically stores records of data in a file, one after another, in a given order. The order is usually based on the <strong>key field</strong> of the records as this is the unique identifier. </p>
<ul>
<li><font color="#4a69bd">High hit rate</font></li>
<li><font color="#4a69bd">Suitable for batch processing of records</font></li>
<li><font color="#4a69bd">File organised using unique ID called <strong>key field</strong></font></li>
</ul>
<p>The difference between key fields in a file and primary keys in a database table. In the database table the primary key values must all be unique. This is not a requirement for key fields in any type of file. It may be sensible in certain applications to ensure key fields have unique values, but it is not mandatory.</p>
<h3 id="Random-file-organisation"><a href="#Random-file-organisation" class="headerlink" title="Random file organisation"></a>Random file organisation</h3><blockquote>
<p>Method of file organisation in which records of data are physically stored in a file in <strong>any available</strong> position, the position of any record in a field is found by applying a <strong>hash algorithm</strong> on the <strong>key field</strong> of the record/record key. </p>
</blockquote>
<ul>
<li>Records can be added to any empty position</li>
<li><font color="#4a69bd">Key field is hashed to produce the home location</font></li>
<li><font color="#4a69bd">If home location is free, insert the data</font></li>
<li><font color="#4a69bd">Else, use overflow method to find free location to store the data</font></li>
<li><font color="#4a69bd">If no free location is available, the file is full and data cannot be added/stored</font></li>
<li><code>--</code></li>
<li><font color="#4a69bd">Real-time processing</font></li>
<li><font color="#4a69bd">Fast access to data</font></li>
<li><font color="#4a69bd">No need to search through records</font></li>
</ul>
<h3 id="Past-paper-Questions"><a href="#Past-paper-Questions" class="headerlink" title="Past-paper Questions:"></a>Past-paper Questions:</h3><ol>
<li><u>Compare Serial and Sequential file organisation:</u></li>
</ol>
<ul>
<li><font color="#4a69bd">In both serial and sequential organisation, Records are added to the file one after another</font></li>
<li>.<font color="#4a69bd">.. and they needs to be accessed one after another</font></li>
<li><font color="#4a69bd">For serial file organisation, records are added in a chronological order</font></li>
<li><font color="#4a69bd">For sequential file organisation, records are stored with a given order</font></li>
<li><font color="#4a69bd">… in the order of the key field</font></li>
<li><font color="#4a69bd">For serial file organisation, records are added in the next available space // records are appended to the file</font></li>
<li><font color="#4a69bd">For sequential file organisation, records are inserted into the correct position</font></li>
</ul>
<p>2. </p>
<img src="https://s2.loli.net/2023/02/04/VFQunh9qBPRMjb3.png" style="zoom: 80%;">

<p>3. </p>
<p><img src="https://s2.loli.net/2023/02/04/e18PpofcNK3r4gA.png"></p>
<p>4. </p>
<p>The programmer decides to store all the data in a file. Initially, data from 27 locations will be stored. More rainfall locations will be added over time and will never exceeds 100. The programmer has to choose between two types of file organisation: serial and sequential. </p>
<p><u>Give two reasons for choosing Serial file organisation:</u></p>
<ul>
<li><font color="#4a69bd">No need to re-sort data every time new data is added</font></li>
<li><font color="#4a69bd">Only a small file so searching would require little processing</font></li>
<li><font color="#4a69bd">New records can be easily added</font></li>
</ul>
<hr>
<h2 id="File-access"><a href="#File-access" class="headerlink" title="File access"></a>File access</h2><blockquote>
<p>Method used to physically find a record in a file</p>
</blockquote>
<h3 id="Sequential-access"><a href="#Sequential-access" class="headerlink" title="Sequential access"></a>Sequential access</h3><blockquote>
<p>A method of file access in which records are searched one after another from the physical start of the file until the required record is found, or a new record can be added to the file. This method is used for <code>serial</code> and <code>sequential</code> files. </p>
</blockquote>
<ul>
<li>High hit rate</li>
</ul>
<p>For a <code>serial</code> file, if a particular record is being searched for, every record needs to be checked until the record is found or the whole file has been searched and that record has not been found. Any new records are appended to the end of the file. </p>
<p>For a <code>sequential</code>file, if a particular records is being searched for, every records needs to be checked until the record is found or <em>the key filed of the current record being checked is greater than the key field of the record being searched for</em>. The rest of the file does not need to be searched as the records are sorted on ascending key field values. </p>
<p>Sequential access if efficient when <strong>every</strong> record in the file needs to be processed. e.g. a monthly billing or payroll system. </p>
<h3 id="Direct-access"><a href="#Direct-access" class="headerlink" title="Direct access"></a>Direct access</h3><blockquote>
<p>A method of file access in which a record can be physically found in a file without reading other records.</p>
</blockquote>
<ul>
<li>Both <code>sequential</code> and <code>random</code> files can use direct access. </li>
<li>Allow specific records to be found more quickly than using sequential access. </li>
<li>Low hit rate</li>
</ul>
<p>Direct access is required when an <strong>individual</strong> record from a file needs to be processed. e.g. when a single customer record needs to be updated when the customer’s phone number is changed. </p>
<p>For a <code>sequential</code> file, an index of all the key fields is kept and used to look up the address of the file location where a given record is stored. For large files, searching the index takes less time than searching the whole file. </p>
<p>A separate index file is created which has two fields per record. The first record has the key field value and the second filed has a value for the position of this key field value in the main file. </p>
<p>For a <code>random access</code> file, a hashing algorithm is used on the key filed to calculate the address of the file location where a given record is stored. </p>
<h2 id="Hashing-algorithms"><a href="#Hashing-algorithms" class="headerlink" title="Hashing algorithms"></a>Hashing algorithms</h2><blockquote>
<p>A mathematical formula used to perform a calculation on the <code>record key</code>. The result of the calculation gives the address where the record should be found. More complex hashing algorithms are used in the encryption of data. </p>
</blockquote>
<p>Two ways of dealing with collision:</p>
<p><code>open hash</code>: the record is stored in the next free space.</p>
<p><code>close hash</code>: an overflow area is set up and the record is stored in the next free space in the overflow area. </p>
<h3 id="Past-paper-questions"><a href="#Past-paper-questions" class="headerlink" title="Past-paper questions"></a>Past-paper questions</h3><ol>
<li><a href="9608-s21-q2">^2</a> <img src="https://s2.loli.net/2023/02/04/3tiowSlkN9pT5cu.png" style="zoom:80%;"></li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">FUNCTION hash(BookingID: INTEGER) RETURNS INTEGER</span><br><span class="line">	RETURN BookingID%100000 + 3</span><br><span class="line">ENDFUNCTION</span><br></pre></td></tr></tbody></table></figure>




]]></content>
      <categories>
        <category>Notes</category>
        <category>ALCS</category>
      </categories>
  </entry>
  <entry>
    <title>Chapter13.3: Floating-point numbers,Representation and Manipulation</title>
    <url>/Notes/ALCS/Chapter13.3_Floating-pointNumbersRepresentation/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/02/04/TCSZuMdNfQ31F5i.png"></p>
<hr>
<span id="more"></span> 

<h2 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h2><p><u>What are the effect of decreasing the number of bits allocated to Mantissa and increasing the exponent</u></p>
<ol>
<li><font color="#4a69bd">Reduction in precision</font><ul>
<li><font color="#4a69bd">As the number of bits in mantissa has decreased.</font></li>
</ul>
</li>
<li><font color="#4a69bd">Increasing in range</font><ul>
<li><font color="#4a69bd">As the number of bits in exponent has increased.</font></li>
</ul>
</li>
</ol>
<br>

<p>The denary number <strong>513</strong> cannot be stored accurately as normalised floating-point number in this computer system: (10 bits for mantissa, 6 bits for exponent)</p>
<p><u>Explain reasons for this:</u></p>
<ul>
<li><font color="#4a69bd">Require more than 10 bits/11bits to store; the maximum number that can be stored is 511</font></li>
<li><font color="#4a69bd">The denary 513 in binary is 1000000001 // Normalised: 0.1000000001</font></li>
<li><font color="#4a69bd">Results in <strong>overflow</strong></font></li>
</ul>
<p><u>Describe an alteration to the way floating-point numbers are stored to enable this number to be stored accurately with the same total number of bits</u>:</p>
<ul>
<li><font color="#4a69bd">The number of bits for mantissa must be increased</font></li>
<li><font color="#4a69bd">11 bits for mantissa and 5 bits for exponent</font></li>
</ul>
<hr>
<img src="https://s2.loli.net/2023/02/04/FMtnRmG79LIdp3h.png" style="zoom: 50%;">

<ul>
<li><font color="#4a69bd">Exponent too large to fit 4 bits as two’s complement number</font></li>
<li><font color="#4a69bd">Exponent will turn negative</font></li>
<li><font color="#4a69bd">… therefore the binary point moves the wrong way</font></li>
<li><font color="#4a69bd">Value will be approximately +0.029(296875)</font></li>
</ul>
<p><u>Explain the trade-off between either using a large number of bits for the mantissa, or a large number of bits for the exponent</u></p>
<ul>
<li><font color="#4a69bd">The trade-off is between range and precision</font></li>
<li><font color="#4a69bd">Any increase in the number of bits for the mantissa means fewer number of bits for the exponent</font></li>
<li><font color="#4a69bd">More bits used in mantissa would result in better precision</font></li>
<li><font color="#4a69bd">More bits used in exponent would result in larger range</font></li>
</ul>
<h2 id="Conversion"><a href="#Conversion" class="headerlink" title="Conversion"></a>Conversion</h2><p><u>Calculate the normalised binary number for <strong>-3.75</strong>. Show your working</u></p>
<ul>
<li><font color="#4a69bd">-3.75 = 100.01000 // -4 + 1/4 // -4 + 0.25</font></li>
<li><font color="#4a69bd">100.01000 becomes 1.0001000 Exponent=+2</font></li>
<li><font color="#4a69bd">Answer: Mantissa=1.0001000 Exponent=0010</font></li>
</ul>
<p><u>Calculate the normalised floating-point representation of <strong>+1.5625</strong> in this system (<strong>12bit-mantissa, 4bit-exponent</strong>). Show your working</u></p>
<ul>
<li><font color="#4a69bd">Correct conversion to binary: 01.1001</font></li>
<li><font color="#4a69bd">Correct calculation of the exponent: 1</font></li>
<li><font color="#4a69bd">Answer: Mantissa=0110 0100 0000 | Exponent= 0001</font></li>
</ul>
<h2 id="Normalisation"><a href="#Normalisation" class="headerlink" title="Normalisation"></a>Normalisation</h2><p><u>Why binary/floating-point numbers are stored in normalized form</u></p>
<ul>
<li><font color="#4a69bd">To store the maximum range of numbers in the minimum number of bits</font></li>
<li><font color="#4a69bd">Normalisation minimizes the number of leading zeros/ones represented</font></li>
<li><font color="#4a69bd">Maximizing the number of significant bits // maximizing the number of precision/accuracy with given number of bits</font></li>
<li><font color="#4a69bd">Enable large/small numbers to be stored with accuracy</font></li>
<li><font color="#4a69bd">Avoids the possibility that many numbers have multiple representation</font></li>
<li><code>--</code></li>
<li><font color="#4a69bd">There will be a unique representation for a number</font></li>
<li><font color="#4a69bd">The format will ensure it will be represented with greatest possible accuracy</font></li>
<li><font color="#4a69bd">Multiplication is performed more accurately</font></li>
</ul>
<p><u>Problems that can occur when a floating-pointer number is not normalised</u></p>
<ul>
<li><font color="#4a69bd">Lost of precision</font></li>
<li><font color="#4a69bd">Redundant leading zeros in the mantissa</font></li>
<li><font color="#4a69bd">Lost of the least-significant bits (bits on the right-hand end)</font></li>
<li><font color="#4a69bd">Multiple representation of a single number</font></li>
</ul>
<h2 id="Approximation-amp-Rounding-errors"><a href="#Approximation-amp-Rounding-errors" class="headerlink" title="Approximation &amp; Rounding errors"></a>Approximation &amp; Rounding errors</h2><p><u>State why some binary representation can lead to rounding errors</u></p>
<ul>
<li><font color="#4a69bd">There’s no exact binary conversion for some numbers</font></li>
<li><font color="#4a69bd">More bits are needed to store the number</font></li>
</ul>
<hr>
<img src="https://s2.loli.net/2023/02/04/GXRVMFIPYknZxbJ.png" style="zoom:80%;">

<hr>
<img src="https://s2.loli.net/2023/02/04/BNVq7OfbCJADZQj.png" style="zoom:50%;">

<ul>
<li><font color="#4a69bd">0.2 and 0.4 cannot be represented exactly in binary, there is a rounding error</font></li>
<li><font color="#4a69bd">0.2 has been represented by a number just greater than 0.2</font></li>
<li>This is similar for 0.4</li>
<li><font color="#4a69bd">Therefore, multiplying these two representations together increases the difference</font></li>
<li><font color="#4a69bd">Difference after calculation is significant enough to be seen</font></li>
</ul>
<hr>
<img src="https://s2.loli.net/2023/02/04/7TDGsBnuyNKHb28.png" style="zoom:50%;">

<ul>
<li>0.1 cannot be represented exactly in binary, there is a rounding error</li>
<li>0.1 is represented by a value just less than 0.1</li>
<li>The loop keeps adding this approximate value to the counter</li>
<li>Until all accumulated small difference become significant enough to be seen</li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
        <category>ALCS</category>
      </categories>
  </entry>
  <entry>
    <title>Chapter 14: Communication and Internet technologies</title>
    <url>/Notes/ALCS/Chapter14_CommunicationAndInternetTechnologies/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/02/04/nuYh8qsRV7oULSD.png"></p>
<hr>
<span id="more"></span>

<h2 id="Protocols"><a href="#Protocols" class="headerlink" title="Protocols"></a>Protocols</h2><blockquote>
<p><font color="#4a69bd">A set of rules governing communication across a network - the rules agreed by both the sender and the recipient</font></p>
</blockquote>
<p><u>Communication protocol <strong>definition</strong>:</u></p>
<ul>
<li><font color="#4a69bd">Sets of rules</font></li>
<li><font color="#4a69bd">for successful transmission and receipt of data</font></li>
</ul>
<p><u>Why communication protocol is necessary:</u></p>
<ul>
<li><font color="#4a69bd">All data is sent and received using the same <strong>rules</strong> and <strong>format</strong></font></li>
<li><font color="#4a69bd">Allows communication between devices operating on <strong>different platforms</strong></font></li>
<li><font color="#4a69bd">The communication is independent of the <strong>software</strong> and <strong>hardware</strong> used</font></li>
<li><code>--</code></li>
<li><font color="#4a69bd">Provide a set of standards for transmission of data</font></li>
<li><font color="#4a69bd">… that gives a known/accepted set of rules for transmitting and receiving of data</font></li>
<li><font color="#4a69bd">This enables communication/compatibility between devices from different manufacturer/platform</font></li>
</ul>
<h3 id="Protocol-implementation-explanation"><a href="#Protocol-implementation-explanation" class="headerlink" title="Protocol implementation[^explanation]"></a>Protocol implementation[^explanation]</h3><table>
<thead>
<tr>
<th align="center">Application layer</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Transport layer</strong></td>
</tr>
<tr>
<td align="center"><strong>Internet layer</strong></td>
</tr>
<tr>
<td align="center"><strong>Network (access) layer</strong></td>
</tr>
</tbody></table>
<p>[^explanation]: There are lots of different names for each layer, but this is from 2022 specimen paper, making it more authentic.</p>
<h4 id="Protocol-stack"><a href="#Protocol-stack" class="headerlink" title="Protocol stack"></a>Protocol stack</h4><blockquote>
<p>For a protocol suite the protocols can be viewed as layers within a protocol stack. There are a number of aspects relating to this concept.</p>
</blockquote>
<ul>
<li>Each layer can only accept input from the next higher layer or the next lower layer</li>
<li>There is a defined interface between adjacent layers which constitutes the only interaction allowed between layers.</li>
<li>A layer is serviced by the actions of lower layers.</li>
<li>With the possible exception of the lowest layer the function of a layer is created by installed software</li>
<li>A layer may comprise sub-layers.</li>
<li>Any user interaction will take place using protocols associated with the highest level layer in the stack.</li>
<li>Any direct access to hardware is confined to the lowest layer in the stack.</li>
</ul>
<p><u>State how each layer of stack is implemented</u></p>
<ul>
<li><font color="#4a69bd">Software/module/program/code</font></li>
</ul>
<h3 id="TCP-x2F-IP-protocol-suite"><a href="#TCP-x2F-IP-protocol-suite" class="headerlink" title="TCP/IP protocol suite"></a>TCP/IP protocol suite</h3><p><u>Describe the TCP/IP protocol suite:</u></p>
<ul>
<li><font color="#4a69bd">A layered model with four layers</font></li>
<li><font color="#4a69bd">Uses a set of protocols for transmission of data</font></li>
<li><font color="#4a69bd">Transport control protocol with Internet protocol</font></li>
<li><font color="#4a69bd">Application layer, transport layer, internet layer, network (access) layer</font></li>
</ul>
<table>
<thead>
<tr>
<th><u>Layer</u>:</th>
<th><u>Description</u>:</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Application layer</strong></td>
<td><font color="#4a69bd">Handles access to services <br> Define protocol used <br> Manage data exchange</font><br></td>
</tr>
<tr>
<td><strong>Transport layer</strong></td>
<td><font color="#4a69bd">Handles the forwarding of packets</font><br> Where TCP takes place <br>Regulate the network connection<br>Data broken up into packets, then sent to internet layer</td>
</tr>
<tr>
<td><strong>Internet layer</strong></td>
<td><font color="#4a69bd">Handles the transmission of data<br>Routing<br> IP addressing<br><code>--</code><br>Routes the packets around the network<br>Adds to the IP header a source/destination address for each header<br>Encapsulates data into datagram<br>Passes datagram to network access layer<br>Defines the addressing mode: <a href="https://www.cloudflare.com/en-gb/learning/network-layer/what-is-a-subnet/">subnetting</a>, NAT</font></td>
</tr>
<tr>
<td><strong>Network (access) layer</strong></td>
<td><font color="#4a69bd">Handles how data is physically sent</font><br>Encapsulates IP packets into frames for transmission<br>Ensure correct protocol is followed</td>
</tr>
</tbody></table>
<h3 id="Protocols-1"><a href="#Protocols-1" class="headerlink" title="Protocols"></a>Protocols</h3><table>
<thead>
<tr>
<th><u>Protocol</u></th>
<th><u>Purpose &amp; Use</u></th>
<th><u>Description</u></th>
</tr>
</thead>
<tbody><tr>
<td><strong>HTTP</strong>(Hyper text transfer protocol)</td>
<td><font color="#4a69bd"><code>Purpose</code>:Transfer webpages / hypertext from server to client<br><code>Use</code>: Browsing website</font></td>
<td><font color="#4a69bd">This is the protocol responsible for correct transfer of files that makes up web pages on the world wide web</font><br>Client/server protocol<br>Define the format of messages sent and received</td>
</tr>
<tr>
<td><strong>SMTP</strong>(Simple mail transfer protocol)</td>
<td><font color="#4a69bd"><code>purpose</code>: Protocol for sending email<br><code>Use</code>: Used by mail servers to forward email messages to another mail sever <br>Email client sends email to email server</font></td>
<td>Text-based: if contain image, video, music – then use multipurpose internet mail extension(MIME) protocol<br>Email is transferred from one server to another server<br>Email client sends email to email server</td>
</tr>
<tr>
<td><strong>POP3/4</strong>(Post office protocol)</td>
<td><font color="#4a69bd"><code>purpose</code>: Mail is held for you by a remote server until you download it // download email<br><code>Use</code>: To receive email</font></td>
<td>Pull protocols<br>Does not keep the server and client in synchronization; when emails are downloaded by the client, they are then deleted from the server which means it is not further updated.</td>
</tr>
<tr>
<td><strong>IMAP</strong>(internet message access protocol)</td>
<td><font color="#4a69bd"><code>Purpose</code>: downloading email // storing/organising emails on a remote server<br><code>Use</code>: To receive email</font></td>
<td>More recent than POP3/4<br>Keeps the server and client in synchronization; only a copy of the email is downloaded with the original remaining on the server until the client mutually deletes it</td>
</tr>
<tr>
<td><strong>FTP</strong>(file transfer protocol)</td>
<td><font color="#4a69bd"><code>Purpose</code>: Used for interactive file transfer; <br>To directly transfer data between two computers over the internet<br><code>Use</code>: Upload and download files over the internet</font></td>
<td><font color="#4a69bd"><u>Anonymous ftp</u>: <br>Allow user to access files<br>User does not need to identify themselves to the server<br><u>ftp commands</u><br>User can send instructions<br>That are carried out on the server<br><u>ftp server</u><br>Central computer<br>Stores files that are to be downloaded</font></td>
</tr>
</tbody></table>
<h4 id="BitTorrent-Protocol"><a href="#BitTorrent-Protocol" class="headerlink" title="BitTorrent Protocol"></a>BitTorrent Protocol</h4><p><u><code>Purpose</code></u>: <font color="#4a69bd">Protocol for peer-to-peer file sharing</font></p>
<p><u><code>Use</code></u>: <font color="#4a69bd">Decentralized distribution of data</font></p>
<p><u>Properties:</u></p>
<ul>
<li><font color="#4a69bd">Based on peer-to-peer networking concept</font></li>
<li><font color="#4a69bd">Allow fast sharing of files between computers</font></li>
<li><font color="#4a69bd">Allow many computers to share files</font></li>
</ul>
<p><u>Description:</u></p>
<ol>
<li><font color="#4a69bd">Bit torrent software made available</font></li>
<li><font color="#4a69bd">A computer joins a swarm by using this to load a torrent descriptor file</font></li>
<li><font color="#4a69bd">A server called tracker keeps record of all the computer in the swarm</font><br><font color="#4a69bd">… and shares their IP addresses allow them to be connected</font></li>
<li><font color="#4a69bd">One computer of the swarm must have full copy of the file to be downloaded</font></li>
<li><font color="#4a69bd">Torrent is split into small files</font></li>
<li><font color="#4a69bd">Pieces of torrent are both downloaded and uploaded</font></li>
<li><font color="#4a69bd">Rare pieces are given priority in download</font></li>
<li><font color="#4a69bd">Once a computer have downloaded a full copy it becomes a seed</font></li>
<li><font color="#4a69bd">Leech downloads more than they uploads</font></li>
</ol>
<p><code>—</code></p>
<ol>
<li>Create small file called torrent: contains meta data about the file to be stored</li>
<li>The actual file is broken up into equal segments known as pieces</li>
<li>Others first obtains the torrent, then connect to the tracker (A central server that contains data about all computers connected to it)</li>
<li>As each peer receives a piece of file, they then become the source for that piece of file. Other peers connected to the tracker will therefore know where to find the file they need</li>
<li>Once the peer has downloaded the file completely and make the file available to the swarm, they become a seed. The more seeds in the swarm, the faster the download process.</li>
</ol>
<p><u>Terms:</u></p>
<ul>
<li><u>Swarm:</u> <font color="#4a69bd">A group of peers connected together</font><ul>
<li><font color="#4a69bd">All the connected shared computers</font></li>
<li><font color="#4a69bd">That have all or other parts of the file to be downloaded</font></li>
<li><font color="#4a69bd">Share a torrent</font></li>
</ul>
</li>
<li><u>Seed</u>: <font color="#4a69bd">A peer has downloaded a file and has then made it available to others in the swarm</font><ul>
<li><font color="#4a69bd">Peer computer that has 100% of the file</font></li>
<li><font color="#4a69bd">It uploading the downloaded content</font></li>
</ul>
</li>
<li><u>Tracker</u>:<ul>
<li><font color="#4a69bd">This is the central server that stores details about other computers that make up the swarm</font></li>
<li><font color="#4a69bd">It will store details about all the peers uploading/downloading the file</font></li>
<li><font color="#4a69bd">Allowing the peers to locate each other using the stored IP address</font></li>
<li><font color="#BDC581">It will share information on request from members in the swarm</font></li>
<li><font color="#BDC581">It will provide information on which members in the swarm have copies of which files or which part of files</font></li>
</ul>
</li>
<li>Leech - A peer that has negative impact on the swarm by having a poor sharing ratio</li>
<li>Lurker - A peer that downloads many files but does not make available any new content for the community as a whole</li>
</ul>
<h2 id="Circuit-switching-amp-Packet-switching"><a href="#Circuit-switching-amp-Packet-switching" class="headerlink" title="Circuit switching &amp; Packet switching"></a>Circuit switching &amp; Packet switching</h2><table>
<thead>
<tr>
<th></th>
<th align="left">Circuit switching</th>
<th>Packet Switching</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Features</strong></td>
<td align="left"><font color="#4a69bd">1. A dedicated circuit is established at the start of the communication<br>2. Between the sender and the receiver<br>3. All data are transmitted along the same route<br>4. This lasts for the duration of the call<br>5. Then the circuit is removed<br><code>—</code><br>1. Set up for the duration of conversation<br>2. Set up before communication starts <br>3. Maintained throughout the communication<br>4. All data travel down the same route<br>5. Dropped at the end of the conversation<br>6. Complete bandwidth used</font></td>
<td><font color="#4a69bd">- A circuit does not has to be established at the start of the communication<br>- Data to be sent are divided into packets <br>- That can travel along different routes<br>- From node to node&nbsp;<br>- The packets are reassembled at the correct order at the receiver’s end<br>- Must wait until last packet is received to put data back together<br><code>—</code><br>- A large message is divided up into a group of smaller chunks of same size<br>- The packet has a header and a payload<br>- The header contains a source IP address, destination IP address, and sequence number<br>- Each packet is dispatched independently<br>- And may travel along different routes<br>- The packets may arrive out of order<br>- And are reassembled into the original message at the destination<br>- If packets are missing, a retransmission request is sent</font></td>
</tr>
<tr>
<td><strong>Pros</strong></td>
<td align="left"><font color="#4a69bd">- Reduced latency<br>- There are little delay in sending and receiving data once the circuit is established<br>- … because error checking is not required<br>- Circuit made available is dedicated to this communication stream<br><code>—</code><br>- Two way real-time conversation<br>- Better synchronization<br>- Full bandwidth available<br><br></font><u>Explain why company uses circuit switching to make voice calls</u><br><font color="#4a69bd">- A dedicated circuit is established<br>- Can use the whole bandwidth<br>- Two way real-time conversation<br>- No delay as no switching<br>- Data arrive in the order sent</font></td>
<td><font color="#4a69bd">- Accuracy: allow accurate deliver of messages<br>- Completeness: the missing packets can be easily detected and resend request sent so message arrive complete<br>- Resilience: if the network changes, the the router can detect this and send data another way to ensure it arrives<br>- Paths are also available to others; allow simultaneous use of channel; doesn’t use the whole bandwidth<br>- Better security as packets hashed and sent along different routes<br>- Packets can take the least congested route<br><code>—</code><br>- Packets can be rerouted if there are problems<br>- Packets can take the least congested route<br>- Transmission errors can be detected<br>- Missing/corrupt packets can be resent<br></font><br><u>Explain why company uses packet switching to send and receive other types of data</u><br><font color="#4a69bd">- Asynchronous communication<br>- Allows for error checking<br>- Real time transmission is not required<br>- Smaller amount of data is sent, so able to share bandwidth<br>- Doesn’t matter if data arrives out of order</font></td>
</tr>
<tr>
<td><strong>Cons</strong></td>
<td align="left"><font color="#4a69bd">- Bandwidth not available to others<br>- Need extra time before communication to set up the circuit<br>- Alternative route not available without restarting the conversation<br>- Less secure, as easy to intercept data (only one route)<br>- Failure of single route means failure of transmission</font><br>- Not very flexible<br>- Nobody else can use the circuit/channel even when it is idle <br>- The circuit is always there whether or not it is used<br>- If there’s a fault, no alternative<br>- Dedicated channel require greater bandwidth<br>- Time to establish a link can be long</td>
<td><font color="#4a69bd">- Time delay to correct errors / network problems may introduce errors in packets<br>- Require complex protocol<br>- Unsuitable for real-time transmission application</font><br>- <code>--</code><br>- <font color="#4a69bd">packets can be dropped/delayed<br></font>- The protocols for packets switching can be more complex than those for circuit switching if a packet is lost<br>- The sender must resend the packet, waste time<br>- Do not work well with real time data stream<br>- The circuit/channel has to share its bandwidth with other packets<br>- There is a delay at the destination while packets are reassembled<br>- Needs large amount of RAM to handle the large amount of data.<br><br><u>State problems that could arise if video conferencing were to use packet switching</u><br><font color="#4a69bd">- Picture and sound not synchronized<br>- Interruptions/video not continuous<br>- Can be degraded by other computing traffic</font></td>
</tr>
<tr>
<td><strong>Applications</strong></td>
<td align="left">- Public telephone networks<br>- Private telephone networks<br>- Private data networks<br>- <font color="#4a69bd">Video conferencing / live stream</font></td>
<td></td>
</tr>
<tr>
<td><strong>Questions</strong></td>
<td align="left"></td>
<td><u>The TCP/IP protocol is used to send an email message from one node on a LAN to a node on different LAN. State the steps that take place when the email message is sent and received.</u><br><font color="#4a69bd">- Message is split into packets<br>- Each packet is a fixed size<br>- Each packet is given a header<br>- … including the destination IP address, sequence number<br>- Packets are forwarded from one LAN to another LAN<br>- Packets may take different routes<br>- Missing packets are requested to be resent<br>- Packets are reassembled in order at the destination</font></td>
</tr>
</tbody></table>
<h3 id="Packet-header"><a href="#Packet-header" class="headerlink" title="Packet header"></a>Packet header</h3><p><u>Purpose:</u></p>
<ul>
<li><font color="#4a69bd">To store data about the header</font></li>
<li><font color="#4a69bd">and its routing // to ensure it reaches the correct destination</font></li>
<li><font color="#4a69bd">to ensure the packet can be correctly constructed</font></li>
</ul>
<p><u>Examples:</u></p>
<ul>
<li><font color="#4a69bd">IP address of the sender/ receiver</font></li>
<li><font color="#4a69bd">ID of the packet</font></li>
<li><font color="#4a69bd">Packet length</font></li>
<li><font color="#4a69bd">Checksum</font></li>
<li><font color="#4a69bd">Protocol used</font></li>
<li><font color="#4a69bd">Synchronization data</font></li>
<li><font color="#4a69bd">Number of packets the message consists of </font></li>
<li><font color="#4a69bd">Type of service</font></li>
<li><font color="#4a69bd">IP version number</font></li>
<li><font color="#4a69bd">Fragmentation flags</font></li>
<li><font color="#4a69bd">Fragmentation offsets</font></li>
</ul>
<h3 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h3><p><u>Function of router in packet switching:</u></p>
<ul>
<li><font color="#4a69bd">The router examines the packet header</font></li>
<li><font color="#4a69bd">It reads the IP address of the destination</font></li>
<li><font color="#4a69bd">A router has access to a routing table</font><ul>
<li><font color="#4a69bd">Containing information about: eg: available hops/netmask/gateway used</font></li>
<li><font color="#4a69bd">And the status of the routes along the route</font></li>
<li><font color="#4a69bd">The router decides the next hop/next route</font></li>
<li><font color="#4a69bd">And sends the packets to the next hop</font></li>
</ul>
</li>
</ul>
<p><u>Routing table:</u></p>
<ul>
<li><font color="#4a69bd">Network ID // network destination</font></li>
<li><font color="#4a69bd">Routing data to decide best route</font></li>
<li><font color="#4a69bd">IP address of next hop/gateway</font></li>
<li><font color="#4a69bd">Interface</font></li>
</ul>
<p><u>Explain the role of routers in sending an email from one email server to another</u></p>
<ul>
<li><font color="#BDC581">A router is a node in the Internet </font></li>
<li><font color="#BDC581">A router will receive a packet that is in the process of transmission</font></li>
<li><font color="#BDC581">A router has data stored regarding the routers that are within its vicinity</font></li>
<li><font color="#BDC581">A router can access this data to make a choice of which router to send the packet to next</font></li>
<li><font color="#BDC581">The destination IP address in the packet also guides this choice</font></li>
<li><font color="#BDC581">Some of the data stored relates to the amount of traffic using a particular network link</font></li>
<li><font color="#BDC581">Different packets heading to the same destination will not necessarily be directed along the same link  from the router.</font></li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
        <category>ALCS</category>
      </categories>
      <tags>
        <tag>Communication</tag>
      </tags>
  </entry>
  <entry>
    <title>IG/AS/AL CompSci-Note</title>
    <url>/Notes/ASAL-CompSci-Note/</url>
    <content><![CDATA[<h2 id="star-About"><a href="#star-About" class="headerlink" title=":star:About"></a><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>About</h2><blockquote>
<p>This page collects the Computer Science notes I have made. Computer Science in IGCSE and A-Level is a notorious subject be blamed for its huge amount of knowledge to be memorized. I hope this notes could help learners gain happiness on their path of studying Computer Science, and definitely achieve high scores. </p>
</blockquote>
<span id="more"></span>

<div class="note info"><p><strong>Note Format:</strong>**</p>
<ol>
<li><code>past-paper questions</code> are <u>underlined</u></li>
<li><code>Mark-scheme answers</code> are coloured <font color="#4a69bd">blue</font></li>
<li><code>Emphasized words</code> are <strong>bold</strong></li>
</ol>
<img src="https://s2.loli.net/2023/02/04/udoBfhF78xE1CRO.png" alt="Example" style="zoom:50%;">
</div>

<h2 id="bookmark-tabs-Directory"><a href="#bookmark-tabs-Directory" class="headerlink" title=":bookmark_tabs:Directory"></a><span class="github-emoji"><span>📑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Directory</h2><div class="tabs" id="notes"><ul class="nav-tabs"><li class="tab active"><a href="#notes-1">A-Level</a></li><li class="tab"><a href="#notes-2">AS-Level</a></li><li class="tab"><a href="#notes-3">IGCSE</a></li></ul><div class="tab-content"><div class="tab-pane active" id="notes-1"><h3 id="A-Level"><a href="#A-Level" class="headerlink" title="A Level"></a>A Level</h3><ul>
    <li><a style="color:#70a1ff;" href="https://haoran-jie.github.io/Notes/ALCS/Chapter13.1_User-definedDataTypes/">Chapter 13.1: User-defined Data Types</a></li>
    <li><a style="color:#70a1ff;" href="https://haoran-jie.github.io/Notes/ALCS/Chapter13.2_FileOrganisationAndAccess/">Chapter 13.2: File organisation and access</a></li>
    <li><a style="color:#70a1ff;" href="https://haoran-jie.github.io/Notes/ALCS/Chapter13.3_Floating-pointNumbersRepresentation/">Chapter 13.3: Floating-point numbers: representation and manipulation</a></li>
    <li><a style="color:#70a1ff;" href="https://haoran-jie.github.io/Notes/ALCS/Chapter14_CommunicationAndInternetTechnologies/">Chapter 14: Communication and Internet technologies</a></li>
    <li><a style="color:#70a1ff;" href="https://haoran-jie.github.io/Notes/ALCS/Chapter15.1_ProcessorsParallelProcessingandVirturalMachines/">Chapter 15.1: Processors, Parallel Processing and Virtual Machines</a></li>
    <li><a style="color:#70a1ff;" href="https://haoran-jie.github.io/Notes/ALCS/Chapter15.2_BooleanAlgebraAndLogicCircuits/">Chapter15.2: Boolean Algebra And Logic Circuits</a></li>
    <li><a style="color:#70a1ff;" href="https://haoran-jie.github.io/Notes/ALCS/Chapter16.1_PurposeOfAnOperatingSystem/">Chapter 16.1: Purpose of an operating system</a></li>
    <li><a style="color:#70a1ff;" href="https://haoran-jie.github.io/Notes/ALCS/Chapter16.2_TranslationSoftware/">Chapter 16.2: Translation Software</a></li>
    <li><a style="color:#70a1ff;" href="https://haoran-jie.github.io/Notes/ALCS/Chapter17_Security/">Chapter 17: Security</a></li>
    <li><a style="color:#70a1ff;" href="https://haoran-jie.github.io/Notes/ALCS/Chapter18_ArtificialIntelligence/">Chapter 18: Artificial Intelligence</a></li>
    <li><a style="color:#70a1ff;" href="https://haoran-jie.github.io/Notes/ALCS/Chapter19.1_Algorithms/">Chapter 19.1: Algorithms</a></li>
    <li><a style="color:#70a1ff;" href="https://haoran-jie.github.io/Notes/ALCS/Chapter19.2_Recursion/">Chapter 19.2: Recursion</a></li>
    <li><a style="color:#70a1ff;" href="https://haoran-jie.github.io/Notes/ALCS/Chapter20.1_ProgrammingParadigm/">Chapter 20.1: Programming Paradigms</a></li>
    <li><a style="color:#70a1ff;" href="https://haoran-jie.github.io/Notes/ALCS/Chapter20.2_FileProcessingAndExceptionHandling/">Chapter 20.2: File processing and Exception Handling</a></li>
    <li><a style="color:#70a1ff;" href="https://haoran-jie.github.io/Notes/ALCS/practical/">Paper4: Practical Notes</a></li>
</ul></div><div class="tab-pane" id="notes-2"><div class="note default"><p>To be released soon<span class="github-emoji"><span>😎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
</div></div><div class="tab-pane" id="notes-3"><div class="note default"><p>To be released soon<span class="github-emoji"><span>🐼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
</div></div></div></div>



<h2 id="bulb-Resources"><a href="#bulb-Resources" class="headerlink" title=":bulb:Resources"></a><span class="github-emoji"><span>💡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Resources</h2><details>
    <summary style="font-weight:bold;">CIE 官方文件</summary>
    <ul>
        <li><a target="_blank" style="color:#0a3d62;" href="https://haoran-jie.github.io/file/ASCS-notedSyllabus.pdf">AS_Syllabus-注释版</a></li>
        <li><a target="_blank" style="color:#0a3d62;" href="https://haoran-jie.github.io/file/9618_Pseudocode_Guide.pdf">9618 Pseudocode Guide</a></li>
    </ul>
</details>



<h2 id="raised-hand-How-to-contribute"><a href="#raised-hand-How-to-contribute" class="headerlink" title=":raised_hand:How to contribute"></a><span class="github-emoji"><span>✋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>How to contribute</h2><div class="note info"><ol>
<li><p>You can comment under each post using <code>disqus</code> or <code>gittalk</code> about anything you want to <strong>add/change/fix</strong></p>
<ul>
<li><code>disqus</code> requires a <del>vpn</del> to run</li>
<li><code>gittalk</code> requires a <a href="https://github.com/">github</a> account</li>
</ul>
</li>
<li><p>You can leave me a message via email <span class="github-emoji"><span>⬇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<ul>
<li><a class="btn" href="mailto:samueljie1@gmail.com "><i class="fa fa-envelopes-bulk"></i>leave a message</a></li>
</ul>
</li>
</ol>
</div>

<h2 id="two-men-holding-hands-Contributors"><a href="#two-men-holding-hands-Contributors" class="headerlink" title=":two_men_holding_hands:Contributors"></a><span class="github-emoji"><span>👬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Contributors</h2><div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/K.png"></object>
<p>Katrina Liu</p><p>Economist</p>
<a href="https://haoran-jie.github.io/uncategorized/Contributors/"></a>
</div></div>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>README</tag>
      </tags>
  </entry>
  <entry>
    <title>Chapter 15.1: Processors, Parallel Processing and Virtual Machines</title>
    <url>/Notes/ALCS/Chapter15.1_ProcessorsParallelProcessingandVirturalMachines/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/02/04/E5NamJYZA2WkfFV.png"></p>
<span id="more"></span> 

<h2 id="RISC-amp-CISC"><a href="#RISC-amp-CISC" class="headerlink" title="RISC &amp; CISC"></a>RISC &amp; CISC</h2><blockquote>
<p><strong>RISC</strong> - reduced instruction set computer</p>
<p><strong>CISC</strong> - complex instruction set computer</p>
</blockquote>
<h3 id="Differences-between-RISC-and-CISC"><a href="#Differences-between-RISC-and-CISC" class="headerlink" title="Differences between RISC and CISC"></a>Differences between RISC and CISC</h3><table>
<thead>
<tr>
<th align="center">RISC</th>
<th align="center">CISC</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Many instruction formats are possible</td>
<td align="center">Uses fewer instruction formats</td>
</tr>
<tr>
<td align="center">There are more addressing modes</td>
<td align="center">Uses fewer addressing modes</td>
</tr>
<tr>
<td align="center">Makes use of multi-cycle instructions</td>
<td align="center">Makes use of single-cycle instructions</td>
</tr>
<tr>
<td align="center">Instructions can be of a variable length</td>
<td align="center">Instructions are of a fixed length</td>
</tr>
<tr>
<td align="center">Longer execution time for instructions</td>
<td align="center">Shorter execution time for instructions</td>
</tr>
<tr>
<td align="center">Multiple register sets</td>
<td align="center">Makes use of general multipurpose registers // fewer registers</td>
</tr>
<tr>
<td align="center">It is more difficult to make pipelining work</td>
<td align="center">Easier to make pipelining function correctly</td>
</tr>
<tr>
<td align="center">The design emphasis is on the hardware</td>
<td align="center">The design emphasis is one the software</td>
</tr>
<tr>
<td align="center">Uses the memory unit to allow complex instructions to be carried out</td>
<td align="center">Processor chips require fewer transistors</td>
</tr>
<tr>
<td align="center">Has a programmable control unit</td>
<td align="center">Has hard-wired control unit</td>
</tr>
<tr>
<td align="center">Make more use of cache and less use of RAM</td>
<td align="center">Make more use of RAM</td>
</tr>
</tbody></table>
<h3 id="Interrupt-handling-in-pipelining"><a href="#Interrupt-handling-in-pipelining" class="headerlink" title="Interrupt handling in pipelining"></a>Interrupt handling in pipelining</h3><ul>
<li>Once the processor detects the existence of an interrupt</li>
<li>To discard all instructions in the pipelining except for the last instruction in the writeback stage</li>
</ul>
<h3 id="Past-paper-questions"><a href="#Past-paper-questions" class="headerlink" title="Past-paper questions"></a>Past-paper questions</h3><hr>
<img src="https://s2.loli.net/2023/02/04/JginWx9cENhuAeB.png" style="zoom: 50%;">

<hr>
<img src="https://s2.loli.net/2023/02/04/ei5GOp93RtLwsyU.png" style="zoom: 67%;">

<hr>
<h2 id="Pipelining-amp-Registers"><a href="#Pipelining-amp-Registers" class="headerlink" title="Pipelining &amp; Registers"></a>Pipelining &amp; Registers</h2><blockquote>
<p>Allow several instructions to be processed simultaneously without having to wait for the previous instructions to be completed</p>
</blockquote>
<ol>
<li>Instruction Fetch cycle (IF)</li>
<li>Instruction Decode cycle (ID)</li>
<li>Operand Fetch cycle (OF)</li>
<li>Instruction Execution cycle (IE)</li>
<li>Writeback Result process (WB)</li>
</ol>
<p><u>Explain what is meant by pipelining:</u></p>
<ul>
<li><font color="#4a69bd">Pipelining is instruction level parallelism</font></li>
<li><font color="#4a69bd">Execution of an instruction is split into a number of stages</font></li>
<li><font color="#4a69bd">When the first stage for an instruction is completed, the first page of next instruction can start executing</font></li>
<li><font color="#4a69bd">Another instruction can start executing before the previous one is finished</font></li>
<li><font color="#4a69bd">Processing a number of instructions can be concurrent/simultaneous</font></li>
</ul>
<img src="https://s2.loli.net/2023/02/04/OoFITXZAdmbCenR.jpg" style="zoom:67%;">

<hr>
<h2 id="Basic-computer-architectures"><a href="#Basic-computer-architectures" class="headerlink" title="Basic computer architectures"></a>Basic computer architectures</h2><h3 id="SISD"><a href="#SISD" class="headerlink" title="SISD"></a>SISD</h3><ul>
<li>There is only one processor</li>
<li>The processor executes one sets of instructions on one sets of data</li>
</ul>
<h3 id="SIMD"><a href="#SIMD" class="headerlink" title="SIMD"></a>SIMD</h3><ul>
<li>The processor has several ALUs // several processors </li>
<li>Each ALU executes the same set of instructions on different sets of data at the same time</li>
</ul>
<h3 id="MISD"><a href="#MISD" class="headerlink" title="MISD"></a>MISD</h3><ul>
<li>There are several processors</li>
<li>Each processor executes different set of instruction on the same set of data at the same time</li>
</ul>
<h3 id="MIMD"><a href="#MIMD" class="headerlink" title="MIMD"></a>MIMD</h3><ul>
<li>There are several processors </li>
<li>Each processor execute different set of instruction</li>
<li>Each processor operate on different set of data</li>
</ul>
<h3 id="Past-paper-questions-1"><a href="#Past-paper-questions-1" class="headerlink" title="Past-paper questions"></a>Past-paper questions</h3><img src="https://s2.loli.net/2023/02/04/P1yY8O3NAKwCX6V.png" style="zoom: 50%;">

<hr>
<img src="https://s2.loli.net/2023/02/04/TiHIRfMrj98oLut.png" style="zoom: 67%;">

<h2 id="Massively-parallel-computers"><a href="#Massively-parallel-computers" class="headerlink" title="Massively parallel computers"></a>Massively parallel computers</h2><p><u>Describe what is meant by a massively paralleled computer</u></p>
<ul>
<li><font color="#4a69bd">Large number of processors</font></li>
<li><font color="#4a69bd">… Working collaboratively on the same program</font></li>
<li><font color="#4a69bd">… Working together simultaneously on the same program</font></li>
<li><font color="#4a69bd">… Communicating via a message interface</font></li>
</ul>
<h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><ul>
<li><font color="#4a69bd">A large number of processors</font></li>
<li><font color="#4a69bd">Collaborative processing // coordinated simultaneous processing</font></li>
<li><font color="#4a69bd">Network infrastructure</font></li>
<li><font color="#4a69bd">Communicating using message interface</font></li>
<li>It is a much faster way to handle large volumes of independent data</li>
<li>The data used sometimes relies on result of previous operation, therefore such data cannot be handled in parallel</li>
<li>Datasets require the same processing for it to work</li>
<li>It overcomes the Von Neumann bottleneck and therefore greatly improves CPU performance</li>
<li>Parallel processing requires more expensive hardware</li>
</ul>
<h3 id="Past-paper-Questions"><a href="#Past-paper-Questions" class="headerlink" title="Past-paper Questions"></a>Past-paper Questions</h3><p><u>Changes needed for codes in order to run on massively paralleled computer</u></p>
<ul>
<li><font color="#4a69bd">Split into blocks of code</font></li>
<li><font color="#4a69bd">… that can be processed simultaneously</font></li>
<li><font color="#4a69bd">… instead of sequentially</font></li>
<li><font color="#4a69bd">Each block is processed by a different processor</font></li>
<li><font color="#4a69bd">Which allows each of many processors to process the different blocks of code independently</font></li>
<li><font color="#4a69bd">Requires both parallelism and coordination</font></li>
</ul>
<p><u>Explain one of the hardware issues that will be overcome if a massively parallel computer is to function correctly</u></p>
<ul>
<li><font color="#4a69bd">Communication between processors is the issue</font></li>
<li><font color="#4a69bd">Each processor needs a link to other processors</font></li>
<li><font color="#4a69bd">Many processors require many of these links</font></li>
<li><font color="#4a69bd">Challenging topology</font></li>
</ul>
<p><em>A computer has a single processor that contains four processing units.</em><br><u>Explain why this is not an example of a massively paralleled computer</u>:</p>
<ul>
<li><font color="#4a69bd">Only one separate processor</font></li>
<li><font color="#4a69bd">Quad core computer system // processing unit shares the same bus</font></li>
</ul>
<p><u>Identify different types of parallelism</u></p>
<ul>
<li>Instruction</li>
<li>Processor</li>
<li>Memory usage</li>
<li>Computer System</li>
</ul>
<h2 id="Virtual-machine"><a href="#Virtual-machine" class="headerlink" title="Virtual machine"></a>Virtual machine</h2><blockquote>
<p><font color="#4a69bd">An emulation of an existing computer/program/operating system. A computer OS running with another computer’s OS.</font></p>
<p>Using a software to implement a hardware setup</p>
</blockquote>
<h3 id="Host-OS"><a href="#Host-OS" class="headerlink" title="Host OS"></a>Host OS</h3><ul>
<li><font color="#4a69bd">The operating system that is actually controlling the physical hardware</font></li>
<li><font color="#4a69bd">The operating system for the physical hardware</font></li>
<li><font color="#4a69bd">Guest OS is running under the host OS</font></li>
</ul>
<h3 id="Guest-OS"><a href="#Guest-OS" class="headerlink" title="Guest OS"></a>Guest OS</h3><ul>
<li><font color="#4a69bd">An operating system running in the virtual machine</font></li>
<li><font color="#4a69bd">Controls virtual hardware</font></li>
<li><font color="#4a69bd">OS being emulated</font></li>
</ul>
<h3 id="Hypervisor"><a href="#Hypervisor" class="headerlink" title="Hypervisor"></a>Hypervisor</h3><blockquote>
<p><font color="#4a69bd">Virtual machine software that creates and runs virtual machine</font></p>
</blockquote>
<ul>
<li>Software, not hardware</li>
<li>Creates/deletes/manages virtual machine</li>
<li>Translates the instruction used by the guest operating system to that required by the host operating system</li>
<li>Hardware emulation</li>
<li>Protects each virtual machine<ul>
<li>So instances can be tested together</li>
</ul>
</li>
</ul>
<h3 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h3><ul>
<li><font color="#4a69bd">Multiple operating systems can exist simultaneously</font></li>
<li><font color="#4a69bd">… allow for testing using the same hardware</font></li>
<li><font color="#4a69bd">Only one set of hardware required</font></li>
<li><font color="#4a69bd">… reduces cost of producing the app</font></li>
<li><font color="#4a69bd">No need to set up more than one computer</font></li>
<li><code>--</code></li>
<li><font color="#4a69bd">Software can be tried on different OS using the same hardware</font></li>
<li><font color="#4a69bd">No need to purchase all sorts of different software</font></li>
<li><font color="#4a69bd">Easier to recover if the system issue causes the system to crash</font></li>
<li><font color="#4a69bd">VM provides protection to other software</font></li>
<li><code>--</code></li>
<li><font color="#4a69bd">No need to acquire client hardware for testing</font></li>
<li><font color="#4a69bd">Reduce set-up time for test system</font></li>
<li><font color="#4a69bd">Common development system for all developers</font></li>
<li><code>--</code></li>
<li>They allow modern systems to use programs that run on obsolete or unsupported platform<a href="https://img1.wsimg.com/blobby/go/9a8687c5-eecd-45f3-821d-7cdfe880b594/downloads/15.1%20Virtual%20Machine%20(MT-L).pdf">^1</a></li>
<li>They allow platform independent program to run on multiple platforms</li>
<li>They allow one computer to behave as several computers simultaneously</li>
<li>They can be easily backed up, copied, and reinstalled.</li>
</ul>
<h3 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h3><ul>
<li><font color="#4a69bd">Time and effort required for implementation</font></li>
<li><font color="#4a69bd">Implementation would not offer the same level of performance that would be obtained in a normal system</font></li>
<li><font color="#4a69bd">Expensive, complex to manage and maintain</font></li>
<li><font color="#4a69bd">Execution of extra code, processing time increased</font><ul>
<li><font color="#4a69bd">So cannot accurately test speed for real performance</font></li>
<li><font color="#4a69bd">Performance is degraded</font></li>
</ul>
</li>
<li><font color="#4a69bd">May not be able to emulate some hardware</font><ul>
<li><font color="#4a69bd">So that the hardware cannot be tested using virtual machine</font></li>
</ul>
</li>
<li><code>--</code></li>
<li><font color="#4a69bd">Virtual machine may not be able to emulate some hardware</font></li>
<li><font color="#4a69bd">Virtual machine cannot directly access some hardware</font></li>
<li><font color="#4a69bd">Using virtual machine means execution of extra code // processing time increased</font></li>
<li><font color="#4a69bd">A virtual machine might not be as efficient // performance degraded</font></li>
<li><font color="#4a69bd">Using a virtual machine increases the maintenance overheads </font></li>
</ul>
<h3 id="Role-of-virtual-machine-software"><a href="#Role-of-virtual-machine-software" class="headerlink" title="Role of virtual machine software"></a>Role of virtual machine software</h3><ol>
<li><font color="#4a69bd">Create/delete virtual machines</font></li>
<li><font color="#4a69bd">translate instruction used by the guest operating system to that required by the host operating system</font></li>
<li><font color="#4a69bd">Existing hardware made available to guest OS //  hardware emulation</font></li>
<li><font color="#4a69bd">Ensure each virtual machine is protected from actions from other virtual machines </font></li>
</ol>
<p><img src="https://s2.loli.net/2023/02/04/PYgz7RaKXyH15A6.jpg"></p>
<h3 id="Past-paper-questions-2"><a href="#Past-paper-questions-2" class="headerlink" title="Past-paper questions"></a>Past-paper questions</h3><p>A virtual machine is a <font color="#4a69bd"><u>software/program</u></font> that emulate a <font color="#4a69bd"><u>physical/different</u></font> computer system; A virtual machine allow multiple <font color="#4a69bd"><u>guest</u></font> operating system to run on one computer using <font color="#4a69bd"><u>host</u></font> operating system</p>
<p><u>Describe what happens after the guest operating system has received the data request from the application</u>:</p>
<ul>
<li><font color="#4a69bd">Guest OS handles the request as if it were running on its own physical machine</font></li>
<li><font color="#4a69bd">Guest OS handles the request as usual </font></li>
<li><font color="#4a69bd">I/O requests are translated by the virtual machine software</font></li>
<li><font color="#4a69bd">Into instruction executable by the host OS</font></li>
<li><font color="#4a69bd">Host OS retrieves the data from the file</font></li>
<li><font color="#4a69bd">Host OS passes the data into virtual machine software</font></li>
<li><font color="#4a69bd">The virtual machine passes the data to the guest OS</font></li>
<li><font color="#4a69bd">Guest OS passes the data to the application </font></li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
        <category>ALCS</category>
      </categories>
  </entry>
  <entry>
    <title>Chapter 13.1: User-defined Data Types</title>
    <url>/Notes/ALCS/Chapter13.1_User-definedDataTypes/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/02/04/p8sZdTa2rGBOwCW.png" alt="Syllabus"></p>
<hr>
<span id="more"></span>

<p><u>Purpose of user-defined data types:</u> </p>
<ul>
<li><font color="#4a69bd">To create new data type (from existing data types)</font></li>
<li><font color="#4a69bd">To allow data types not available in a programming language to be constructed // To extend the flexibility of programming language</font></li>
</ul>
<p><u>Why user-defined data types are <strong>necessary</strong>:</u></p>
<ul>
<li><font color="#4a69bd">No suitable data type is provided by the language used</font></li>
<li><font color="#4a69bd">The programmer needs to specify a new data type</font></li>
<li><font color="#4a69bd">… that meets the <strong>requirement</strong> of the application </font></li>
</ul>
<p><u>State what is meant by user-defined data types:</u></p>
<ul>
<li><font color="#4a69bd">Derived from one or more existing data types</font></li>
<li><font color="#4a69bd">Used to extend the built-in data types</font></li>
<li><font color="#4a69bd">Creates data types specific to applications</font></li>
</ul>
<hr>
<h2 id="Non-composite-Data-Types"><a href="#Non-composite-Data-Types" class="headerlink" title="Non-composite Data Types"></a>Non-composite Data Types</h2><p><u>Define non-composite data types</u></p>
<ul>
<li><font color="#4a69bd">A single data type that does not involve a reference to another type / usually built in to a programming language </font></li>
</ul>
<p><u>Give examples of non-composite data type:</u></p>
<ul>
<li><font color="#4a69bd">Integer</font><ul>
<li><font color="#4a69bd">Stores as a whole number </font></li>
</ul>
</li>
<li><font color="#4a69bd">Boolean</font><ul>
<li><font color="#4a69bd">Stores true or false</font></li>
</ul>
</li>
<li><font color="#4a69bd">Real/double/float/decimal</font><ul>
<li><font color="#4a69bd">Stores decimal numbers </font></li>
</ul>
</li>
<li><font color="#4a69bd">String</font><ul>
<li><font color="#4a69bd">Stores zero or more characters</font></li>
</ul>
</li>
<li><font color="#4a69bd">Char</font><ul>
<li><font color="#4a69bd">Stores a single character</font></li>
</ul>
</li>
<li><font color="#4a69bd">Pointer</font><br>- <font color="#4a69bd">Whole number used to reference a memory location</font></li>
</ul>
<h3 id="Enumerated"><a href="#Enumerated" class="headerlink" title="Enumerated"></a>Enumerated</h3><blockquote>
<p>This is a data type used to store constant values. It is a list of possible values. </p>
</blockquote>
<ul>
<li><img src="https://s2.loli.net/2023/02/04/t5Wa71moCNpfwKz.png" alt="Enumerated: pseudocode guide"></li>
<li><img src="https://s2.loli.net/2023/02/04/QYZpiEwsFAa3qzK.jpg" alt="enu2" style="zoom: 50%;"></li>
<li><img src="https://s2.loli.net/2023/02/04/LAUd5zqnGDae7I3.png" alt="from pastpaper"></li>
</ul>
<p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>: Enumerated 里面不用加引号<code>''</code> 或双引号<code>""</code></p>
<p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>:The values defined in an enumerated data type are ordinal. This mean that enumerated data types have an implied order or values.  </p>
<hr>
<h3 id="Pointer-point-up"><a href="#Pointer-point-up" class="headerlink" title="Pointer:point_up:"></a>Pointer<span class="github-emoji"><span>☝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><blockquote>
<p>A user-defined non-composite data type referencing a memory location is called a pointer</p>
</blockquote>
<ul>
<li><input checked="" disabled="" type="checkbox"> Define: <code>TYPE &lt;pointer&gt; = ^&lt;Typename&gt;</code></li>
<li><input checked="" disabled="" type="checkbox"> Declaration: <code>DECLARE pointerVar : &lt;pointer&gt;</code></li>
<li><input checked="" disabled="" type="checkbox"> Reference: <code>pointerVar &lt;- ^variable</code> </li>
<li><input checked="" disabled="" type="checkbox"> Dereference: <code>pointerVar^</code></li>
</ul>
<p><strong>The pointer should be defined as follows:</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">TYPE &lt;pointer&gt; = ^&lt;Typename&gt;</span><br><span class="line">//For example:</span><br><span class="line">TYPE IntPointer = ^INTEGER</span><br><span class="line">DECLARE number: INTEGER</span><br><span class="line">DECLARE numberLocation: IntPointer</span><br><span class="line">numberLocation &lt;- ^number //reference</span><br></pre></td></tr></tbody></table></figure>

<p><strong>Combining enumerated data type and pointer data type:</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">TYPE season = (Spring,Summer,Autumn,Winter)</span><br><span class="line">TYPE seasonPointer = ^Season</span><br><span class="line">DECLARE currentSeason: Season</span><br><span class="line">currentSeason &lt;- Spring</span><br><span class="line">DECLARE mySeason: seasonPointer</span><br><span class="line">mySeason &lt;- ^currentSeason //reference</span><br><span class="line">OUTPUT mySeason^ //dereference: output will be Spring</span><br></pre></td></tr></tbody></table></figure>

<hr>
<h2 id="Composite-Data-Types"><a href="#Composite-Data-Types" class="headerlink" title="Composite Data Types"></a>Composite Data Types</h2><p><u>Define composite data type:</u></p>
<ul>
<li><font color="#4a69bd"> Data type constructed from other data types</font></li>
</ul>
<p><u>Give examples of composite data types:</u></p>
<ul>
<li><font color="#4a69bd">Array</font><ul>
<li><font color="#4a69bd"> Indexed collection of items with the same data type </font></li>
</ul>
</li>
<li><font color="#4a69bd">List</font><ul>
<li><font color="#4a69bd">Indexed collection of items that can have different data type.</font></li>
</ul>
</li>
<li><font color="#4a69bd">Record</font><ul>
<li><font color="#4a69bd"> Collection of related items which may have different data types</font></li>
</ul>
</li>
<li><font color="#4a69bd">Set</font><ul>
<li><font color="#4a69bd">Stores a finite numbers of different values that have no order // Support mathematical operation</font></li>
</ul>
</li>
<li><font color="#4a69bd">Class</font></li>
<li><font color="#4a69bd">Stack</font></li>
<li><font color="#4a69bd">Queue</font></li>
<li><font color="#4a69bd">Linked List</font></li>
<li><font color="#4a69bd"> Dictionary </font></li>
</ul>
<h3 id="Set-arrows-counterclockwise"><a href="#Set-arrows-counterclockwise" class="headerlink" title="Set:arrows_counterclockwise:"></a>Set<span class="github-emoji"><span>🔄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f504.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><blockquote>
<p>A data type to create sets and apply the mathematical operations defined in set theory</p>
<ul>
<li>Contains a collection of data values</li>
<li>There is no organization of data values within the set</li>
<li>Duplicate values are now allowed</li>
</ul>
</blockquote>
<img src="https://s2.loli.net/2023/02/04/nfJqDTHV5Z3hOkr.jpg" alt="Set1" style="zoom: 33%;">

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">TYPE letter = SET OF CHAR</span><br><span class="line">DECLARE myname ('s','a','m','u','e','l'): letter</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Supported-operations"><a href="#Supported-operations" class="headerlink" title="Supported operations:"></a>Supported operations:</h4><ul>
<li>Check if a value exists in a set</li>
<li>Adding a new data in set</li>
<li>Delete a data in set</li>
<li>Union two sets</li>
</ul>
<h3 id="Record-record-button"><a href="#Record-record-button" class="headerlink" title="Record:record_button:"></a>Record<span class="github-emoji"><span>⏺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23fa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">TYPE TbookRecord</span><br><span class="line">  DECLARE title: STRING</span><br><span class="line">  DECLARE author: STRING</span><br><span class="line">  DECLARE publisher: STRING</span><br><span class="line">  DECLARE noPages: STRING</span><br><span class="line">  DECLARE isFiction: TRUE</span><br><span class="line">ENDTYPE</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Class-x2F-object-classical-building"><a href="#Class-x2F-object-classical-building" class="headerlink" title="Class/object:classical_building:"></a>Class/object<span class="github-emoji"><span>🏛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3db.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><blockquote>
<p>A template from which all objects are based</p>
<p>Gives the properties and methods for an object</p>
</blockquote>
<ul>
<li>Attributes: Properties/fields of an object</li>
<li>Methods: Modules attached to objects to allow it to perform certain actions</li>
</ul>
<h2 id="Use-of-User-defined-Data-Types"><a href="#Use-of-User-defined-Data-Types" class="headerlink" title="Use of User-defined Data Types"></a>Use of User-defined Data Types</h2><p><img src="https://s2.loli.net/2023/02/04/UfY5spDSrigq4KM.png" alt="pseudocode guide code example"></p>
<h3 id="Past-paper-questions"><a href="#Past-paper-questions" class="headerlink" title="Past paper questions"></a>Past paper questions</h3><p><u>Write pseudocode to create an enumerated type called <code>Parts</code> to include these parts sold in a computer shop:</u></p>
<p><em>Monitor, CPU, SSD, HDD, LaserPrinter, Keyboard, Mouse</em></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">TYPE Parts = (Monitor, CPU, SSD, HDD, LaserPrinter, Keyboard, Mouse)</span><br></pre></td></tr></tbody></table></figure>

<p><u>Write pseudocode  to  create  a  pointer  type  called  <code>SelectParts</code>  that  will  reference  the  memory location in which the current part name is stored.</u></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">TYPE SelectParts = ^Parts</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>Notes</category>
        <category>ALCS</category>
      </categories>
  </entry>
  <entry>
    <title>Chapter15.2: Boolean Algebra And Logic Circuits</title>
    <url>/Notes/ALCS/Chapter15.2_BooleanAlgebraAndLogicCircuits/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/02/04/ReWvZK5L9cPHjAF.png"></p>
<hr>
<span id="more"></span>

<h2 id="Adders-heavy-plus-sign"><a href="#Adders-heavy-plus-sign" class="headerlink" title="Adders:heavy_plus_sign:"></a>Adders<span class="github-emoji"><span>➕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2795.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h2><h3 id="Half-adder"><a href="#Half-adder" class="headerlink" title="Half adder"></a>Half adder</h3><blockquote>
<p>Carries out binary addition on 2 bits generating two outputs</p>
</blockquote>
<ul>
<li>The sum bit <code>S</code></li>
<li>The carry bit <code>C</code></li>
</ul>
<table>
<thead>
<tr>
<th>Input</th>
<th></th>
<th>Output</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>B</td>
<td>S</td>
<td>C</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<hr>
<p><img src="https://s2.loli.net/2023/02/04/cvQ5yYXaO3iFBPK.jpg" alt="Half-adder"></p>
<hr>
<h3 id="Full-adder"><a href="#Full-adder" class="headerlink" title="Full adder"></a>Full adder</h3><blockquote>
<p>The half adder is unable to deal with the addition of several binary bits (e.g. an 8-bit byte). To enable this, we have considered the full adder circuit</p>
</blockquote>
<table>
<thead>
<tr>
<th>Inputs</th>
<th></th>
<th></th>
<th>Outputs</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>B</td>
<td>C<del>in</del></td>
<td>S</td>
<td>C<del>out</del></td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody></table>
<hr>
<p><img src="https://s2.loli.net/2023/02/04/KDTg4LuG7caW1Y2.jpg"></p>
<hr>
<h2 id="Flip-flop"><a href="#Flip-flop" class="headerlink" title="Flip-flop"></a>Flip-flop</h2><h3 id="SR-Flip-flop"><a href="#SR-Flip-flop" class="headerlink" title="SR Flip-flop"></a>SR Flip-flop</h3><blockquote>
<p>The SR flip-flop or <code>latch</code> is a simple example of a sequential circuit. It can be constructed with two NAND gates or two NOR gates.</p>
</blockquote>
<p>The properties of SR flip-flop explained why it can be used as a storage device for 1 bit and therefore could be used as a component in RAM because a value is stored but can be altered. </p>
<p>The alternative NAND gate circuit for the SR flip-flop has a similar structure but the labelling is different. The important difference is that setting is achieved when S=0 &amp; R=1 and resetting with R=0 and S=1. </p>
<h4 id="NOR-gates-implementation"><a href="#NOR-gates-implementation" class="headerlink" title="NOR gates implementation"></a>NOR gates implementation</h4><img src="https://s2.loli.net/2023/02/04/F1vxdmWa6qRHCuK.jpg" style="zoom: 25%;">

<img src="https://s2.loli.net/2023/02/04/5DsqyinEAwIzcpf.jpg" style="zoom: 25%;">

<img src="https://s2.loli.net/2023/02/04/TeC9ALuwzlXbUE6.jpg" style="zoom: 50%;">

<hr>
<h4 id="NAND-gate-implementation"><a href="#NAND-gate-implementation" class="headerlink" title="NAND gate implementation"></a>NAND gate implementation</h4><img src="https://s2.loli.net/2023/02/04/rhMEvnVjw3mqN98.png" style="zoom: 67%;">

<img src="https://s2.loli.net/2023/02/04/6cemESZCDhIu28A.png" style="zoom:50%;">

<p><u>Why is the final row a problem?</u></p>
<ul>
<li><font color="#4a69bd">Q and not Q have the same value</font></li>
<li><font color="#4a69bd">Q and not Q should be the complement to each other</font></li>
<li><font color="#4a69bd">Flip-flop becomes unstable</font></li>
</ul>
<hr>
<h3 id="JK-Flip-flop"><a href="#JK-Flip-flop" class="headerlink" title="JK Flip-flop"></a>JK Flip-flop</h3><blockquote>
<p>In addition to the possibility of entering an invalid state there is also the potential for a circuit to arrive in an uncertain state if inputs do not arrive quite at the same time. In order to prevent this, a circuit may include a clock pulse input to give a better chance of synchronising inputs. The JK flip-flop is an example.</p>
</blockquote>
<img src="https://s2.loli.net/2023/02/04/VqYGAZ1sEFM6bWm.jpg" style="zoom: 30%;">



<img src="https://s2.loli.net/2023/02/04/DW3LECaF5exdZjT.jpg" style="zoom: 40%;">

<hr>
<h3 id="Past-paper-questions"><a href="#Past-paper-questions" class="headerlink" title="Past-paper questions"></a>Past-paper questions</h3><p><u>Why JK flip-flop is an improvement to the SR flip-flop</u></p>
<ul>
<li><font color="#4a69bd">The SR flip-flop has an invalid combination of SR which allows Q and not Q to have the same value</font></li>
<li><font color="#4a69bd">The JK flip-flop does not allow Q and not Q to have the same value</font></li>
</ul>
<p><u>Advantages of JK flip-flop</u></p>
<ul>
<li><font color="#4a69bd">All four possibilities are valid</font></li>
<li><font color="#4a69bd">The 1-1 combination changes to output to logical complement</font></li>
<li><font color="#4a69bd">Unstable state avoided</font></li>
<li><font color="#4a69bd">Invalid state cannot occur</font></li>
</ul>
<p><u>Explain the role of flip-flop in a computer</u></p>
<ul>
<li><font color="#4a69bd">A flip flop can be stored either a 1 or 0</font></li>
<li><font color="#4a69bd">Computers use bits to store data</font></li>
<li><font color="#4a69bd">Flip flop can therefore be used to store bits</font></li>
<li><font color="#4a69bd">Memory can be created from flip-flop</font></li>
</ul>
<p><u>Describe the role of flip-flop in a computer</u>:</p>
<ul>
<li><font color="#4a69bd">Circuit / electrical components(construction)</font></li>
<li><font color="#4a69bd">With two states</font></li>
<li><font color="#4a69bd">Used for data storage elements // memory</font></li>
<li><font color="#4a69bd">… to store 1 bit of data</font></li>
</ul>
<p><u>Difference between SR flip-flop and JK flip-flop</u></p>
<ul>
<li><font color="#4a69bd">SR flip-flop has a undefined/invalid/intermediate state // JK flip-flop is stable</font><ul>
<li><font color="#4a69bd">for a SR flip-flop constructed using two NOR gates, when S=1 and R=1. The Q and not Q will be both 0. This is invalid since Q and not Q should be the logical complement to each other.</font></li>
</ul>
</li>
<li><font color="#4a69bd">JK flip-flop has a clock pulse to synchronize input</font></li>
</ul>
<p><img src="https://s2.loli.net/2023/02/04/xSmvkTszVOMnyUD.png"></p>
<hr>
<h2 id="Boolean-Algebra"><a href="#Boolean-Algebra" class="headerlink" title="Boolean Algebra"></a>Boolean Algebra</h2><img src="https://s2.loli.net/2023/02/04/aH2KxzYhPEiwB54.jpg" style="zoom:70%;">

<h2 id="K-map"><a href="#K-map" class="headerlink" title="K-map"></a>K-map</h2><h3 id="Grey-code"><a href="#Grey-code" class="headerlink" title="Grey code"></a>Grey code</h3><img src="https://s2.loli.net/2023/02/04/og7DKP1Ws9rERiy.png" style="zoom:150%;">

<p><span class="github-emoji"><span>🔗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f517.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://en.wikipedia.org/wiki/Gray_code">https://en.wikipedia.org/wiki/Gray_code</a></p>
]]></content>
      <categories>
        <category>Notes</category>
        <category>ALCS</category>
      </categories>
  </entry>
  <entry>
    <title>Chapter 16.1: Purpose of an operating system</title>
    <url>/Notes/ALCS/Chapter16.1_PurposeOfAnOperatingSystem/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/02/04/aUVi1RcIQDbl84W.png"></p>
<hr>
<span id="more"></span>

<h2 id="Operating-system-resource-optimization"><a href="#Operating-system-resource-optimization" class="headerlink" title="Operating system resource optimization"></a>Operating system resource optimization</h2><p><u>How an operating system can maximize the use of resources:</u></p>
<ul>
<li><p><u>Primary memory</u></p>
<ul>
<li><font color="#4a69bd">Moving frequently accessed instructions to cache</font></li>
<li><font color="#4a69bd">… for faster recall</font></li>
<li><font color="#4a69bd">… as SRAM is used rather than DRAM for cache</font></li>
<li><font color="#4a69bd">Making use of virtual memory</font></li>
<li><font color="#4a69bd">… with paging or segmentation</font></li>
<li><font color="#4a69bd">… to swap memory to and from disk</font></li>
<li><font color="#4a69bd">Partition memory</font></li>
<li><font color="#4a69bd">…  dividing main memory into static partitions</font></li>
<li><font color="#4a69bd">… to allow more than one task to be available</font></li>
<li><font color="#4a69bd">Removing unused item/tasks from RAM</font></li>
<li><font color="#4a69bd">… by marking a partition as available</font></li>
<li>.<font color="#4a69bd">.. as soon as the process using it has terminated</font></li>
</ul>
</li>
<li><p><u>Disk</u></p>
<ul>
<li><font color="#4a69bd">Disk cache</font></li>
<li><font color="#4a69bd">… a disk cache holds data that is frequently transferred to/from the disk</font></li>
<li><font color="#4a69bd">… the cache can be held in disk or RAM</font></li>
<li><font color="#4a69bd">Compression utility</font></li>
<li><font color="#4a69bd">… decreasing the size of file stored on the disk</font></li>
<li><font color="#4a69bd">… in order to fit larger files on the disk</font></li>
<li><font color="#4a69bd">Defragmentation utility</font></li>
<li><font color="#4a69bd">… files are rearranged to occupy contiguous disk space</font></li>
<li><font color="#4a69bd">… this reduces the time taken to access files/decrease latency</font></li>
</ul>
</li>
<li><p>CPU</p>
<ul>
<li>Scheduling</li>
<li>… Better utilization of CPU time and resources</li>
</ul>
</li>
<li><p>Input/Output system</p>
<ul>
<li><p>IO operation initiated by the computer user</p>
</li>
<li><p>IO operation which occurs while software is being run and resources such as printers and disk drives are requested </p>
</li>
<li><p><strong>Direct memory access(DMA)</strong> controller is needed to allow hardware to access the main memory independently of the CPU.</p>
<ul>
<li>DMA initiates the data transfer</li>
<li>CPU carries out other tasks while this data transfer operation take place</li>
<li>Once the data transfer is complete, an interrupt signal is sent from the DMA to CPU.</li>
</ul>
</li>
<li><img src="https://s2.loli.net/2023/02/04/TyxX7F9D3IsRdav.jpg" style="zoom: 33%;"></li>
</ul>
</li>
</ul>
<hr>
<h2 id="Hide-the-complexity-of-the-hardware"><a href="#Hide-the-complexity-of-the-hardware" class="headerlink" title="Hide the complexity of the hardware"></a>Hide the complexity of the hardware</h2><ul>
<li>Using graphical interface rather than command line interface</li>
<li>Using device drivers (simplifies the complexity of the hardware interface)</li>
<li>Simplifying the saving and retrieving of data from memory and storage device</li>
<li>Carrying out background utilities, such as virus scanner which the user can “leave it to its own device”</li>
</ul>
<h2 id="Process-management"><a href="#Process-management" class="headerlink" title="Process management"></a>Process management</h2><blockquote>
<p><font color="#4a69bd">Program: the written code (static)</font></p>
<p><font color="#4a69bd">Process: a program that has started to be executed (dynamic)</font></p>
<ul>
<li>A program which has been placed in the memory</li>
<li>with a process control block created</li>
<li>or has at least once entered a running state</li>
</ul>
<p><strong>Process control block(PCB)</strong>: a data structure which contains all of the data needed for a process to run; this can be created in memory when data needs to be received during execution time. The PCB will store</p>
<ul>
<li>current process state (ready, running, or blocked)</li>
<li>process privileges(such as which resources is allowed to access)</li>
<li>register values (PC, MAR, MDR, and ACC)</li>
<li>process priority and any scheduling information</li>
<li>the amount of CPU time the process will need to complete</li>
<li>a process ID which allows it to be uniquely identified</li>
</ul>
<p><strong>Multitasking</strong>: allow computers to carry out more than one task(process) at a time. Each of these processes will share common hardware resources. To ensure multitasking operates correctly, scheduling is used to decide which process is carried out first.</p>
</blockquote>
<h3 id="Process-states"><a href="#Process-states" class="headerlink" title="Process states"></a><u>Process states</u></h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><ul>
<li><font color="#4a69bd">Ready: program waiting for CPU time</font><ul>
<li><font color="#4a69bd">The process is not being executed</font></li>
<li><font color="#4a69bd">The process is in the queue</font></li>
<li><font color="#4a69bd">… waiting for the processor’s attention/time slice/CPU time</font></li>
</ul>
</li>
<li><font color="#4a69bd">Blocked: program waiting for an event or Input/Output operation</font><ul>
<li><font color="#4a69bd">The process is waiting for an event</font></li>
<li><font color="#4a69bd">So it cannot be executed by the moment</font></li>
<li><font color="#4a69bd">e.g. Input/Output</font></li>
</ul>
</li>
<li><font color="#4a69bd">Running: program running on a CPU</font><ul>
<li><font color="#4a69bd">Process is being executed by the CPU</font></li>
<li><font color="#4a69bd">Process is currently using its allocated time slice</font></li>
</ul>
</li>
</ul>
<h4 id="Transition-between-states-conditions"><a href="#Transition-between-states-conditions" class="headerlink" title="Transition between states: conditions"></a>Transition between states: conditions</h4><ul>
<li><u>Ready -&gt; Running</u></li>
<li><font color="#4a69bd">Current process no longer running // processor is available</font><ul>
<li><font color="#4a69bd">Process was at the head of the ready queue // process has the highest priority</font></li>
</ul>
</li>
<li><u>Blocked -&gt; Ready</u></li>
<li><font color="#4a69bd">The only required resource become available // resource/event/IO operation is complete</font></li>
<li><u>Running -&gt; Ready</u><ul>
<li><font color="#4a69bd">When process is executing it is allocated a time slice </font></li>
<li><font color="#4a69bd">When the time slice is completed, the process can no longer use the processor even if it is capable of further processing</font></li>
</ul>
</li>
<li><u>Running -&gt; Blocked</u> </li>
<li><font color="#4a69bd">Process is executed when it needs to perform IO operation</font><ul>
<li><font color="#4a69bd">Placed in blocked state until the IO operation is complete</font></li>
</ul>
</li>
</ul>
<img src="https://s2.loli.net/2023/02/04/we6jNunIHdQ8UMf.jpg" style="zoom:50%;">

<p>The transition between the states shown in Figure 20.05 can be described as follows</p>
<ul>
<li>A new process arrives in memory and a PCB is created; it changes to the ready state.</li>
<li>A process in the ready state is given access to the CPU by the dispatcher; it changes to the running state</li>
<li>A process in the running state is halted by an interrupt; it returns to the ready state</li>
<li>A process in the running state cannot progress until some event has occurred(IO perhaps); it changes to the waiting/blocked state.</li>
<li>A process in the waiting state is notified that an event is complete; it returns to the ready state.</li>
<li>A process in the running state completes execution; it changes to the terminated state</li>
</ul>
<hr>
<p><u>Explain how the processes are affected when the following event takes place</u></p>
<ul>
<li>The running process needs to read a file from a disk<ul>
<li><font color="#4a69bd">Running process is halted</font></li>
<li><font color="#4a69bd">Process moved to blocked state</font></li>
</ul>
</li>
<li>The running process using up its time slice<ul>
<li><font color="#4a69bd">Running process is halted // another process has the use of the processor</font></li>
<li><font color="#4a69bd">Process moves to ready state</font></li>
<li><font color="#4a69bd">… until next time slice is allocated</font></li>
</ul>
</li>
</ul>
<p><u>Explain why a process cannot be moved from the blocked state to the running state</u></p>
<ul>
<li><font color="#4a69bd">When IO operation is completed for the process in blocked state</font></li>
<li><font color="#4a69bd">Process put into ready queue</font></li>
<li><font color="#4a69bd">OS determine which process get next use of the processor from the ready queue</font></li>
</ul>
<p><u>Explain why a process cannot be moved from the ready state to the blocked state</u></p>
<ul>
<li><font color="#4a69bd">To be in blocked state process must initiate some IO operation</font></li>
<li><font color="#4a69bd">To initiate operation, process must be executing</font></li>
<li><font color="#4a69bd">If process in ready state, cannot be executing; hence must in running state</font></li>
</ul>
<h3 id="Process-scheduling"><a href="#Process-scheduling" class="headerlink" title="Process scheduling"></a>Process scheduling</h3><blockquote>
<p><strong>High-level scheduler</strong> controls the selection of a program stored on disk to be moved into main memory.</p>
<ul>
<li>Decides which processes are loaded from backing store</li>
<li>Into memory/ready queue</li>
</ul>
<p><strong>Low-level scheduler</strong> controls when the program installed in the memory has access to the CPU</p>
<ul>
<li>Decide which process should next get the use of CPU time</li>
<li>Based on position/priority</li>
<li>Invoked after interrupt/OS call</li>
<li><u>Purpose</u>: <font color="#4a69bd">ensure response time is acceptable and the system remains stable at all times.</font></li>
</ul>
</blockquote>
<p>Although the high-level and low-level scheduler will have decisions to make when choosing which program should be loaded into memory, we concentrate here on the options for the <strong>low-level scheduler</strong>.</p>
<h4 id="Round-Robin"><a href="#Round-Robin" class="headerlink" title="Round Robin"></a>Round Robin</h4><h4 id="Shortest-job-first"><a href="#Shortest-job-first" class="headerlink" title="Shortest job first"></a>Shortest job first</h4><h4 id="First-come-first-serve"><a href="#First-come-first-serve" class="headerlink" title="First come first serve"></a>First come first serve</h4><h4 id="Shortest-remaining-time"><a href="#Shortest-remaining-time" class="headerlink" title="Shortest remaining time"></a>Shortest remaining time</h4><hr>
<p><u>Explain why the operating system needs to use scheduling algorithm</u></p>
<ul>
<li><font color="#4a69bd">To allow multitasking to take place</font></li>
<li><font color="#4a69bd">To ensure fair usage of the processor, peripheral, and memory</font></li>
<li><font color="#4a69bd">To ensure high priority tasks are executed sooner</font></li>
<li><font color="#4a69bd">To ensure all processes have the opportunity to finish</font></li>
<li><font color="#4a69bd">To keep CPU busy all the time</font></li>
<li><font color="#4a69bd">To service largest amount of job in a given amount of time</font></li>
<li><font color="#4a69bd">To minimize the time user must wait for their result </font></li>
</ul>
<hr>
<h3 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h3><blockquote>
<p>Central component responsible for communication between hardware, software, and memory</p>
<p>Responsible for:</p>
<ul>
<li>Process management</li>
<li>Device management</li>
<li>Memory management</li>
<li>Interrupt handling</li>
<li>Input/output file communication</li>
</ul>
</blockquote>
<h4 id="Interrupt-handling-amp-OS-kernel"><a href="#Interrupt-handling-amp-OS-kernel" class="headerlink" title="Interrupt handling &amp; OS kernel"></a>Interrupt handling &amp; OS kernel</h4><blockquote>
<p>Interrupt: signal from a hardware or software device, seeking the attention of the processor</p>
</blockquote>
<ol>
<li>The CPU will check for interrupt signals. The system will enter the kernel mode if any of the following type of interrupt signals are sent<ul>
<li>Device interrupt (printer out of paper, device not present)</li>
<li>Exceptions (instruction faults: division by zero, unidentified opcode, stack faults)</li>
<li>Traps/software interrupt (process requesting a resource such as disk drive)</li>
</ul>
</li>
<li>Kernel will consult the interrupt dispatch table(IDT) - links a device description with the proper interrupt routine</li>
<li>IDT will supply the address of the low-level routine to handle the interrupt event occurred</li>
<li>The kernel will save the state of the interrupt process on the kernel stack</li>
<li>The process state will be restored once the interrupting task is services.</li>
</ol>
<img src="https://s2.loli.net/2023/02/04/OwlzqPB5daFAY7W.jpg" style="zoom: 67%;"> 

<p><u>Describe the sequence of steps which would be carried out by the interrupt handler software when an interrupt is received and serviced</u></p>
<ul>
<li><font color="#4a69bd">Identify the source of interrupt</font></li>
<li><font color="#4a69bd">Disable all interrupts of low priority</font></li>
<li><font color="#4a69bd">Save the content of the PC</font></li>
<li><font color="#4a69bd">Save the content of other registers on the kernel stack</font></li>
<li><font color="#4a69bd">Load and run the appropriate interrupt service routine(ISR)</font></li>
<li><font color="#4a69bd">Restore registers from the stack</font></li>
<li><font color="#4a69bd">Enable all interrupts </font></li>
<li><font color="#4a69bd">Continue execution of the interrupts</font></li>
</ul>
<h2 id="Memory-management"><a href="#Memory-management" class="headerlink" title="Memory management"></a>Memory management</h2><h3 id="Paging"><a href="#Paging" class="headerlink" title="Paging:"></a><a href="https://www.geeksforgeeks.org/paging-in-operating-system/">Paging</a>:</h3><ul>
<li><p>Memory is split up into partitions of blocks of fixed size</p>
</li>
<li><p>Physical memory blocks are known as frames</p>
</li>
<li><p>Fixed-sized logical memory blocks are known as pages</p>
</li>
<li><p>A program is allocated a number of pages that is usually just larger than what was actually needed</p>
</li>
<li><p>The logical address stores the page number in the first part of address and the page offset in the remaining part of the address.</p>
<ul>
<li>Page number: number of bits required to represent the pages in Logical address space.</li>
<li>Page offset: Number of bits required to represent a particular <code>word</code> in page.<blockquote>
<p>如果一共有16个<code>pages</code>，每个page的大小是1024<code>words</code> 那么则需要address的前四个bits来表示page number, 后 10个bits 来表示page offset. 这样的话 通过address可以精准定位到某一个<code>page</code>的某一个<code>word</code>. e.g: 01010000000001代表第5个<code>page</code>的第2个<code>word</code>.</p>
</blockquote>
</li>
</ul>
</li>
<li><p><code>--</code></p>
</li>
<li><p><font color="#4a69bd">Page table: the page map table shows the mapping to pages to page frames</font></p>
</li>
<li><p><font color="#4a69bd">Page: virtual memory divided into blocks of fixed size</font></p>
</li>
<li><p><font color="#4a69bd">Page frame: the main memory is divided into page frames of same size as page</font></p>
</li>
</ul>
<p><u>How paging is used to handle virtual memory:</u></p>
<ul>
<li><font color="#4a69bd">Divide main memory/RAM into frames</font></li>
<li><font color="#4a69bd">Divide virtual memory into blocks of same size called pages</font></li>
<li><font color="#4a69bd">Frame/pages are a fixed size</font></li>
<li><font color="#4a69bd">Set up a page (map) table that translates logical to physical address</font></li>
<li><font color="#4a69bd">Keeps track of all free frames</font></li>
<li><font color="#4a69bd">Swap pages in memory with new pages from disk when needed</font></li>
</ul>
<p><u>The page frame’s address entry is 245, state what the values of 245 could represent</u></p>
<ul>
<li><font color="#4a69bd">The 245th page frame from the start of memory</font></li>
</ul>
<p><u>Process X executes until the next instruction is the first instruction in page4. Page 4 is not current main memory</u></p>
<p><u>State a hardware device that could be storing this page</u></p>
<ul>
<li><font color="#4a69bd">Flash memory // magnetic disk // hard drive</font></li>
</ul>
<h3 id="Segmentation"><a href="#Segmentation" class="headerlink" title="Segmentation"></a>Segmentation</h3><ul>
<li>Logical address space is broken up into variable-size memory blocks called segments</li>
<li>Segment can be of varying size</li>
<li>Each segment has name and size</li>
<li>During execution<ul>
<li>Segments from the logical memory are loaded into physical memory</li>
<li>Address = segment number + offset value; found in segment map table</li>
<li>Offset value decides the size of the segment</li>
</ul>
</li>
</ul>
<img src="https://s2.loli.net/2023/02/04/PI87ZLxXoGSjKsT.jpg" style="zoom:50%;">

<h3 id="Differences-between-paging-and-segmentation"><a href="#Differences-between-paging-and-segmentation" class="headerlink" title="Differences between paging and segmentation"></a>Differences between paging and segmentation</h3><table>
<thead>
<tr>
<th>Paging</th>
<th>Segmentation</th>
</tr>
</thead>
<tbody><tr>
<td>A page is a fixed-size block of memory</td>
<td>A segment is a variable-size block of memory</td>
</tr>
<tr>
<td>Since the block size is fixed, it is possible that call blocks may not be fully used - this can lead to internal fragmentation</td>
<td>Because memory blocks are a variable size, this reduces risk of internal fragmentation but increase the risk of external fragmentation.</td>
</tr>
<tr>
<td>The user provide a single value - this means that the hardware decides the actual page size</td>
<td>The user will supply the address in two values</td>
</tr>
<tr>
<td>A page table maps logical address to physical addresses(this contains the base address of each page stored in frame in physical memory space)</td>
<td>Segmentation uses a segment map table containing segment number + offset(segment size); it maps logical addresses to physical addresses</td>
</tr>
<tr>
<td>The process of paging is essentially invisible to the user/programmer</td>
<td>Segmentation is essentially a visible process to user/programmer</td>
</tr>
<tr>
<td>Procedures and any associated data cannot be separated when using paging</td>
<td>Procedures and any associated data can be separated when using segmentation</td>
</tr>
<tr>
<td>Paging consists of static link and dynamic loading</td>
<td>Segmentation consists of dynamic linking and dynamic loading</td>
</tr>
<tr>
<td>Pages are usually smaller than segments</td>
<td>Segments are usually larger than pages</td>
</tr>
</tbody></table>
<h3 id="Virtual-memory"><a href="#Virtual-memory" class="headerlink" title="Virtual memory"></a>Virtual memory</h3><ul>
<li>If the available RAM is exceeded due to multiple processes running, it is possible to corrupt the data used in some of the program being run</li>
<li>This can be solved by separately mapping each program’s virtual memory space to RAM and utilizing the hard disk drive/solid state drive if we need more memory. This is the basis behind virtual memory.</li>
<li>RAM is the physical memory and virtual memory is RAM+swap space on the hard disk</li>
<li>Virtual memory is usually implemented using ‘in demand paging’</li>
</ul>
<p><u>State what is meant by virtual memory</u></p>
<ul>
<li><font color="#4a69bd">Disk/Secondary storage is used to extend the RAM/memory available</font></li>
<li><font color="#4a69bd">… so CPU can access more memory space than available RAM</font></li>
<li><font color="#4a69bd">Only part of the program/data in use needs to be in RAM</font></li>
<li><font color="#4a69bd">Data is swapped between RAM and disk</font></li>
</ul>
<p><u>Advantages of using virtual memory</u></p>
<ul>
<li>Not all pages needs to be in memory at one time</li>
<li>More than one processes can be in ready state</li>
<li>… because memory addresses can be mapped </li>
<li>A process can have an address space larger than that of physical memory</li>
</ul>
<h3 id="Disk-thrashing"><a href="#Disk-thrashing" class="headerlink" title="Disk thrashing"></a>Disk thrashing</h3><p>The main drawback of using HDD in virtual memory is that as main memory fills, more and more data/pages need to be swapped in and out of virtual memory. This leads to high rate of hard disk read/write head movement. if <strong>more time is spent on moving pages in and out of memory than actually doing any processing</strong>, then the processing speed of the computer will be reduced. A point can be reached when the execution of a process comes to a halt since the system is so busy paging and in and out of memory; this is known as the thrash point.</p>
<ul>
<li><font color="#4a69bd">Pages are requested back into RAM as soon as they are moved to the disk</font></li>
<li><font color="#4a69bd">There is continuous swapping (of the same page)</font></li>
<li><font color="#4a69bd">No useful processing happens (deadlock)</font><ul>
<li><font color="#4a69bd">Pages that are in RAM and disk are interdependent</font></li>
<li><font color="#4a69bd">All processing times are used for swapping pages</font></li>
</ul>
</li>
</ul>
<h3 id="Page-replacement"><a href="#Page-replacement" class="headerlink" title="Page replacement"></a>Page replacement</h3><ul>
<li>Page replacement occurs when a requested page is not in memory. When paging in/out from memory, it is necessary to consider how the computer can decide which page to replace to allow the requested page to be loaded. </li>
<li>When a new page is requested but is not in memory, a page fault occurs and the OS replaces one of the existing pages with the new page. How to decide which page to replace is done in a number of different ways, but all methods have the same goal of minimizing the number of page faults. </li>
<li>A page fault is a type of interrupt raised by hardware. When a running program accesses a page that is mapped into virtual memory address space, but not yet loaded into physical memory, then the hardware needs to raise this page fault     interrupt.</li>
</ul>
<h4 id="Page-replacement-algorithms"><a href="#Page-replacement-algorithms" class="headerlink" title="Page replacement algorithms:"></a>Page replacement algorithms:</h4><ul>
<li><p><strong>First in first out (FIFO)</strong></p>
<ul>
<li>The OS keeps track of all the pages in memory using a queue structure</li>
<li>The oldest page is at the front of the queue and is the first to be removed when a new page needs to be added</li>
</ul>
</li>
<li><p>FIFO algorithms don’t consider page usage when replacing pages; a page may be replaced simply because it arrived earlier than another page</p>
</li>
<li><p>It suffers from, what is known as, Belady’s Anomaly where it is possible to have more page faults when increasing the number of page frames.</p>
</li>
<li><p><u>Additional data required:</u> <font color="#4a69bd">time of entry</font></p>
</li>
<li><p><u>Drawbacks:</u> </p>
<ul>
<li><font color="#4a69bd">Page in for lengthy period of time may be often accessed</font></li>
<li><font color="#4a69bd">… so not a good candidate to be removed</font></li>
</ul>
</li>
<li><p><strong>Optimal page replacement(OPR)</strong></p>
<ul>
<li>Optimal page replacement looks forward in time to see which frame it can replace in the event of a page fault. <ul>
<li>The algorithm is actually impossible to implement; at the time of a page fault, the OS has no way of knowing when each of the pages will be replaced next. </li>
<li>It tends to get used for comparison studies but has the advantage that it is free of Belady’s Anomaly and also has the fewest page faults.</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Least recently used page replacement (LRU)</strong></p>
<ul>
<li>With least recently used page replacement (LRU), the page which has not been used for the longest time is replaced. </li>
<li>To implement this method, it is necessary to maintain a linked list of all pages in memory with the most recently used page at the front and the least recently used page at the rear.</li>
</ul>
</li>
<li><p><strong>Least used page replacement</strong></p>
<ul>
<li><u>Additional data required</u>: <font color="#4a69bd">Number of times the page has been accessed</font></li>
<li><u>Drawbacks</u>:<ul>
<li><font color="#4a69bd">A page just entered has a low least-used value</font></li>
<li><font color="#4a69bd">… so likely to be a candidate for immediately being swapped out</font></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Clock page replacement/second-change page replacement</strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
        <category>ALCS</category>
      </categories>
  </entry>
  <entry>
    <title>Chapter 16.2: Translation Software</title>
    <url>/Notes/ALCS/Chapter16.2_TranslationSoftware/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/02/04/pWFCrNxiEGA7o58.png"></p>
<hr>
<span id="more"></span>

<h2 id="Interpreter"><a href="#Interpreter" class="headerlink" title="Interpreter"></a>Interpreter</h2><img src="https://s2.loli.net/2023/02/04/dmIN46Z5gYBc8f3.jpg" style="zoom:50%;">

<p><u>How an interpreter can executes the program without producing a complete translated version</u></p>
<ul>
<li><font color="#4a69bd">An interpreter examines source code one statement at a time</font></li>
<li><font color="#4a69bd">Check each statement for errors</font></li>
<li><font color="#4a69bd">If no error is found, the statement is executed</font></li>
<li><font color="#4a69bd">If an error is found, this is reported and the interpreter halts</font></li>
<li><font color="#4a69bd">Interpretation is repeated for every iteration in repeated section of code/ in loops</font></li>
<li><font color="#4a69bd">Interpretation repeats every time the program runs</font></li>
</ul>
<p><u>Why debug with interpreter</u></p>
<ul>
<li><font color="#4a69bd">Debugging is faster</font></li>
<li><font color="#4a69bd">Can debug incomplete code</font></li>
<li><font color="#4a69bd">Better diagnostics</font></li>
</ul>
<h2 id="Compiler"><a href="#Compiler" class="headerlink" title="Compiler"></a>Compiler</h2><img src="https://s2.loli.net/2023/02/04/VcHKBrT5tW7oPpJ.jpg" style="zoom: 33%;">

<h3 id="Compilation-stages"><a href="#Compilation-stages" class="headerlink" title="Compilation stages"></a>Compilation stages</h3><h4 id="Lexical-analysis"><a href="#Lexical-analysis" class="headerlink" title="Lexical analysis"></a>Lexical analysis</h4><ul>
<li><p>All necessary characters not required by the compiler, such as the white space and comments, are removed</p>
</li>
<li><p><font color="#4a69bd">The white space removed // redundant characters are removed // removal of comments // identification of errors</font></p>
</li>
<li><p>Tokenization</p>
<ul>
<li>Using a keyword table that contains all the tokens for reserved keywords and symbols</li>
<li>Convert the source program into tokens</li>
<li><u>Keyword table</u><ul>
<li><font color="#4a69bd">The reserved keyword used</font></li>
<li><font color="#4a69bd">The operator used</font></li>
<li><font color="#4a69bd">Their matching token</font><img src="https://s2.loli.net/2023/02/04/kBLovRiP2xjrVUQ.png" align="middle" style="zoom:50%;"></li>
</ul>
</li>
</ul>
</li>
<li><p>Variables, constants, and identifiers added to a symbol table, and are then converted into locations/address</p>
<ul>
<li><u>Symbol table</u><ul>
<li><font color="#4a69bd">Identifier name used </font></li>
<li><font color="#4a69bd">The data type </font></li>
<li><font color="#4a69bd">Role: e.g. Constant, array, procedure</font></li>
<li><font color="#4a69bd">Location marker, value of constant</font></li>
</ul>
</li>
</ul>
</li>
</ul>
<img src="https://s2.loli.net/2023/02/04/bBwLu5mQa6SIAZP.png" style="zoom:50%;">

<p><u>Explain how the keyword table and symbol table are used to translate the source code program</u></p>
<ul>
<li><font color="#4a69bd">Keywords are looked up in the keyword table</font></li>
<li><font color="#4a69bd">They are represented by tokens</font></li>
<li><font color="#4a69bd">Identifiers are looked up in the symbol table</font></li>
<li><font color="#4a69bd">They are converted into location/address</font></li>
<li><font color="#4a69bd">Used to create a sequence of tokens (for the program)</font></li>
</ul>
<h4 id="Syntax-analysis"><a href="#Syntax-analysis" class="headerlink" title="Syntax analysis"></a>Syntax analysis</h4><ul>
<li>Output from the lexical analysis is checked for grammatical/syntax errors - <code>parsing</code></li>
<li>The rules for <code>parsing</code> can be set out in Backus-Naur form(BNF) notation</li>
<li>If errors are found: each statement and the associated error is outputted, but the next stage, code generation, will not be attempted</li>
<li>If no error is found: passed to the next stage of compilation</li>
<li><code>--</code></li>
<li><font color="#4a69bd">Construction of a parse tree / parsing</font></li>
<li><font color="#4a69bd">Checking that the rules of grammar/syntax have been obeyed</font></li>
<li><font color="#4a69bd">Production of an error report</font></li>
</ul>
<h4 id="Code-generation"><a href="#Code-generation" class="headerlink" title="Code generation"></a>Code generation</h4><ul>
<li>Produces an object program to perform the task defined in the source code</li>
<li>The object program is in machine-readable form(binary):<ul>
<li>Either in machine code that can be directly executed by the CPU</li>
<li>Or in intermediate code that is converted into machine code when the program is loaded</li>
</ul>
</li>
</ul>
<h4 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h4><ul>
<li>Performing the task using the <u>minimum amount of resources</u><ul>
<li><font color="#4a69bd">Execution time, storage space, memory, and CPU use.</font></li>
</ul>
</li>
<li><img src="https://s2.loli.net/2023/02/04/NidOkPSKUlBqu9G.jpg" style="zoom: 33%;"></li>
</ul>
<p><u>Why code is optimized:</u></p>
<ul>
<li><font color="#4a69bd">Redundant code removed</font></li>
<li><font color="#4a69bd">Program requires less memory</font></li>
<li><font color="#4a69bd">Code reorganized to make it more efficient</font></li>
<li><font color="#4a69bd">Program will complete task in a shorter time</font></li>
</ul>
<p><u>Why optimization is necessary</u></p>
<ul>
<li><font color="#4a69bd">Optimisation means the code would have fewer instructions</font></li>
<li><font color="#4a69bd">Optimised code occupies less memory in space</font></li>
<li><font color="#4a69bd">Fewer instructions reduce the execution time of the program</font></li>
</ul>
<p><u>Benefits</u></p>
<ul>
<li><font color="#4a69bd">Code has fewer instructions/occupies less memory in space</font></li>
<li><font color="#4a69bd">Shortens the execution time for the program // time taken to execute whole program decreases</font></li>
</ul>
<h3 id="Past-paper-questions"><a href="#Past-paper-questions" class="headerlink" title="Past-paper questions"></a>Past-paper questions</h3><img src="https://s2.loli.net/2023/02/04/d5QYvJNOzU3P4pb.png" style="zoom: 67%;">

<ul>
<li><font color="#4a69bd">Remove the second instances of LDD 436 // remove line 04</font></li>
<li><font color="#4a69bd">Remove the second instance s of ADD 437 // remove line 05</font></li>
<li><font color="#4a69bd">The value required is already stored in the accumulator</font></li>
</ul>
<hr>
<p><u>Why compiled version helps protect the security of the source code</u></p>
<ul>
<li><font color="#4a69bd">Compiler produces executable version - not readable</font></li>
<li><font color="#4a69bd">Difficult for reverse engineering</font></li>
</ul>
<hr>
<img src="https://s2.loli.net/2023/02/04/2FNwQOaeYXgSB9W.png" style="zoom: 67%;">

<hr>
<h2 id="BNF-amp-Syntax-diagram"><a href="#BNF-amp-Syntax-diagram" class="headerlink" title="BNF &amp; Syntax diagram"></a>BNF &amp; Syntax diagram</h2><h3 id="Past-paper-questions-1"><a href="#Past-paper-questions-1" class="headerlink" title="Past-paper questions"></a>Past-paper questions</h3><p>1. </p>
<img src="https://s2.loli.net/2023/02/04/orEXZHNLBADYtxw.png" style="zoom: 80%;">

<p><img src="https://s2.loli.net/2023/02/04/xHaFw3QtWZrp8In.png"></p>
<hr>
<p>2. </p>
<p><img src="F:\hexocode\source_posts\Chapter16.2_TranslationSoftware\ppq3.1.png"></p>
<img src="https://s2.loli.net/2023/02/04/RUeWxc89twkr3ol.png" style="zoom: 67%;">

<hr>
<p>3. </p>
<p><img src="https://s2.loli.net/2023/02/04/KByiIpXDbMwLTr5.png"></p>
<p><img src="https://s2.loli.net/2023/02/04/o6bXPdlVpviBkKE.png"></p>
<hr>
<h2 id="Reverse-Polish-notation"><a href="#Reverse-Polish-notation" class="headerlink" title="Reverse Polish notation"></a>Reverse Polish notation</h2><blockquote>
<p>Infix notation: operators are in between their operands</p>
<p>Postfix notation / Reverse Polish notation: Operators are written after operands</p>
<p>Prefix notation / Polish notation: operators are written before operands</p>
</blockquote>
<p><span class="github-emoji"><span>🔗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f517.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>:<a href="https://www.cs.man.ac.uk/~pjj/cs212/fix.html">Understanding infix, postfix, and prefix - lecture note from university of manchester</a></p>
<hr>
<p><u>Why RPN can be used to evaluate expressions:</u></p>
<ul>
<li><font color="#4a69bd">Reverse polish notation provides and unambiguous method of representing an expression</font></li>
<li><font color="#4a69bd">Reading from left to right</font></li>
<li><font color="#4a69bd">Without need to use bracket</font></li>
<li><font color="#4a69bd">With no need for rules of precedence</font></li>
</ul>
<p><u>Explain how RPN is used by an interpreter to evaluate expression:</u></p>
<ul>
<li><font color="#4a69bd">Expressions are always evaluated from left to right</font></li>
<li><font color="#4a69bd">Each operator uses two previous values on the stack</font></li>
<li><font color="#4a69bd">Pushing and popping identifiers on a stack</font></li>
</ul>
<p><u>Data structure to evaluate an expression in RPN</u></p>
<ul>
<li><font color="#4a69bd">Stack</font><ul>
<li><font color="#4a69bd">The operands are popped from the stack in reverse order to how they were pushed</font></li>
</ul>
</li>
<li><font color="#4a69bd">Binary tree</font><ul>
<li><font color="#4a69bd">Allows both infix and postfix to be evaluated (tree traversal)</font></li>
</ul>
</li>
</ul>
<p><u>Describe the main steps in the evaluation of a Reverse Polish Notation(RPN) expression using a stack</u></p>
<ul>
<li><font color="#4a69bd">Working from left to right in the expression</font></li>
<li><font color="#4a69bd">If element is a number, push that number into stack</font></li>
<li><font color="#4a69bd">If element is an operator, then pop the first two numbers on the stack</font></li>
<li><font color="#4a69bd">… perform that operations on these two numbers</font></li>
<li><font color="#4a69bd">PUSH result back into stack</font></li>
<li><font color="#4a69bd">END once the last item in the expression has been dealt with</font></li>
</ul>
<p><u>One advantage of the use of RPN is that evaluation of expressions does not require rules of precedence; Explain this statement</u></p>
<ul>
<li><font color="#4a69bd">Rules of precedence means different operators have different priorities; for example multiplication is done before addition</font></li>
<li><font color="#4a69bd">In RPN, evaluation of expression is from left to right // operator are used in the sequence in which they were read</font></li>
<li><font color="#4a69bd">No need for brackets // infix may require brackets</font></li>
</ul>
<p><u>Write the Reverse Polish Notation for the following expressions</u></p>
<ol>
<li><p>(A+B)*(C-D)</p>
<ul>
<li><font color="#4a69bd">AB+</font></li>
<li><font color="#4a69bd">CD-*</font></li>
</ul>
<p>Full answer: AB+CD-*</p>
</li>
<li><p>((-A/B)*4)/(C-D)</p>
<ul>
<li><font color="#4a69bd">A-</font></li>
<li><font color="#4a69bd">B/4*</font></li>
<li><font color="#4a69bd">CD-/</font></li>
</ul>
<p>Full answer: A-B/4*CD-/</p>
</li>
</ol>
<h3 id="Evaluation-of-RPN"><a href="#Evaluation-of-RPN" class="headerlink" title="Evaluation of RPN"></a>Evaluation of RPN</h3><p><img src="/./Chapter16.2_TranslationSoftware/rpneva.jpg"></p>
<p><span class="github-emoji"><span>🔗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f517.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://www.includehelp.com/c/infix-to-postfix-conversion-using-stack-with-c-program.aspx">Infix To Postfix Conversion Using Stack</a></p>
]]></content>
      <categories>
        <category>Notes</category>
        <category>ALCS</category>
      </categories>
  </entry>
  <entry>
    <title>Chapter 17: Security</title>
    <url>/Notes/ALCS/Chapter17_Security/</url>
    <content><![CDATA[<img src="https://s2.loli.net/2023/02/04/Dk1cIB5wZoJVWCA.png" style="zoom:60%;">

<hr>
<span id="more"></span>
<h2 id="Encryption"><a href="#Encryption" class="headerlink" title="Encryption"></a>Encryption</h2><blockquote>
<ul>
<li><font color="#4a69bd">Plain text: the original data to be transmitted as a message</font></li>
<li><font color="#4a69bd">Cipher text: the result of encryption that is transmitted to the recipient</font></li>
<li><font color="#4a69bd">Digital certificate: An electronic document from a trusted authority that ensures authentication</font></li>
<li><font color="#4a69bd">Public key: An encryption method produced by a trusted authority that can be used by anyone</font><ul>
<li><font color="#4a69bd">Key widely available that can be used to encrypt message that only owner of the private key can decrypt</font></li>
<li><font color="#4a69bd">Can be used to decrypt a digital signature, thereby confirming the originator of the message </font></li>
</ul>
</li>
<li><font color="#4a69bd">Private key - Key needed to decrypt data that has been encrypted by a public key</font><ul>
<li><font color="#4a69bd">Key needed to encrypt data so that it can be decrypted by a public key</font></li>
<li><font color="#4a69bd">The key used to asymmetric encryption which is not shared</font></li>
</ul>
</li>
<li><font color="#4a69bd">Encryption: Process of turning plain text into cipher text</font></li>
</ul>
</blockquote>
<h3 id="Main-Security-concerns-1"><a href="#Main-Security-concerns-1" class="headerlink" title="Main Security concerns:[^1]"></a>Main Security concerns:[^1]</h3><ol>
<li><p><strong>Confidentiality</strong> is where only the intended recipient should be able to read or decipher the data; the communication must ensure no interception.</p>
</li>
<li><p><strong>Authenticity</strong> is the need to identify who sent the data and verify that the source is legitimate/genuine.</p>
</li>
<li><p><strong>Integrity</strong> is that data should reach its destination without any changes.</p>
</li>
<li><p><strong>Non-repudiation</strong> is that neither the sender nor the recipient should be able to deny that they were part of the data     transmission which just took place. </p>
</li>
<li><p><strong>Availability</strong>: Nothing should happen to prevent the receiver from receiving the transmission</p>
<p>[^1]: These five words appears constantly in mark schemes; so just write about them if you have no idea about the question</p>
</li>
</ol>
<h3 id="Asymmetric-key-cryptography"><a href="#Asymmetric-key-cryptography" class="headerlink" title="Asymmetric key cryptography"></a>Asymmetric key cryptography</h3><blockquote>
<p>Encryption that uses public keys and private keys</p>
</blockquote>
<ul>
<li><font color="#4a69bd">Asymmetric encryption uses a matching pair of keys</font></li>
<li><font color="#4a69bd">A public key (available to everyone)</font><ul>
<li><font color="#4a69bd">Receiver’s public key used to encrypting the message before it is sent</font></li>
</ul>
</li>
<li><font color="#4a69bd">A private key (only known to the owner of the key)</font><ul>
<li><font color="#4a69bd">Receiver’s private key to decrypt the message after it has been received </font></li>
</ul>
</li>
</ul>
<h4 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits:"></a><u>Benefits</u>:</h4><ul>
<li><font color="#4a69bd">Increased message security as one key is private</font></li>
<li><font color="#4a69bd">Allow message authentication</font></li>
<li><font color="#4a69bd">Allows non-repudiation</font></li>
<li><font color="#4a69bd">Detects tampering(篡改)</font></li>
</ul>
<h3 id="Symmetric-key-cryptography"><a href="#Symmetric-key-cryptography" class="headerlink" title="Symmetric key cryptography"></a>Symmetric key cryptography</h3><blockquote>
<p><font color="#4a69bd">A single key is used for both encryption and decryption</font></p>
</blockquote>
<h4 id="Drawbacks"><a href="#Drawbacks" class="headerlink" title="Drawbacks:"></a><u>Drawbacks</u>:</h4><ul>
<li><font color="#4a69bd">Key has to be exchanged securely</font></li>
<li><font color="#4a69bd">Once, compromised, the key can be used to decrypt both sent and received messages</font></li>
<li><font color="#4a69bd">Cannot ensure non-repudiation</font></li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>Public key &amp; Private key</th>
</tr>
</thead>
<tbody><tr>
<td><u><strong>Similarity</strong></u></td>
<td><font color="#4a69bd">- Both used in asymmetric encryption </font><br>  <font color="#4a69bd">   - As a pair of key is required</font><br>   <font color="#4a69bd">- One is used to encrypt the data and the other is used to decrypt the data</font><br><font color="#4a69bd">- Both hashing algorithms</font></td>
</tr>
<tr>
<td><u><strong>Difference</strong></u></td>
<td><font color="#4a69bd">- Private key is only known to the owner of the key pair <br>     - The public key can be distributed to anyone<br> - When message is sent to the owner of the public key, they are encrypted with the public key<br>     - So they could be only decrypted with owner’s private key<br> - Message digest are encrypted with the private key to form a digital signature<br>     - Messages are encrypted with the public key of the receiver </font></td>
</tr>
</tbody></table>
<h3 id="Quantum-Cryptography-x2F-Quantum-key-distribution-QKD"><a href="#Quantum-Cryptography-x2F-Quantum-key-distribution-QKD" class="headerlink" title="Quantum Cryptography/ Quantum key distribution(QKD)"></a>Quantum Cryptography/ Quantum key distribution(QKD)</h3><h4 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a><u>Purpose</u></h4><ul>
<li><font color="#4a69bd">Use quantum mechanics to facilitate the secure transmission of encryption keys</font></li>
</ul>
<h4 id="Benefits-1"><a href="#Benefits-1" class="headerlink" title="Benefits:"></a><u>Benefits</u>:</h4><ul>
<li><font color="#4a69bd">Any eavesdropping can be identified</font></li>
<li><font color="#4a69bd">Integrity of the key once transferred can be guaranteed; cannot copied or decrypt at a later date</font></li>
<li><font color="#4a69bd">Longer/more secure keys can be exchanged</font></li>
</ul>
<h4 id="Drawbacks-1"><a href="#Drawbacks-1" class="headerlink" title="Drawbacks:"></a>Drawbacks:</h4><ul>
<li>It requires a dedicated line and a specialist hardware, which can be expensive to implement initially</li>
<li>It still has a limited range</li>
<li>It is possible for polarisation of light to be altered while travelling down fibre obtic cables</li>
<li>Due to the inherent security system generated by quantum cryptography, terrorists and other criminals can use the technology to hide their activities from government law enforces</li>
</ul>
<h3 id="Past-paper-questions"><a href="#Past-paper-questions" class="headerlink" title="Past paper questions"></a>Past paper questions</h3><ol>
<li></li>
</ol>
<p><img src="https://s2.loli.net/2023/02/04/7iIkt4yK5mx8E9Y.png"></p>
<h2 id="Secure-socket-layer-SSL-and-Transport-layer-security-TLS"><a href="#Secure-socket-layer-SSL-and-Transport-layer-security-TLS" class="headerlink" title="Secure socket layer(SSL) and Transport layer security(TLS)"></a>Secure socket layer(SSL) and Transport layer security(TLS)</h2><h3 id="Purpose-1"><a href="#Purpose-1" class="headerlink" title="Purpose:"></a><u>Purpose</u>:</h3><ul>
<li><font color="#4a69bd">The SSL &amp; TLS provide communication security over the internet/network</font></li>
<li><font color="#4a69bd">… they provide encryption</font></li>
<li><font color="#4a69bd">They enable two parties to identify and authenticate each other</font></li>
<li><font color="#4a69bd">… and communicate with confidentiality and integrity</font></li>
</ul>
<p><u>Situations where the use of SSL/TLS would be appropriate:</u></p>
<ul>
<li><font color="#4a69bd">Online banking and all online financial transactions</font></li>
<li><font color="#4a69bd">Online shopping/commerce</font></li>
<li><font color="#4a69bd">Sending software to a restricted list of users</font></li>
<li><font color="#4a69bd">Sending and receiving emails</font></li>
<li><font color="#4a69bd">Using cloud storage facilities</font></li>
<li><font color="#4a69bd">Intranet, extranet, and internet</font></li>
<li><font color="#4a69bd">Using virtual private networks (VPNs)</font></li>
<li><font color="#4a69bd">Using Voice over Internet Protocol (VOIP) for video and audio chatting over the internet</font></li>
<li><font color="#4a69bd">Using instant messaging</font></li>
<li><font color="#4a69bd">Making use of a social networking site</font></li>
</ul>
<p><u>Difference between SSL and TLS</u></p>
<ul>
<li><font color="#4a69bd">It is possible to extend TLS by adding new authentication methods</font></li>
<li><font color="#4a69bd">TLS can make use of session caching which improves the overall performance of computer compared to using SSL</font></li>
<li><font color="#4a69bd">TLS separate handshaking process from record protocol layer</font></li>
</ul>
<h3 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h3><ul>
<li>Encrypts the data when the user logs onto a website<ul>
<li>Only the client’s computer and the web server are able to make sense of what is being transmitted</li>
</ul>
</li>
<li>Data compression: reducing the amount of data being transmitted</li>
<li>Data integrity checks</li>
</ul>
<h3 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h3><ol>
<li><strong>Record layer</strong> can be used with or without encryption; it contains the data being transmitted over the internet</li>
<li><strong>Handshake protocol</strong> permits the web server and client to authenticate each other and to make use of encryption algorithms (a secure session between the client and server is then established)<ul>
<li>Cipher suite</li>
</ul>
</li>
<li><strong>Session caching</strong> avoids the need to utilize computer time during each TLS connection; TLS can either initiate new session or resume existing session; the latter can save considerable computer time</li>
</ol>
<ul>
<li><font color="#4a69bd">A protocol with two layers</font><ul>
<li><font color="#4a69bd">Handshake and Record layers</font></li>
</ul>
</li>
<li><font color="#4a69bd">A TLS/digital/public key certificate is used for authentication</font></li>
<li><font color="#4a69bd">Handshake uses asymmetric cryptography</font><ul>
<li><font color="#4a69bd">To generate agreed paramters</font></li>
<li><font color="#4a69bd">Establish a shared session key</font></li>
</ul>
</li>
<li><font color="#4a69bd">The shared session key provides symmetric cryptography for sending a receiving data(record layer)</font> </li>
<li><font color="#4a69bd">At the end of the session, all the paramters, keys, etc. are erased</font></li>
</ul>
<p><u>Situations where the use of TLS would be appropriate:</u></p>
<ul>
<li><font color="#4a69bd">Browser accessing secure websites. eg: bank transaction</font></li>
<li><font color="#4a69bd">VPNs - Virtual private networks </font></li>
<li><font color="#4a69bd">VOIP - Voice over Internet Protocols </font></li>
<li><font color="#4a69bd">Email</font></li>
</ul>
<p><u>Describe the type of activity where SSL or TLS would be used</u></p>
<ul>
<li>A client</li>
<li>… is accessing a website</li>
<li>… and needs to communicate with the website</li>
<li>… without the possibility that the communication being intercepted or scrutinized by an unauthorized party</li>
<li>… because sensitive data is being transferred</li>
</ul>
<h3 id="Past-paper-questions-1"><a href="#Past-paper-questions-1" class="headerlink" title="Past paper questions"></a>Past paper questions</h3><p>1. </p>
<p><u>Problems that SSL/TLS helps to overcome:</u></p>
<ul>
<li><font color="#4a69bd">Security: alteration of transmitted message</font></li>
<li><font color="#4a69bd">Privacy: only intended receiver can view data</font></li>
<li><font color="#4a69bd">Authentication: trust in other party</font></li>
</ul>
<ol start="2">
<li></li>
</ol>
<p><u>Security parameters agreed during the handshake process:</u></p>
<ul>
<li><font color="#4a69bd">Which protocol will be used </font><ul>
<li><font color="#4a69bd">There are a number of different versions of the two protocol</font></li>
</ul>
</li>
<li><font color="#4a69bd">Session ID</font><ul>
<li><font color="#4a69bd">Uniquely identifies a related series of message between the client and server</font></li>
</ul>
</li>
<li><font color="#4a69bd">Session type</font><ul>
<li><font color="#4a69bd">Reusable or not</font></li>
</ul>
</li>
<li><font color="#4a69bd">Encryption method</font><ul>
<li><font color="#4a69bd">public/private key to be used</font></li>
</ul>
</li>
<li><font color="#4a69bd">Authentication method</font><ul>
<li><font color="#4a69bd">Use of digital certificates</font></li>
</ul>
</li>
<li><font color="#4a69bd">Compression</font><ul>
<li><font color="#4a69bd">… methods to be used</font></li>
</ul>
</li>
</ul>
<p>3. </p>
<p><u>Explain how SSL/TLS protocols are used when a client-server communication is initiated.</u></p>
<ul>
<li><font color="#4a69bd">An SSL/TLS connection is initiated by an application</font></li>
<li><font color="#4a69bd">… which becomes the client</font></li>
<li><font color="#4a69bd">The application which receives the connection becomes the server</font></li>
<li><font color="#4a69bd">Every new session begins with a handshake (as defined in the SSL/TLS protocols)</font></li>
<li><font color="#4a69bd">The client requests the digital certificate from the server // The server sends the digital certificate to the client</font></li>
<li><font color="#4a69bd">The client verifies the server’s digital certificate </font></li>
<li><font color="#4a69bd">And the obtains the server’s public key</font></li>
<li><font color="#4a69bd">The encryption algorithms are agreed</font></li>
<li><font color="#4a69bd">The symmetric </font></li>
<li><font color="#4a69bd">… session keys are generated </font></li>
</ul>
<p>4. </p>
<p><u>The sequence of steps describes what happens when setting up a secure connection using Secure Socket Layer (SSL)</u>[^2]</p>
<ul>
<li><font color="#4a69bd">Browser requests that the server identifies itself </font></li>
<li><font color="#4a69bd">Server sends a copy of its SSL Certificate and its public key</font></li>
<li><font color="#4a69bd">Browser checks the certificate against a list of trusted certificate authorities</font></li>
<li><font color="#4a69bd">If the browser trusts the certificate, it creates, encrypts and sends the server a symmetric session key using a server’s public key</font></li>
<li><font color="#4a69bd">Server decrypts the symmetric session key using its private key</font></li>
<li><font color="#4a69bd">Server sends the browser an acknowledgment, encrypted with the session key. </font></li>
<li><font color="#4a69bd">Server and browser now encrypt all transmitted data with the session key</font></li>
</ul>
<p>[^2]: Q4 is a more detailed version of Q3</p>
<h2 id="Digital-certification-page-with-curl"><a href="#Digital-certification-page-with-curl" class="headerlink" title="Digital certification:page_with_curl:"></a>Digital certification<span class="github-emoji"><span>📃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h2><h3 id="Digital-certificate"><a href="#Digital-certificate" class="headerlink" title="Digital certificate"></a>Digital certificate</h3><blockquote>
<p>An electrical document used to prove the identity of a website or individual. It contains a public key and information identifying the website owner or individual, issued by a <strong>Certificate Authority (CA)</strong></p>
</blockquote>
<p><u><strong>Contains:</strong></u></p>
<ul>
<li><p><font color="#4a69bd">Serial number</font></p>
</li>
<li><p><font color="#4a69bd">Hashing algorithm</font></p>
<ul>
<li><font color="#4a69bd">To produce the message digest</font></li>
</ul>
</li>
<li><p><font color="#4a69bd">Public key</font></p>
<ul>
<li><font color="#4a69bd">To decrypt/encrypt data</font></li>
</ul>
</li>
<li><p><font color="#4a69bd">Dates valid</font></p>
</li>
<li><p><font color="#4a69bd">Name of organization</font></p>
</li>
<li><p><font color="#4a69bd">Signature to verify it came from the issuers</font></p>
</li>
<li><p><font color="#4a69bd">Name of issuer</font></p>
</li>
<li><p><font color="#4a69bd">Purpose of the public key</font></p>
</li>
<li><p><font color="#4a69bd">Thumb print/finger print algorithm</font></p>
<blockquote>
<p> This is the hash function used to produce a message digest</p>
</blockquote>
</li>
<li><p><font color="#4a69bd">CA digital certificate </font></p>
</li>
</ul>
<p><u>Explain how asymmetric encryption uses the content of the digital certificate to ensure that the message has not been altered during transmission</u></p>
<ul>
<li><font color="#4a69bd">A’s message is encrypted using B’s public key</font></li>
<li><font color="#4a69bd">A’s hashing algorithm is used on the message to produce the message digest</font></li>
<li><font color="#4a69bd">The message digest is then encrypted with A’s private key to provide a digital signature</font></li>
<li><font color="#4a69bd">Both the encrypted message and the digital signature is sent</font></li>
<li><font color="#4a69bd">The message is decrypted with B’s private key</font></li>
<li><font color="#4a69bd">A’s digital signature is decrypted with A’s public key to obtain the message digest</font></li>
<li><font color="#4a69bd">A’s hashing algorithm recreates the message digest from the decrypted message</font></li>
<li><font color="#4a69bd">The two message digests are compared, if they are the same then the message should be authentic / has not been tampered. </font></li>
</ul>
<img src="https://s2.loli.net/2023/02/04/TGyKMZNmQavuLBW.jpg" style="zoom:50%;">

<p>​                                 <img src="https://s2.loli.net/2023/02/04/apqz7QXelhR4n5x.jpg" style="zoom:45%;"></p>
<hr>
<p><u>Explain the process organisation follows to obtain digital certificate</u></p>
<ul>
<li><font color="#4a69bd">Appied to an issuing Certificate Authority (CA)</font><ul>
<li><font color="#4a69bd">With some proof of identity</font></li>
<li><font color="#4a69bd">Eg: name of organisation, address of organization</font></li>
<li><font color="#4a69bd">So their identity can be checked by the organisational registration authority</font></li>
<li><font color="#4a69bd">So that the digital certificate will only be issued to a trusted organization</font></li>
</ul>
</li>
</ul>
<h3 id="Digital-signature-black-nib"><a href="#Digital-signature-black-nib" class="headerlink" title="Digital signature:black_nib:"></a>Digital signature<span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><blockquote>
<p>Electronic way of validating the authenticity of digital documents; that is, making sure they have not been tampered with during transmission and also proof that a document was sent by a known user</p>
</blockquote>
<h4 id="Purpose-2"><a href="#Purpose-2" class="headerlink" title="Purpose:"></a><u>Purpose:</u></h4><ul>
<li><font color="#4a69bd">To ensure a document is authentic // came from a trusted source</font></li>
<li><font color="#4a69bd">To ensure a document has not benn altered during transmission</font></li>
<li><font color="#4a69bd">Non-repudiation</font></li>
</ul>
<table>
<thead>
<tr>
<th align="center"></th>
<th>Digital certificate &amp; digital signature</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Similarities:</strong></td>
<td>Both used for authentication <br>Both are unique to the owner/subject  <br>Include / use owner’s public key   <br>Include / make use of hashing algorithm</td>
</tr>
<tr>
<td align="center"><strong>Differences:</strong></td>
<td>Certificate obtained from issuing authority  <br>Signature created from a message   <br>Certificate provides authentication of owner  <br>Signature used to authenticate message that are sent by the owner  <br>Certificate remains unchanged whilst it is valid <br>New signature created for every message  <br>Only certificate provide extra information  <br>Only signature make use of a private key</td>
</tr>
</tbody></table>
<h3 id="Past-paper-questions-2"><a href="#Past-paper-questions-2" class="headerlink" title="Past paper questions"></a>Past paper questions</h3><p>1. </p>
<p><u>Give two uses where the encrypted message digest is advisable:</u></p>
<ul>
<li><font color="#4a69bd">Financial transaction</font></li>
<li><font color="#4a69bd">Legal document</font></li>
<li><font color="#4a69bd">Software distribution</font></li>
</ul>
<ol start="2">
<li></li>
</ol>
<p>A user downloads software from the internet.</p>
<p><u>State what should be part of the download to provide proof that the software is authentic</u></p>
<ul>
<li><font color="#4a69bd">Digital signature</font></li>
</ul>
<p><u>Describe the process for ensuring that the software is both authentic and has not been altered</u></p>
<ul>
<li><p><font color="#4a69bd">Software is put through a hashing algorithm to produce a digest</font></p>
</li>
<li><p><font color="#4a69bd">The digest is encrypted using the private key to produce a digital signature</font></p>
</li>
<li><p><font color="#4a69bd">The software is sent along with the digital signature</font></p>
</li>
<li><p><font color="#4a69bd">The receiver is in possession of the sender’s public key</font></p>
</li>
<li><p><font color="#4a69bd">The received digital signature is decrypted with sender’s public key to produce the digest</font></p>
</li>
<li><p><font color="#4a69bd">The received software is hashed to produce another digest</font></p>
</li>
<li><p><font color="#4a69bd">Compare if the two digests are equal</font></p>
</li>
<li><p><font color="#4a69bd">If so, then the software is authentic and has not been altered</font></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
        <category>ALCS</category>
      </categories>
      <tags>
        <tag>Cryptography</tag>
        <tag>SSL/TLS</tag>
        <tag>Digital Certification</tag>
      </tags>
  </entry>
  <entry>
    <title>Chapter 19.1: Algorithms</title>
    <url>/Notes/ALCS/Chapter19.1_Algorithms/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/02/04/kfwY1abMi7pzUVX.png"></p>
<hr>
<span id="more"></span> 

<h2 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h2><h3 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite:"></a>Prerequisite:</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span>[] mylist1= {<span class="number">12</span>,<span class="number">45</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">7</span>,<span class="number">39</span>,<span class="number">88</span>};</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span>[] mylist2= {<span class="number">7</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">39</span>,<span class="number">45</span>,<span class="number">88</span>};</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Linear-search"><a href="#Linear-search" class="headerlink" title="Linear search"></a>Linear search</h3><ul>
<li><input checked="" disabled="" type="checkbox"> 9618 s21 41 Q2</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">linearSearch</span><span class="params">(<span class="type">int</span> item)</span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;mylist1.length;++i){<span class="comment">//从头开始一个一个看数组里的`element`是否是正在找的`item`</span></span><br><span class="line">        <span class="keyword">if</span>(item==mylist1[i]){<span class="comment">//如果相等</span></span><br><span class="line">            <span class="keyword">return</span> i;<span class="comment">//返回当前index</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"item not found"</span>);<span class="comment">//如果找到最后了都没找到 则打印"item not found"</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//终止程序并返回一个不是index的数字</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">FUNCTION LinearSearch(item:INTEGER, arr: ARRAY[1:10] OF INTEGER) RETURNS INTEGER</span><br><span class="line">	FOR i &lt;- 1 TO 10 </span><br><span class="line">		IF arr[i] = item</span><br><span class="line">			THEN</span><br><span class="line">				OUTPUT "Item found"</span><br><span class="line">				RETURN i</span><br><span class="line">		ENDIF</span><br><span class="line">	NEXT i</span><br><span class="line">	OUTPUT "Item not found"</span><br><span class="line">	RETURN -1</span><br><span class="line">ENDFUNCTION	</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Binary-search"><a href="#Binary-search" class="headerlink" title="Binary search"></a>Binary search</h3><blockquote>
<p>二分查找 可以用递归Recursion实现 也可以用循环iteration实现</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> item)</span>{<span class="comment">//the item to be searched</span></span><br><span class="line">    <span class="type">int</span> lwb=<span class="number">0</span>,upb=<span class="number">7</span>;<span class="comment">//lowerbound和upperbound的初始化</span></span><br><span class="line">    <span class="type">int</span> mid;</span><br><span class="line">    Boolean found=<span class="literal">false</span>;<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">while</span>(!found &amp;&amp; lwb&lt;=upb){<span class="comment">//还没找到且范围正常</span></span><br><span class="line">        mid=(lwb+upb)/<span class="number">2</span>;<span class="comment">//算出区间中值 然后对比区间中间的element和寻找的element的大小</span></span><br><span class="line">        <span class="keyword">if</span>(mylist2[mid]==item){<span class="comment">//如果刚好找到 则fouund=true, 终止循环</span></span><br><span class="line">            found=<span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mylist2[mid]&lt;item){<span class="comment">//如果要找的item比区间中值大 则lwb变成mid+1</span></span><br><span class="line">            lwb=mid+<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            upb=mid-<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(found){</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        System.out.println(<span class="string">"item not found"</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">recursiveBinarySearch</span><span class="params">(<span class="type">int</span>[] bsarr, <span class="type">int</span> lwb, <span class="type">int</span> upb, <span class="type">int</span> snum)</span>{<span class="comment">//snum: the number to be searched; bsarr: array for binary search</span></span><br><span class="line">    <span class="type">int</span> mid=(upb-lwb)/<span class="number">2</span>+lwb;</span><br><span class="line">    <span class="keyword">if</span>(lwb&gt;upb){</span><br><span class="line">        System.out.println(<span class="string">"not found"</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(bsarr[mid]==snum){</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(bsarr[mid]&lt;snum){</span><br><span class="line">        <span class="keyword">return</span> recursiveBinarySearch(bsarr, mid+<span class="number">1</span>, upb, snum);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> recursiveBinarySearch(bsarr, lwb, mid-<span class="number">1</span>, snum);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">FUNCTION binarySearch(item:INTEGER, arr: ARRAY[1:10] OF INTEGER)</span><br><span class="line">	DECLARE upb: INTEGER</span><br><span class="line">	DECLARE lwb: INTEGER</span><br><span class="line">	DECLARE mid: INTEGER</span><br><span class="line">	upb &lt;- 10</span><br><span class="line">	lwb &lt;- 1</span><br><span class="line">	WHILE lwb&lt;upb</span><br><span class="line">		mid&lt;-(upb+lwb)/2 // mid &lt;- (upb-lwb)/2+lwb</span><br><span class="line">		IF arr[mid]=item</span><br><span class="line">			THEN</span><br><span class="line">				OUTPUT "found"</span><br><span class="line">				RETURN mid</span><br><span class="line">			ELSE </span><br><span class="line">				IF arr[mid]&lt;item</span><br><span class="line">					THEN</span><br><span class="line">						lwb=mid+1</span><br><span class="line">					ELSE</span><br><span class="line">						upb=mid-1</span><br><span class="line">				ENDIF</span><br><span class="line">		ENDIF</span><br><span class="line">	ENDWHILE</span><br><span class="line">OUTPUT "not found"</span><br><span class="line">RETURN -1</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Running"><a href="#Running" class="headerlink" title="Running:"></a>Running:</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"binary search:"</span>);</span><br><span class="line">System.out.println(<span class="string">"Position of 7 in mylist2: "</span>+ binarySearch(<span class="number">7</span>));</span><br><span class="line">System.out.println(<span class="string">"Position of -2 in mylist2: "</span>);</span><br><span class="line">binarySearch(-<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">"linear search:"</span>);</span><br><span class="line">System.out.println(<span class="string">"Position of 22 in mylist1: "</span>+linearSearch(<span class="number">22</span>));</span><br><span class="line">System.out.println(<span class="string">"Position of -2 in mylist1: "</span>);</span><br><span class="line">linearSearch(-<span class="number">2</span>);</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Result"><a href="#Result" class="headerlink" title="Result:"></a>Result:</h4><figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">binary search:</span><br><span class="line">Position of 7 in mylist2: 0</span><br><span class="line">Position of -2 in mylist2:</span><br><span class="line">item not found</span><br><span class="line">linear search:</span><br><span class="line">Position of 22 in mylist1: 3</span><br><span class="line">Position of -2 in mylist1:</span><br><span class="line">item not found</span><br></pre></td></tr></tbody></table></figure>

<hr>
<h2 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h2><p><u>Factors that may affect the performance of a sorting algorithms:</u></p>
<ul>
<li><font color="#4a69bd">The initial order of data</font></li>
<li><font color="#4a69bd">The number of data items to be sorted</font></li>
<li><font color="#4a69bd">The efficiency of the sorting algorithm</font></li>
</ul>
<h3 id="Prerequisite-1"><a href="#Prerequisite-1" class="headerlink" title="Prerequisite"></a>Prerequisite</h3> <figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] thedata = {<span class="number">34</span>,<span class="number">43</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">25</span>, <span class="number">98</span>, <span class="number">32</span>, <span class="number">43</span>, <span class="number">9</span>, <span class="number">11</span>};</span><br><span class="line"><span class="type">int</span>[] a=Bubblesort(thedata);</span><br><span class="line"><span class="type">int</span>[] b=insertionsort(thedata);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Bubble-Sort"><a href="#Bubble-Sort" class="headerlink" title="Bubble Sort"></a>Bubble Sort</h3><ul>
<li><input checked="" disabled="" type="checkbox"> 9618 s21 41 Q2</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] Bubblesort(<span class="type">int</span>[] arr){</span><br><span class="line">    <span class="type">int</span> top,temp;</span><br><span class="line">    Boolean swap;</span><br><span class="line">    top=arr.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span>{</span><br><span class="line">        swap=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;top;++i){</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&gt;arr[i+<span class="number">1</span>]){</span><br><span class="line">                temp=arr[i];</span><br><span class="line">                arr[i]=arr[i+<span class="number">1</span>];</span><br><span class="line">                arr[i+<span class="number">1</span>]=temp;</span><br><span class="line">                swap=<span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        top--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(swap &amp;&amp; top&gt;<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">FUNCTION BubbleSort(arr : ARRAY [1:10] OF INTEGER) RETURNS ARRAY [1:10] OF INTEGER</span><br><span class="line">	DECLARE top : INTEGER</span><br><span class="line">	DECLARE tmp : INTEGER</span><br><span class="line">	DECLARE swap : BOOLEAN</span><br><span class="line">	top=9</span><br><span class="line">	REPEAT</span><br><span class="line">		swap=FALSE</span><br><span class="line">		FOR i &lt;- 1 TO top</span><br><span class="line">			IF arr[i]&gt;arr[i+1] </span><br><span class="line">				THEN</span><br><span class="line">					tmp&lt;-arr[i]</span><br><span class="line">					arr[i]=arr[i+1]</span><br><span class="line">					arr[i+1]=tmp</span><br><span class="line">					swap&lt;-TRUE</span><br><span class="line">			ENDIF</span><br><span class="line">		NEXT i</span><br><span class="line">		top &lt;- top -1</span><br><span class="line">	UNTIL NOT swap AND top&lt;1</span><br><span class="line">	RETURN arr</span><br><span class="line">ENDFUNCTION</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h3><p><u>Describe how an insertion sort will sort the data</u></p>
<ul>
<li><font color="#4a69bd">Set the first element to be the sorted list</font></li>
<li><font color="#4a69bd">Store the next element in a temporary variable // store the value to be sorted in a temporary variable</font></li>
<li><font color="#4a69bd">… Compare this next element to each element in the sorted list</font></li>
<li><font color="#4a69bd">Move the elements that are greater than it one space to the right and insert the temporary variable// swap the element down until in the correct position</font></li>
<li><font color="#4a69bd">Loop through all items from 2nd to end of array</font></li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] insertionsort1(<span class="type">int</span>[] arr){</span><br><span class="line">    <span class="type">int</span> lwb=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> upb=arr.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=lwb+<span class="number">1</span>;i&lt;=upb;++i){</span><br><span class="line">        <span class="type">int</span> key=arr[i];</span><br><span class="line">        <span class="type">int</span> place=i-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[place]&gt;key){</span><br><span class="line">            <span class="keyword">while</span>(place&gt;=lwb &amp;&amp; arr[place]&gt;arr[place+<span class="number">1</span>]){</span><br><span class="line">                <span class="type">int</span> tmp=arr[place+<span class="number">1</span>];</span><br><span class="line">                arr[place+<span class="number">1</span>]=arr[place];</span><br><span class="line">                arr[place]=tmp;</span><br><span class="line">                place--;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] insertionsort2(<span class="type">int</span>[] arr){<span class="comment">// this is more preferrable and more efficienct compared to insertionsort1</span></span><br><span class="line">    <span class="type">int</span> lwb=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> upb=arr.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=lwb+<span class="number">1</span>;i&lt;=upb;++i){</span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(arr[j]&gt;key &amp;&amp; j&gt;=lwb){</span><br><span class="line">            arr[j+<span class="number">1</span>]=arr[j];</span><br><span class="line">            j--;</span><br><span class="line">        }</span><br><span class="line">        arr[j+<span class="number">1</span>]=key;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">FUNCTION insertionSort (arr : ARRAY[1:10] OF INTEGER) RETURNS ARRAY[1:10] OF INTEGER</span><br><span class="line">	DECLARE key : INTEGER</span><br><span class="line">	DECLARE place:INTEGER</span><br><span class="line">	FOR i &lt; 2 TO 10</span><br><span class="line">		key &lt;- arr[i]</span><br><span class="line">		place &lt;- i-1</span><br><span class="line">		WHILE arr[place-1] &gt; arr[place] &amp;&amp; place&gt;1</span><br><span class="line">			arr[place]=arr[place-1]</span><br><span class="line">			place &lt;- place -1</span><br><span class="line">		ENDWHILE</span><br><span class="line">		arr[place+1]&lt;-key</span><br><span class="line">	NEXT i</span><br><span class="line">	RETURN arr</span><br><span class="line">ENDFUNCTION</span><br></pre></td></tr></tbody></table></figure>



<h2 id="Abstract-Data-Types"><a href="#Abstract-Data-Types" class="headerlink" title="Abstract Data Types"></a>Abstract Data Types</h2><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><ul>
<li>Insert</li>
<li>Delete</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">stack</span>{</span><br><span class="line">    <span class="type">int</span>[] sta;</span><br><span class="line">    <span class="type">int</span> basepointer=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> toppointer=-<span class="number">1</span>;<span class="comment">//初始化为-1 代表stack为空的情况</span></span><br><span class="line">    <span class="type">int</span> item;</span><br><span class="line">    <span class="type">int</span> size;<span class="comment">//最大容量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">stack</span><span class="params">(<span class="type">int</span> si)</span>{</span><br><span class="line">        <span class="built_in">this</span>.sta= <span class="keyword">new</span> <span class="title class_">int</span>[si];</span><br><span class="line">        <span class="built_in">this</span>.size=si;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">if</span>(toppointer==-<span class="number">1</span>){<span class="comment">//也可以写成 if(toppointer==basepointer-1)</span></span><br><span class="line">            System.out.println(<span class="string">"stack is empty, cannot pop"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            item=sta[toppointer];</span><br><span class="line">            toppointer--;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> item)</span>{<span class="comment">//添加item进入stack</span></span><br><span class="line">        <span class="keyword">if</span>(toppointer==size-<span class="number">1</span>){</span><br><span class="line">            System.out.println(<span class="string">"stack is full, cannot push"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            sta[++toppointer]=item;</span><br><span class="line">            <span class="comment">//也可以写成: toppointer=toppointer+1;</span></span><br><span class="line">            <span class="comment">//           stack[toppointer]=item;</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>{<span class="comment">//大概率不会考</span></span><br><span class="line">        <span class="keyword">if</span>(toppointer==-<span class="number">1</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//return (toppointer==-1)? true: false;</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.isEmpty()){</span><br><span class="line">            System.out.println(<span class="string">"stack is empty"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> sta[toppointer];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><ul>
<li>Insert</li>
<li>Delete</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">queue</span>{</span><br><span class="line">    <span class="type">int</span>[] que= <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> front=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> rear=-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> queueFull=<span class="number">10</span>;<span class="comment">//store the maximum size of the queue</span></span><br><span class="line">    <span class="type">int</span> queueLength=<span class="number">0</span>;<span class="comment">// store the current size of the queue</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(<span class="type">int</span> item)</span>{</span><br><span class="line">        <span class="keyword">if</span>(queueLength&lt;queueFull){</span><br><span class="line">            <span class="keyword">if</span>(rear&lt;queueFull-<span class="number">1</span>){</span><br><span class="line">                rear++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span>{</span><br><span class="line">                rear=<span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            queueLength=queueLength+<span class="number">1</span>; </span><br><span class="line">            que[rear]=item;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            System.out.println(<span class="string">"queue is full, cannot enqueue"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dequeue</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">if</span>(queueLength==<span class="number">0</span>){</span><br><span class="line">            System.out.println(<span class="string">"Queue is empty, cannot dequeue"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            <span class="type">int</span> item=que[front];</span><br><span class="line">            <span class="keyword">if</span>(front==queueFull-<span class="number">1</span>){</span><br><span class="line">                front=<span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span>{</span><br><span class="line">                front=front+<span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            queueLength--;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h3><ul>
<li>Insert</li>
<li>Delete</li>
<li>Find</li>
</ul>
<h4 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">CONSTANT nullPointer=-1</span><br><span class="line">TYPE node</span><br><span class="line">	DECLARE data:STRING</span><br><span class="line">	DECLARE nextPointer:INTEGER</span><br><span class="line">ENDTYPE</span><br><span class="line">DECLARE startPointer,freePointer:INTEGER</span><br><span class="line">DECLARE list : ARRAY[0:N] OF node</span><br><span class="line">PROCEDURE Initialization</span><br><span class="line">	startPointer &lt;- -1</span><br><span class="line">	freePointer &lt;- 0</span><br><span class="line">	FOR i &lt;- 0 TO N-1</span><br><span class="line">		list[i].nextPointer&lt;-i+1</span><br><span class="line">	NEXT i</span><br><span class="line">	list[N].nextPointer&lt;-nullPointer</span><br><span class="line">ENDPROCEDURE</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String value)</span> {<span class="comment">//根据大小插入 这里对比的是String的字典序</span></span><br><span class="line">    <span class="keyword">if</span> (freepointer != nullPointer) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">newNodePtr</span> <span class="operator">=</span> freepointer;</span><br><span class="line">        list[newNodePtr].data = value;</span><br><span class="line">        freepointer = list[freepointer].pointer;</span><br><span class="line">        <span class="type">int</span> <span class="variable">previousPtr</span> <span class="operator">=</span> nullPointer;</span><br><span class="line">        <span class="type">int</span> <span class="variable">thisPtr</span> <span class="operator">=</span> startpointer;</span><br><span class="line">        <span class="keyword">while</span>((thisPtr != nullPointer) &amp;&amp; (value.compareTo(list[thisPtr].data) &gt; <span class="number">0</span>)){<span class="comment">//如果value比thisptr的data大</span></span><br><span class="line">            previousPtr = thisPtr;</span><br><span class="line">            thisPtr = list[thisPtr].pointer;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//最终 value会比previousptr的大，比thisptr的小</span></span><br><span class="line">        <span class="keyword">if</span> (previousPtr == nullPointer) { <span class="comment">// insert at the start of the node</span></span><br><span class="line">            list[newNodePtr].pointer = startpointer;</span><br><span class="line">            startpointer = newNodePtr;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            list[newNodePtr].pointer = list[previousPtr].pointer;</span><br><span class="line">            list[previousPtr].pointer = newNodePtr;</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        System.out.println(<span class="string">"no space"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertAtend</span><span class="params">(String value)</span>{</span><br><span class="line">    <span class="keyword">if</span>(freepointer!=nullPointer){</span><br><span class="line">        <span class="type">int</span> newNodeptr=freepointer;</span><br><span class="line">        list[newNodeptr].data=value;</span><br><span class="line">        freepointer=list[freepointer].pointer;</span><br><span class="line">        <span class="type">int</span> prevPointer=nullPointer;</span><br><span class="line">        <span class="type">int</span> thisptr=startpointer;</span><br><span class="line">        <span class="keyword">while</span>(thisptr!=nullPointer){</span><br><span class="line">            prevPointer=thisptr;</span><br><span class="line">            thisptr=list[thisptr].pointer;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(prevPointer==nullPointer){</span><br><span class="line">            startpointer=newNodeptr;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            list[prevPointer].pointer=newNodeptr;</span><br><span class="line">        }</span><br><span class="line">        list[newNodeptr].pointer=nullPointer;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">PROCEDURE insert(item:STRING)</span><br><span class="line">	DECLARE newPointer,prevPointer,thisPointer:INTEGER</span><br><span class="line">	IF freePointer&lt;&gt;nullPointer</span><br><span class="line">		THEN</span><br><span class="line">			newPointer&lt;-freePointer</span><br><span class="line">			freePointer&lt;-list[freePointer].nextPointer</span><br><span class="line">			list[newPointer].data&lt;-item</span><br><span class="line">			prevPointer&lt;-nullPointer</span><br><span class="line">			thisPointer&lt;-startPointer</span><br><span class="line">			WHILE thisPointer&lt;&gt;nullPointer</span><br><span class="line">				prevPointer&lt;-thisPointer</span><br><span class="line">				thisPointer&lt;-list[thisPointer].nextPointer</span><br><span class="line">			ENDWHILE</span><br><span class="line">			IF prevPointer=nullPointer</span><br><span class="line">				THEN</span><br><span class="line">					startPointer&lt;-newPointer</span><br><span class="line">				ELSE</span><br><span class="line">					list[prevPointer].nextPointer&lt;-newPointer</span><br><span class="line">			ENDIF</span><br><span class="line">			list[newPointer].nextPointer&lt;-nullPointer</span><br><span class="line">	ENDIF</span><br><span class="line">ENDPROCEDURE</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(String data)</span>{</span><br><span class="line">    <span class="type">int</span> <span class="variable">thisPtr</span> <span class="operator">=</span> startpointer;</span><br><span class="line">    <span class="type">int</span> <span class="variable">previousPtr</span> <span class="operator">=</span> nullPointer;</span><br><span class="line">    <span class="keyword">while</span> ((thisPtr != nullPointer) &amp;&amp; (!data.equalsIgnoreCase(list[thisPtr].data))) {</span><br><span class="line">        previousPtr = thisPtr;</span><br><span class="line">        thisPtr = list[thisPtr].pointer;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (thisPtr == nullPointer)</span><br><span class="line">        System.out.println(<span class="string">"data is not present"</span>);</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">if</span> (thisPtr == startpointer)<span class="comment">//删除startPointer存的元素</span></span><br><span class="line">            startpointer = list[startpointer].pointer;<span class="comment">//把startPointer设置为下一个linked的元素</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            list[previousPtr].pointer = list[thisPtr].pointer;<span class="comment">//若是删除链表中的元素，把previousPtr的元素link的要删除元素的下一个元素上</span></span><br><span class="line">    	list[thisPtr].pointer = freepointer;<span class="comment">//把删除的元素设置为free</span></span><br><span class="line">    	freepointer = thisPtr;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">PROCEDURE delete(item: STRING)</span><br><span class="line">	DECLARE prevPointer, thisPointer:INTEGER</span><br><span class="line">	prevPointer&lt;-nullPointer</span><br><span class="line">	thisPointer&lt;-startPointer</span><br><span class="line">	WHILE list[thisPointer]&lt;&gt;null &amp;&amp; list[thisPointer].data&lt;&gt;item</span><br><span class="line">		prevPointer&lt;-thisPointer</span><br><span class="line">		thisPointer&lt;-list[thisPointer].nextPointer</span><br><span class="line">	ENDWHILE</span><br><span class="line">	IF thisPointer&lt;&gt;nullPointer</span><br><span class="line">		THEN</span><br><span class="line">			IF thisPointer=startPointer</span><br><span class="line">				THEN</span><br><span class="line">					startPointer&lt;-list[startPointer].nextPointer</span><br><span class="line">				ELSE</span><br><span class="line">					list[prevPointer].nextPointer&lt;-list[thisPointer].nextPointer</span><br><span class="line">			ENDIF</span><br><span class="line">			list[thisPointer].nextPointer&lt;-freePointer</span><br><span class="line">			freePointer&lt;-thisPointer</span><br><span class="line">		ELSE</span><br><span class="line">			OUTPUT "not found the item to be deleted"</span><br><span class="line">	ENDIF</span><br><span class="line">ENDPROCEDURE</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findNode</span><span class="params">(String data)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">currentNode</span> <span class="operator">=</span> startpointer;</span><br><span class="line">    <span class="keyword">while</span> (currentNode != nullPointer) {</span><br><span class="line">        <span class="keyword">if</span> (data.equalsIgnoreCase(list[currentNode].data)) {</span><br><span class="line">            <span class="keyword">return</span> currentNode;</span><br><span class="line">        }</span><br><span class="line">        currentNode = list[currentNode].pointer;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<details>
    <summary>完整代码</summary>
<pre><code>public class Main {
    static class ListNode {
        String data;
        int pointer;
        public ListNode() {
            data = "";
            pointer = nullPointer;
        }
    }
    static final int nullPointer = -1;
    static int startpointer, freepointer;
    static Scanner input = new Scanner(System.in);
    static ListNode[] list = new ListNode[8];
    static void initializeList() {
        startpointer = nullPointer;
        freepointer = 0;
        for (int i = 0; i &lt; 7; i++) {
            list[i] = new ListNode(); // set all nodes as free nodes;
            list[i].pointer = i + 1;
        }
        list[7] = new ListNode();
        list[7].pointer = -1; // last node is intilized as -1;
    }
    static int menu() {
        System.out.println("1. insert an item");
        System.out.println("2. delete an item");
        System.out.println("3. search an item");
        System.out.println("4. display an item");
        System.out.println("Enter your choice 1/2/3/4");
        int ch = input.nextInt();
        return ch;
    }
    static void insert(String value) {//根据大小插入 这里对比的是String的字典序
        if (freepointer != nullPointer) {
            int newNodePtr = freepointer;
            list[newNodePtr].data = value;
            freepointer = list[freepointer].pointer;
            int previousPtr = nullPointer;
            int thisPtr = startpointer;
            while((thisPtr != nullPointer) &amp;&amp; (value.compareTo(list[thisPtr].data) &gt; 0)){//如果value比thisptr的data大
                previousPtr = thisPtr;
                thisPtr = list[thisPtr].pointer;
            }
            //最终 value会比previousptr的大，比thisptr的小
            if (previousPtr == nullPointer) { // insert at the start of the node
                list[newNodePtr].pointer = startpointer;
                startpointer = newNodePtr;
            } else {
                list[newNodePtr].pointer = list[previousPtr].pointer;
                list[previousPtr].pointer = newNodePtr;
            }
        } else {
            System.out.println("no space");
        }
    }
    static void insertAtend(String value){
        if(freepointer!=nullPointer){
            int newNodeptr=freepointer;
            list[newNodeptr].data=value;
            freepointer=list[freepointer].pointer;
            int prevPointer=nullPointer;
            int thisptr=startpointer;
            while(thisptr!=nullPointer){
                prevPointer=thisptr;
                thisptr=list[thisptr].pointer;
            }
            if(prevPointer==nullPointer){
                startpointer=newNodeptr;
            }
            else{
                list[prevPointer].pointer=newNodeptr;
            }
            list[newNodeptr].pointer=nullPointer;
        }
    }
    static void display(){
        int currentNode = startpointer;
        if (startpointer == nullPointer)
            System.out.println("no data in list");
        while (currentNode != nullPointer) {
            System.out.print(list[currentNode].data + "  ");
            currentNode = list[currentNode].pointer;
        }
    }
    static int findNode(String data) {
        int currentNode = startpointer;
        while (currentNode != nullPointer) {
            if (data.equalsIgnoreCase(list[currentNode].data)) {
                return currentNode;
            }
            currentNode = list[currentNode].pointer;
        }
        return currentNode;
    }
    static void deleteNode(String data){
        int thisPtr = startpointer;
        int previousPtr = nullPointer;
        while ((thisPtr != nullPointer) &amp;&amp; (!data.equalsIgnoreCase(list[thisPtr].data))) {
            previousPtr = thisPtr;
            thisPtr = list[thisPtr].pointer;
        }
        if (thisPtr == nullPointer)
            System.out.println("data is not present");
        else {
            if (thisPtr == startpointer)//删除startPointer存的元素
                startpointer = list[startpointer].pointer;//把startPointer设置为下一个linked的元素
            else
                list[previousPtr].pointer = list[thisPtr].pointer;//若是删除链表中的元素，把previousPtr的元素link的要删除元素的下一个元素上
        }
        list[thisPtr].pointer = freepointer;//把删除的元素设置为free
        freepointer = thisPtr;
    }
    public static void main(String[] args) {
        initializeList();
        String Data, Choice = "";
        do {
            System.out.println("enter your choice");
            int ch = menu();
            switch (ch) {
                case 1:
                    System.out.println("Enter the value");
                    Data = input.next();
                    insert(Data);
                    display();
                    break;
                case 2:
                    System.out.println("Enter the value");
                    Data = input.next();
                    deleteNode(Data);
                    display();
                    break;
                case 3:
                    System.out.println("Enter the value");
                    Data = input.next();
                    int find = findNode(Data);
                    System.out.println(" item found " + find);
                    if (find == nullPointer)
                        System.out.println("data not found");
                    display();
                    break;
                case 4:
                    System.out.println("Print complete list");
                    display();
            }
            System.out.println("do you want to continue enter Y /y ");
            Choice = input.next();
        } while (Choice.equalsIgnoreCase("Y"));
    }
}
</code></pre>
</details>

<h3 id="Binary-tree"><a href="#Binary-tree" class="headerlink" title="Binary tree"></a>Binary tree</h3><p><u>State the purpose of the free pointer:</u></p>
<ul>
<li><font color="#4a69bd">To point to the start/ first of the empty node/nodes</font></li>
</ul>
<h4 id="Initialization-1"><a href="#Initialization-1" class="headerlink" title="Initialization"></a>Initialization</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">TYPE node</span><br><span class="line">	DECLARE leftPointer: INTEGER</span><br><span class="line">	DECLARE rightPointer : INTEGER</span><br><span class="line">	DECLARE data : STRING</span><br><span class="line">ENDTYPE</span><br><span class="line">DECLARE N : INTEGER</span><br><span class="line">DECLARE freePointer,rootPointer, nullPointer : INTEGER</span><br><span class="line">DECLARE tree : ARRAY [0:N] OF node</span><br><span class="line">PROCEDURE initialization </span><br><span class="line">	freePointer &lt;- 0</span><br><span class="line">	nullPointer &lt;- -1</span><br><span class="line">	rootPointer &lt;- nullPointer</span><br><span class="line">	FOR i &lt;- 0 TO N-1</span><br><span class="line">		tree[i].leftPointer &lt;- i+1</span><br><span class="line">	NEXT i</span><br><span class="line">	tree[N].leftPointer &lt;- -1</span><br><span class="line">ENDPROCEDURE</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Insert-1"><a href="#Insert-1" class="headerlink" title="Insert"></a>Insert</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">AddNode</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sca</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">"input the data to be Added"</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> sca.nextInt();</span><br><span class="line">    <span class="keyword">if</span>(FreeNode&lt;=<span class="number">19</span>){<span class="comment">//如果Binary tree没用满</span></span><br><span class="line">        <span class="type">int</span> newPtr=FreeNode;</span><br><span class="line">        ArrayNodes[newPtr]=<span class="keyword">new</span> <span class="title class_">node</span>(-<span class="number">1</span>,data,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(RootPointer==-<span class="number">1</span>){<span class="comment">//如果当前为空</span></span><br><span class="line">            RootPointer=newPtr;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            Boolean placed=<span class="literal">false</span>;</span><br><span class="line">            <span class="type">int</span> CurrentNode=RootPointer;</span><br><span class="line">            <span class="keyword">while</span>(placed==<span class="literal">false</span>){</span><br><span class="line">                <span class="keyword">if</span>(data&lt;ArrayNodes[CurrentNode].data){<span class="comment">//如果插入数值比当前数值小，则看左边</span></span><br><span class="line">                    <span class="keyword">if</span>(ArrayNodes[CurrentNode].leftPointer==-<span class="number">1</span>){<span class="comment">//如果左节点为空 则放到左节点</span></span><br><span class="line">                        ArrayNodes[CurrentNode].leftPointer=newPtr;</span><br><span class="line">                        placed=<span class="literal">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">else</span>{<span class="comment">//如果不为空 则继续往下搜空的地方插入</span></span><br><span class="line">                        CurrentNode=ArrayNodes[CurrentNode].leftPointer;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span>{<span class="comment">//如果插入数值比当前数值大，则看右边</span></span><br><span class="line">                    <span class="keyword">if</span>(ArrayNodes[CurrentNode].rightPointer==-<span class="number">1</span>){</span><br><span class="line">                        ArrayNodes[CurrentNode].rightPointer=newPtr;</span><br><span class="line">                        placed=<span class="literal">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">else</span>{</span><br><span class="line">                        CurrentNode=ArrayNodes[CurrentNode].rightPointer;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        FreeNode=FreeNode+<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        System.out.println(<span class="string">"Tree is full"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">PROCEDURE insert</span><br><span class="line">	DECLARE newPointer,thisPointer,prevPointer:INTEGER</span><br><span class="line">	DECLARE turnedLeft : BOOLEAN</span><br><span class="line">	IF freePointer&lt;&gt;-1</span><br><span class="line">		THEN </span><br><span class="line">			newPointer&lt;-freePointer</span><br><span class="line">			freePointer&lt;-tree[freePointer].leftPointer</span><br><span class="line">			INPUT data</span><br><span class="line">			tree[newPointer].data &lt;- data</span><br><span class="line">			tree[newPointer].leftPointer&lt;- nullPointer</span><br><span class="line">			tree[newPointer].rightPointer &lt;- nullPointer</span><br><span class="line">			IF rootPointer = nullPointer</span><br><span class="line">				THEN</span><br><span class="line">					rootPointer&lt;- newPointer</span><br><span class="line">				ELSE</span><br><span class="line">					thisPointer&lt;-rootPointer</span><br><span class="line">					prevPointer&lt;-nullPointer</span><br><span class="line">					WHILE thisPointer&lt;&gt;-1</span><br><span class="line">						prevPointer&lt;-thisPointer</span><br><span class="line">						IF tree[thisPointer].data &lt; data</span><br><span class="line">							THEN</span><br><span class="line">								turnedLeft&lt;-FALSE</span><br><span class="line">								thisPointer&lt;-tree[thisPointer].rightPointer</span><br><span class="line">							ELSE</span><br><span class="line">								turnedLeft&lt;-TRUE</span><br><span class="line">								thisPointer&lt;-tree[thisPointer].leftPointer</span><br><span class="line">						ENDIF</span><br><span class="line">					ENDWHILE</span><br><span class="line">					IF turnedLeft</span><br><span class="line">						THEN</span><br><span class="line">							tree[prevPointer].leftPointer&lt;-newPointer</span><br><span class="line">						ELSE</span><br><span class="line">							tree[prevPointer].rightPointer&lt;-newPointer</span><br><span class="line">					ENDIF</span><br><span class="line">			ENDIF</span><br><span class="line">	ENDIF</span><br><span class="line">ENDPROCEDURE</span><br><span class="line"></span><br><span class="line">				</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Search-mag"><a href="#Search-mag" class="headerlink" title="Search:mag:"></a>Search<span class="github-emoji"><span>🔍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> element)</span>{</span><br><span class="line">    <span class="type">int</span> nownode=RootPointer;</span><br><span class="line">    <span class="keyword">while</span>(nownode!=-<span class="number">1</span>){</span><br><span class="line">        <span class="keyword">if</span>(ArrayNodes[nownode].data==element){</span><br><span class="line">            System.out.println(<span class="string">"found, the position is:"</span>+ nownode);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ArrayNodes[nownode].data&gt;element){</span><br><span class="line">            nownode=ArrayNodes[nownode].leftPointer;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            nownode=ArrayNodes[nownode].rightPointer;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"not found"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">FUNCTION search(item : STRING) RETURNS INTEGER</span><br><span class="line">	DECLARE thisPointer : INTEGER</span><br><span class="line">	thisPointer&lt;-rootPointer</span><br><span class="line">	WHILE thisPointer&lt;&gt;nullPointer</span><br><span class="line">		IF tree[thisPointer].data=item</span><br><span class="line">			THEN</span><br><span class="line">				RETURN thisPointer</span><br><span class="line">			ELSE</span><br><span class="line">				IF tree[thisPointer].data&gt;item</span><br><span class="line">					THEN</span><br><span class="line">						thisPointer&lt;-tree[thisPointer].leftPointer</span><br><span class="line">					ELSE</span><br><span class="line">						thisPointer&lt;-tree[thisPointer].rightPointer</span><br><span class="line">				ENDIF</span><br><span class="line">		ENDIF</span><br><span class="line">	ENDWHILE</span><br><span class="line">ENDFUNCTION</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Traversal"><a href="#Traversal" class="headerlink" title="Traversal"></a>Traversal</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inorderTraverse</span><span class="params">(<span class="type">int</span> ptr)</span>{</span><br><span class="line">    <span class="keyword">if</span>(ptr==-<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    inorderTraverse(ArrayNodes[ptr].leftPointer);</span><br><span class="line">    System.out.println(ArrayNodes[ptr].data);</span><br><span class="line">    inorderTraverse(ArrayNodes[ptr].rightPointer);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<details>
    <summary>完整代码</summary>
<pre><code>class Main{
    static node[] ArrayNodes = new node[20];
    static int RootPointer=-1;
    static int FreeNode=0;
    public static void main(String[] args){
        //Adding: 23 5 8 100 9 88
        System.out.println("Adding Nodes");
        AddNode();
        AddNode();
        AddNode();
        AddNode();
        AddNode();
        AddNode();
        System.out.println("Printing Tree Content");
        printContent();
        System.out.println("Inorder Traverse");
        inorderTraverse(0);
        search(5);
    }
    public static void AddNode(){
        Scanner sca = new Scanner(System.in);
        System.out.println("input the data to be Added");
        int data = sca.nextInt();
        if(FreeNode&lt;=19){//如果
            int newPtr=FreeNode;
            ArrayNodes[newPtr]=new node(-1,data,-1);
            if(RootPointer==-1){//如果当前为空
                RootPointer=newPtr;
            }
            else{
                Boolean placed=false;
                int CurrentNode=RootPointer;
                while(placed==false){
                    if(data<arraynodes[currentnode].data)&#123; 如果插入数值比当前数值小，则看左边="" if(arraynodes[currentnode].leftpointer="=-1){//如果左节点为空" 则放到左节点="" arraynodes[currentnode].leftpointer="newPtr;" placed="true;" &#125;="" else&#123;="" 如果不为空="" 则继续往下搜空的地方插入="" currentnode="ArrayNodes[CurrentNode].leftPointer;" 如果插入数值比当前数值大，则看右边="" if(arraynodes[currentnode].rightpointer="=-1){" arraynodes[currentnode].rightpointer="newPtr;" freenode="FreeNode+1;" system.out.println("tree="" is="" full");="" public="" static="" void="" printcontent()&#123;="" for(int="" i="0;i<FreeNode;++i){" system.out.println(arraynodes[i].leftpointer+"="" "+arraynodes[i].data+"="" "+arraynodes[i].rightpointer);="" inordertraverse(int="" ptr)&#123;="" if(ptr="=-1)" return;="" inordertraverse(arraynodes[ptr].leftpointer);="" system.out.println(arraynodes[ptr].data);="" inordertraverse(arraynodes[ptr].rightpointer);="" search(int="" element)&#123;="" int="" nownode="RootPointer;" while(nownode!="-1){" if(arraynodes[nownode].data="=element){" system.out.println("found,="" the="" position="" is:"+="" nownode);="" else="">element){
                nownode=ArrayNodes[nownode].leftPointer;
            }
            else{
                nownode=ArrayNodes[nownode].rightPointer;
            }
        }
        System.out.println("not found");
    }
    static class node{
        int leftPointer;
        int data;
        int rightPointer;
        public node(int lp,int da, int rp){
            this.leftPointer=lp;
            this.rightPointer=rp;
            this.data=da;
        }
    }
}
</arraynodes[currentnode].data)&#123;></code></pre>
</details>


<h2 id="Past-paper-questions"><a href="#Past-paper-questions" class="headerlink" title="Past paper questions"></a>Past paper questions</h2><p><u>Describe ways in which a queue differs from a stack</u>:</p>
<ul>
<li>In a stack the last item in is the first out/LIFO and in a queue the first item in is the first out/FIFO</li>
<li>Queue can be circular, but a stack is linear</li>
<li>Stack only needs a pointer to the top (and can have a base pointer, and a queue needs a pointer to the front and the rear</li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
        <category>ALCS</category>
      </categories>
      <tags>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Chapter19.2: Recursion</title>
    <url>/Notes/ALCS/Chapter19.2_Recursion/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/02/04/xUEV71zGkKSO9uP.png"></p>
<span id="more"></span>

<h3 id="Essential-features-of-recursion"><a href="#Essential-features-of-recursion" class="headerlink" title="Essential features of recursion:"></a><u>Essential features of recursion:</u></h3><ul>
<li><font color="#4a69bd">It is defined in terms of itself // it calls itself</font></li>
<li><font color="#4a69bd">It has a stopping condition</font></li>
<li><font color="#4a69bd">It has self-contained subroutine</font></li>
<li><font color="#4a69bd">It can return data to its previous call</font></li>
<li><code>--</code></li>
<li><font color="#4a69bd">Must have a base case/ stopping condition</font></li>
<li><font color="#4a69bd">Must have a general case</font></li>
<li><font color="#4a69bd">… which calls itself recursively // defined in terms of itself</font></li>
<li><font color="#4a69bd">… which changes its state and moves towards the base case</font></li>
<li><font color="#4a69bd">Unwinding occurs once the base case is reached</font></li>
</ul>
<p><u>Explain a reason why a stack is a suitable abstract data type(ADT) to implement recursion:</u></p>
<ul>
<li><font color="#4a69bd">A stack is a LIFO(last in first out) data structure</font></li>
<li><font color="#4a69bd">Each recursive call is pushed to the stack</font></li>
<li><font color="#4a69bd">And is popped when the function ends</font></li>
<li><font color="#4a69bd">Enable unwinding/back tracking</font></li>
<li><font color="#4a69bd">… to maintain the required order</font></li>
</ul>
<h3 id="What-a-compiler-has-to-do-to-translate-recursive-programming-code"><a href="#What-a-compiler-has-to-do-to-translate-recursive-programming-code" class="headerlink" title="What a compiler has to do to translate recursive programming code"></a><u>What a compiler has to do to translate recursive programming code</u></h3><ul>
<li><font color="#4a69bd">When the recursive call is made, all values/data are put on</font></li>
<li><font color="#4a69bd">… the stack</font></li>
<li><font color="#4a69bd">When the stopping condition/base case is met</font></li>
<li><font color="#4a69bd">… the algorithm unwinds</font></li>
<li><font color="#4a69bd">… the last sets of values are taken off the stack (in reverse order)</font></li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
        <category>ALCS</category>
      </categories>
  </entry>
  <entry>
    <title>Chapter 18: Artificial Intelligence</title>
    <url>/Notes/ALCS/Chapter18_ArtificialIntelligence/</url>
    <content><![CDATA[<p><img src="/./Chapter18_ArtificialIntelligence/ai.png"></p>
<hr>
<span id="more"></span>

<h3 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions:"></a>Definitions:</h3><p><u>Supervised Learning:</u></p>
<ul>
<li><font color="#4a69bd">Using a large number of tasks with given outcomes to enable a computer program to improve its performance in accomplishing similar tasks</font></li>
</ul>
<p><u>Unsupervised learning:</u></p>
<ul>
<li><font color="#4a69bd">Using a large number of tasks with unknown outcomes to enable a computer program to improve its performance in accomplishing similar tasks </font></li>
</ul>
<p><u>Reinforcement learning:</u></p>
<ul>
<li><font color="#4a69bd">Using a large number of tasks with unknwon outcomes and use of feedback to enable a computer program to improve its performance in accomplishing similar tasks</font></li>
</ul>
<p>Graph: </p>
<ul>
<li>A graph is a collection of nodes or vertices between which there can be edges.</li>
<li>Each node has a name</li>
<li>An edge can have an associated label which is a numerical value</li>
</ul>
<p><u>The use of graph to aid Artificial Intelligence:</u></p>
<ul>
<li><font color="#4a69bd">Artificial neural networks can be represented by graphs</font></li>
<li><font color="#4a69bd">Graphs provide structure for relationships // graphs provide relationships between nodes</font></li>
<li><font color="#4a69bd">AI problem can be defined as finding a path in a graph</font></li>
<li><font color="#4a69bd">Graph may be analysed/injected by a range of algorithms</font><ul>
<li><font color="#4a69bd">A* / Dijkstra’s algorithm</font></li>
<li><font color="#4a69bd">used in machine learning</font></li>
</ul>
</li>
<li><font color="#4a69bd">Back propagation of errors / regressions</font></li>
</ul>
<p><u>State the reasons for having multiple hidden layers in an artificial neural network</u></p>
<ul>
<li><font color="#4a69bd">Enable deep learning to take place</font></li>
<li><font color="#4a69bd">Where the problem you are trying to solve has a higher level of complexity it requires more layers</font></li>
<li><font color="#4a69bd">Allow neural network to learn and make decisions on its own</font></li>
<li><font color="#4a69bd">To improve the accuracy of the result</font></li>
</ul>
<p><u>Explain how artificial neural network enable machine learning</u></p>
<ul>
<li><font color="#4a69bd">Artifical neural networks are intended to replicate the way human brain work</font></li>
<li><font color="#4a69bd">Weights / values are assigned for each connection between nodes</font></li>
<li><font color="#4a69bd">The data are input at the input layer, then passed into the system</font></li>
<li><font color="#4a69bd">They are analyzed at each subsequent hidden layer where characteristics are extracted / output are calculated</font></li>
<li><font color="#4a69bd">This process of training / learning is repeated mant times to achieve optimum outputs // reinforcement learning takes place</font></li>
<li><font color="#4a69bd">Decisions can be made without being specifically programmed</font></li>
<li><font color="#4a69bd">The output layer provides the result</font></li>
<li><font color="#4a69bd">Back propagation of errors will be used to correct any errors that have been made </font></li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
        <category>ALCS</category>
      </categories>
  </entry>
  <entry>
    <title>Chapter20.1: Programming Paradigms</title>
    <url>/Notes/ALCS/Chapter20.1_ProgrammingParadigm/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/02/04/Eg9j2Jk4t3vRN7e.png"></p>
<span id="more"></span>

<hr>
<blockquote>
<p><strong>Programming paradigms</strong>: <font color="#4a69bd">A programming style/classification // characteristics/features that programming language has/uses</font></p>
</blockquote>
<h2 id="Low-level"><a href="#Low-level" class="headerlink" title="Low-level"></a>Low-level</h2><table>
<thead>
<tr>
<th>Modes of addressing</th>
<th>Definition</th>
</tr>
</thead>
<tbody><tr>
<td>Immediate</td>
<td>The operand is the data being used</td>
</tr>
<tr>
<td>Direct</td>
<td>The operand is the address of the data being used</td>
</tr>
<tr>
<td>Indirect</td>
<td>The content stored in the content of the operand is the data being used</td>
</tr>
<tr>
<td>Relative</td>
<td>The address of data being used is the current address add to the operand</td>
</tr>
<tr>
<td>Indexed</td>
<td>The address of the data being used is the content of the operand added to the content of index register</td>
</tr>
</tbody></table>
<p><img src="https://s2.loli.net/2023/02/04/btFXMPgZ7sRn4k5.png"></p>
<hr>
<h2 id="Imperative"><a href="#Imperative" class="headerlink" title="Imperative"></a>Imperative</h2><p><u>Describe what is meant by imperative programming paradigm</u></p>
<ul>
<li><font color="#4a69bd">A sequence of steps that changes the state of the program</font></li>
<li><font color="#4a69bd">The steps are in the order they should be carried out</font></li>
<li><font color="#4a69bd">e.g. procedural programming/language</font></li>
<li><font color="#4a69bd">Groups code into self-contained blocks // spilt the program into modules</font></li>
<li><font color="#4a69bd">… which are subroutines</font></li>
<li><code>--</code></li>
<li><font color="#4a69bd">Imperative languages use variables</font></li>
<li><font color="#4a69bd">… which are changed using assignment statement</font></li>
<li><font color="#4a69bd">… they rely on a method of repetition/iteration</font></li>
<li><font color="#4a69bd">Statement provide a sequence of commands for the computer to perform</font></li>
<li><font color="#4a69bd">… in the order written</font></li>
<li><font color="#4a69bd">… each line of code changes something in the program run</font></li>
</ul>
<h2 id="Object-Oriented-Programming"><a href="#Object-Oriented-Programming" class="headerlink" title="Object Oriented Programming"></a>Object Oriented Programming</h2><blockquote>
<p><font color="#4a69bd">A programming methodology that uses self-contained objects, which contain programming statements(methods) and data, and which communicate with each other</font></p>
</blockquote>
<p><u>Explain what is meant by Object Oriented programming</u></p>
<ul>
<li><font color="#4a69bd">Create classes</font></li>
<li><font color="#4a69bd">… as a blueprint for an object // objects are instances of classes</font></li>
<li><font color="#4a69bd">… that have properties/attributes and methods</font></li>
<li><font color="#4a69bd">… that can be private to the class // properties that can be only accessed by the class’s methods // encapsulation</font></li>
<li><font color="#4a69bd">Subclass can inherit from superclass (child and parent)</font></li>
<li><font color="#4a69bd">A subclass can inherit the methods and properties from the superclass</font></li>
<li><font color="#4a69bd">A subclass can change the methods from the superclass // subclass can use polymorphism</font></li>
<li><font color="#4a69bd">Objects can interact with each other</font></li>
</ul>
<p><u>Explain the difference between a class and an object</u>[^1]</p>
<ul>
<li><font color="#4a69bd">A class is the blueprint/design/template (from which the object are later created)</font></li>
<li><font color="#4a69bd">A class consists of properties/attributes and methods/procedures/functions</font></li>
<li><font color="#4a69bd">An object is an instance of a class</font></li>
<li><font color="#4a69bd">An object must be based on a class definition</font></li>
<li><font color="#4a69bd">Many objects can exists for the same class</font></li>
</ul>
<h4 id="Objects"><a href="#Objects" class="headerlink" title="Objects:"></a>Objects:</h4><blockquote>
<p>An instance of a class that is self-contained and includes data and methods</p>
<ul>
<li>Many instances can exists for the same class</li>
<li>Must be based on the class definition</li>
</ul>
</blockquote>
<h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><blockquote>
<p>Data and methods within an object that perform a named action</p>
</blockquote>
<h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h4><blockquote>
<p>A programmed procedure that is defined as part of a class</p>
</blockquote>
<h4 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h4><blockquote>
<p>A template/blueprint defining the methods and data of a certain type of object </p>
</blockquote>
<h4 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h4><blockquote>
<p>Process in which the methods and data from one class, a superclass or base class is copied to another class, a derived class/subclass </p>
</blockquote>
<h4 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h4><blockquote>
<p>Feature of OOP that allows a method to be defined more than once in a class, so it can be used in different situations</p>
</blockquote>
<h4 id="Containment-aggregation"><a href="#Containment-aggregation" class="headerlink" title="Containment(aggregation)"></a>Containment(aggregation)</h4><blockquote>
<p>Defines a <code>one-way</code> relationship / <code>has-a</code> relationship between two classes. In aggregation, the objects can exists independently with each other. <a href="https://isaaccomputerscience.org/concepts/prog_oop_aggregation_composition">^2</a></p>
</blockquote>
<h4 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h4><blockquote>
<p>Process of putting data and methods together as a single unit, a class</p>
</blockquote>
<h4 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h4><blockquote>
<p>A method that gets the value of a property</p>
</blockquote>
<h4 id="Setters"><a href="#Setters" class="headerlink" title="Setters"></a>Setters</h4><blockquote>
<p>A method used to control changes to a variable</p>
</blockquote>
<h4 id="Instances"><a href="#Instances" class="headerlink" title="Instances"></a>Instances</h4><blockquote>
<p>An occurrence of an object during the execution of a program</p>
</blockquote>
<h2 id="Declarative"><a href="#Declarative" class="headerlink" title="Declarative"></a>Declarative</h2><blockquote>
<p>Program that specify the desired result rather than how to get it</p>
</blockquote>
<ul>
<li><font color="#4a69bd">Instruct a program of what is needed to done instead of how to do it</font></li>
<li><font color="#4a69bd">… using facts and rules</font></li>
<li><font color="#4a69bd">… using queries to satisfy goals</font></li>
<li><font color="#4a69bd">Can be logical or functional</font></li>
<li><font color="#4a69bd">Logical - states a program as a set of logical relations</font></li>
<li><font color="#4a69bd">Functional - constructed by applying functions to arguments / uses a mathematical style</font></li>
</ul>
<hr>
<p><img src="https://s2.loli.net/2023/02/04/k7MTcf4QJ5Gx2nK.png"></p>
<p>[^1]: 9691 w13 32 q4</p>
]]></content>
      <categories>
        <category>Notes</category>
        <category>ALCS</category>
      </categories>
  </entry>
  <entry>
    <title>Contributors</title>
    <url>/uncategorized/Contributors/</url>
    <content><![CDATA[<h1 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h1><h2 id="bear-Katrina-Liu"><a href="#bear-Katrina-Liu" class="headerlink" title=":bear:Katrina Liu"></a><span class="github-emoji"><span>🐻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://katrinaliu.blog/">Katrina Liu</a></h2><p><span class="github-emoji"><span>🔗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f517.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://katrinaliu.blog/">Katrina’s blog</a></p>
<div class="note info"><p><strong>Determined &amp; offered suggestions on</strong> <mark class="label primary">themes</mark> and <mark class="label primary">style</mark> of page </p>
<p><strong>Participated</strong>: <code>Beta</code> test</p>
<p><strong>Contributed to:</strong></p>
<ul>
<li><a href="https://haoran-jie.github.io/#Note-Format">Note format</a></li>
</ul>
</div>

]]></content>
  </entry>
  <entry>
    <title>Deep Learning Recipe</title>
    <url>/uncategorized/Deep-Learning-Recipe/</url>
    <content><![CDATA[<h2 id="High-bias-and-Variance"><a href="#High-bias-and-Variance" class="headerlink" title="High bias and Variance"></a>High bias and Variance</h2><h3 id="High-Bias"><a href="#High-Bias" class="headerlink" title="High Bias"></a>High Bias</h3><ul>
<li>Underfitting the training set</li>
<li>Training set performance similar to development set performance</li>
</ul>
<h3 id="High-variance"><a href="#High-variance" class="headerlink" title="High variance"></a>High variance</h3><ul>
<li>Overfitting the training set</li>
<li>Training set performance superior than development set performance<span id="more"></span></li>
</ul>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><blockquote>
<p>Assume that the Bayes error is nearly 0%</p>
</blockquote>
<ol>
<li>Training set error 1%; development set error 11%<ul>
<li><code>High variance</code></li>
</ul>
</li>
<li>Training set error 15%; development set error 16%<ul>
<li><code>High bias</code></li>
</ul>
</li>
<li>Training set error 0.5%; development set error 0.5%<ul>
<li><code>Low variance</code> &amp; <code>Low bias</code></li>
</ul>
</li>
<li>Training set error 15%; development set error 30%<ul>
<li><code>High variance</code> &amp; <code>High bias</code></li>
<li>e.g. fit 的这条线 一部分是linear 的 一部分过分curvy</li>
</ul>
</li>
</ol>
<h2 id="General-process"><a href="#General-process" class="headerlink" title="General process"></a>General process</h2><pre><code class="highlight mermaid">graph LR
A[High Bias?] --&gt;|Y| B(Bigger network)
A --&gt; |Y| C(Train longer)
A --&gt; |Y| D(Use more advanced optimzation algoorithm)
E[High Variance?] --&gt;|Y| F(Regularlization)
E --&gt;|Y| G(Use more data)</code></pre>





<h4 id="In-conclusion"><a href="#In-conclusion" class="headerlink" title="In conclusion"></a>In conclusion</h4><p>以前其实是有那么个东西 叫做 bias-variance trade-off 的指的是variance 和 bias 之间的 inverse relation。 Low variance 和 low bias 很难共存。但随着大数据时代的来袭，我们有更多的渠道去收集更多的数据(比如爬虫) 导致修复其中一个问题并不会导致另外一个问题变得更糟糕。</p>
]]></content>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>FlexBox Notes</title>
    <url>/WebDevelopment/CSS/FlexBox-Notes/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Notes of FlexBox container in css and its related properties</p>

</blockquote>

<span id="more"></span>

<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JustifyingContent<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;p&gt;abcsi&lt;/p&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Samuel<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Jessica<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Katrina<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Hangrove<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Janson<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Alisa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Leo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Albert<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>{</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">2px</span> <span class="number">#806868</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="comment">/*align-items: flex-end;</span></span><br><span class="line"><span class="comment">    flex-wrap: nowrap; */</span></span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.item</span>{</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#457081</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.neu</span>{</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">58px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#3686c4</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>:  -<span class="number">35px</span> -<span class="number">35px</span> <span class="number">70px</span> <span class="number">#245881</span>,</span><br><span class="line">             <span class="number">35px</span> <span class="number">35px</span> <span class="number">70px</span> <span class="number">#48b4ff</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="justify-content-property"><a href="#justify-content-property" class="headerlink" title="justify-content property:"></a><code>justify-content</code> property:</h3><p>Justify means changing how elements are grouped and spaced on the main axis. To justify flex items, we use the <code>justify-content</code> property.</p>
<p>Aligns flex items along the main axis of the current line of the flex container.</p>
<p><strong>Values:</strong></p>
<ul>
<li>Default: <code>justify-content : flex-start;</code></li>
<li><code>justify-content : center;</code></li>
<li><code>justify-content : flex-end;</code></li>
<li><code>justify-content : space-around;</code></li>
<li><code>justify-content : space-between;</code></li>
</ul>
<hr>
<h3 id="flex-direction-property"><a href="#flex-direction-property" class="headerlink" title="flex-direction property:"></a><code>flex-direction</code> property:</h3><h2 id="Specifies-how-flex-items-are-placed-in-the-flex-container-by-setting-the-direction-of-the-flex-container’s-main-axis-Values-Default-row-flex-direction-row-reverse-flex-direction-columnn-flex-direction-column-reverse-flex-wrap-property-Controls-whether-the-flex-container-is-single-line-or-multi-line-and-the-direction-of-the-cross-axis-which-determines-the-direction-new-lines-are-stacked-in-Default-flex-wrap-nowrap-flex-wrap-wrap-flex-wrap-wrap-reverse-items-that-don’t-fit-to-go-to-the-top-of-the-container-instead-of-the-bottom-shorthand-flex-flow-property-can-be-replaced-by"><a href="#Specifies-how-flex-items-are-placed-in-the-flex-container-by-setting-the-direction-of-the-flex-container’s-main-axis-Values-Default-row-flex-direction-row-reverse-flex-direction-columnn-flex-direction-column-reverse-flex-wrap-property-Controls-whether-the-flex-container-is-single-line-or-multi-line-and-the-direction-of-the-cross-axis-which-determines-the-direction-new-lines-are-stacked-in-Default-flex-wrap-nowrap-flex-wrap-wrap-flex-wrap-wrap-reverse-items-that-don’t-fit-to-go-to-the-top-of-the-container-instead-of-the-bottom-shorthand-flex-flow-property-can-be-replaced-by" class="headerlink" title="Specifies how flex items are placed in the flex container, by setting the direction of the flex container’s main axis.Values:+ Default: row+ flex-direction : row-reverse;+ flex-direction : columnn;+ flex-direction : column-reverse;### flex-wrap property:Controls whether the flex container is single-line or multi-line, and the direction of the cross-axis, which determines the direction new lines are stacked in.+ Default: flex-wrap : nowrap;+ flex-wrap : wrap;+ flex-wrap : wrap-reverse    + items that don’t fit to go to the top of the container instead of the bottom### shorthand flex-flow property:can be replaced by:"></a>Specifies how flex items are placed in the flex container, by setting the direction of the flex container’s main axis.<br><strong>Values:</strong><br>+ Default: <code>row</code><br>+ <code>flex-direction : row-reverse;</code><br>+ <code>flex-direction : columnn;</code><br>+ <code>flex-direction : column-reverse;</code><br>### <code>flex-wrap</code> property:<br>Controls whether the flex container is single-line or multi-line, and the direction of the cross-axis, which determines the direction new lines are stacked in.<br>+ Default: <code>flex-wrap : nowrap;</code><br>+ <code>flex-wrap : wrap;</code><br>+ <code>flex-wrap : wrap-reverse</code><br>    + items that don’t fit to go to the top of the container instead of the bottom<br>### shorthand <code>flex-flow</code> property:<br><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span>: row;</span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap;</span><br></pre></td></tr></tbody></table></figure><br>can be replaced by:<br><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>: row wrap;</span><br></pre></td></tr></tbody></table></figure></h2><h3 id="align-items-property"><a href="#align-items-property" class="headerlink" title="align-items property:"></a><code>align-items</code> property:</h3><p>Aligns flex items along the cross axis of the current line of the flex container.<br><strong>Values:</strong></p>
<ul>
<li>Default: <code>align-items : stretch;</code></li>
<li><code>align-items : center;</code></li>
<li><code>align-items : flex-start;</code> <ul>
<li>items take the size of their content and are at the beginning of the cross axis.</li>
</ul>
</li>
<li><code>align-items : flex-end;</code></li>
</ul>
<h3 id="align-content-property"><a href="#align-content-property" class="headerlink" title="align-content property:"></a><code>align-content</code> property:</h3><p>Sets the distribution of space between and around content items along a flexbox’s cross-axis or a grid’s block axis.</p>
<ul>
<li>default: <code>align-content: stretch;</code></li>
<li><code>align-content: center;</code>     /* Pack items around the center */</li>
<li><code>align-content: start;</code>      /* Pack items from the start */</li>
<li><code>align-content: end;</code>        /* Pack items from the end */</li>
<li><code>align-content: flex-start;</code> /* Pack flex items from the start */</li>
<li><code>align-content: flex-end;</code>   /* Pack flex items from the end */</li>
</ul>
]]></content>
      <categories>
        <category>WebDevelopment</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>FlexBox</tag>
      </tags>
  </entry>
  <entry>
    <title>Graphics_Notes</title>
    <url>/Cambridge/Notes/Graphics-Notes/</url>
    <content><![CDATA[<h2 id="Rendering"><a href="#Rendering" class="headerlink" title="Rendering"></a>Rendering</h2><h3 id="Shading"><a href="#Shading" class="headerlink" title="Shading"></a>Shading</h3><p>$$<br>I = I_ak_a + \sum_i I_ik_d(L_i \cdot N) + \sum_iI_ik_s(R_i\cdot V)^n<br>$$</p>
<h4 id="Ambient-illumination"><a href="#Ambient-illumination" class="headerlink" title="Ambient illumination"></a>Ambient illumination</h4><p>In computer graphics, ambient illumination is a lighting model that simulates the way light is reflected off of objects and fills a scene. It is called “ambient” because it is meant to represent the indirect light in a scene that comes from all directions, rather than from a specific light source.</p>
<p>In other words, ambient illumination is the base level of lighting in a scene that fills in the shadows and gives objects a sense of overall brightness. It is typically implemented as a low-intensity, uniform light that is applied to all objects in a scene.</p>
<p><font color="CornflowerBlue">The ambient terms models indirect illumination; the light coming from other surfaces rather than directly from the light sources. The parameter $k_a$ controls what portion of ambient light the surface reflects and the $I_a$ in the global intensity of the ambient light</font></p>
<h4 id="Diffuse-shading"><a href="#Diffuse-shading" class="headerlink" title="Diffuse shading"></a>Diffuse shading</h4><p>In computer graphics, diffuse shading is a technique used to simulate the way light is scattered and absorbed by an object’s surface. It is based on the idea that light is absorbed and scattered in all directions by a rough surface, such as a matte paint finish.</p>
<p>Diffuse shading is typically implemented using the Phong lighting model, which calculates the intensity of the diffuse reflection for each pixel on an object’s surface based on the angle between the surface normal (a vector perpendicular to the surface) and the light source.</p>
<p><font color="CornflowerBlue">The diffuse term models Lambertian reflection where the incoming light in reflected uniformly in all directions. The paramter $k_d$&nbsp;controls the amount of light that is reflected in a diffuse manner. Scalar $I_i$&nbsp;describes the intensity of the incoming light</font></p>
<h4 id="Imperfect-specular-reflection"><a href="#Imperfect-specular-reflection" class="headerlink" title="Imperfect specular reflection"></a>Imperfect specular reflection</h4><p>In computer graphics, imperfect specular reflection is a technique used to simulate the way light is reflected off of an object’s surface in a more realistic manner. It is based on the idea that the reflection of light off of an object’s surface is not always perfect and that there are often small imperfections or irregularities that can affect the reflection.</p>
<p><font color="CornflowerBlue">The specular term models imperfect mirror-like reflection, in which the reflected light is distributed around the direction of reflection $R_i$. The paramter $K_s$&nbsp;controls the amount of light that is reflected in a specular manner. The paramter $n$&nbsp;models the shape of that distribution; high $n$&nbsp;will result in tighter distribution and the behaviour that is closer to a perfect mirror light reflection. Scalar $I_i$&nbsp;describes the intensity of the incoming light</font></p>
<span id="more"></span>

<img src="https://s2.loli.net/2023/02/04/SXTmqjWy6PI4BKh.png" alt="image-20230111224836005" style="zoom:50%;">

<h4 id="Simulation"><a href="#Simulation" class="headerlink" title="Simulation"></a>Simulation</h4><img src="https://s2.loli.net/2023/02/04/aXR8DC7mZwcNYA5.png" alt="image-20230111225224352" style="zoom:50%;">

<h3 id="Anti-aliasing"><a href="#Anti-aliasing" class="headerlink" title="Anti-aliasing"></a>Anti-aliasing</h3><h4 id="Aliasing"><a href="#Aliasing" class="headerlink" title="Aliasing"></a>Aliasing</h4><blockquote>
<p>Aliasing encompasses any effects attributable to discrete sampling</p>
</blockquote>
<h5 id="Spatial-aliasing"><a href="#Spatial-aliasing" class="headerlink" title="Spatial aliasing"></a>Spatial aliasing</h5><ul>
<li>Jagged edge</li>
<li>Missing small objects</li>
<li>Broken thin objects</li>
</ul>
<h5 id="Temporal-aliasing"><a href="#Temporal-aliasing" class="headerlink" title="Temporal aliasing"></a>Temporal aliasing</h5><ul>
<li>Counter-rotating discs</li>
<li>Multiple images (when 25Hz updates are projected at 75 Hz)</li>
</ul>
<h4 id="Sampling"><a href="#Sampling" class="headerlink" title="Sampling"></a>Sampling</h4><p><strong>Assumed that each ray passes through the centre of a pixel</strong></p>
<p>Leads to:</p>
<ul>
<li>stair step (jagged) edges to objects</li>
<li>small objects being missed completely</li>
<li>thin objects being missed completely or split into small pieces</li>
</ul>
<h4 id="Super-sampling"><a href="#Super-sampling" class="headerlink" title="Super-sampling"></a>Super-sampling</h4><blockquote>
<p>Shoot multiple rays through a pixel and average the result</p>
</blockquote>
<h5 id="Regular-grid"><a href="#Regular-grid" class="headerlink" title="Regular grid"></a>Regular grid</h5><ul>
<li>Divide the pixel into a number of sub-pixels and shoot a ray through the centre of each</li>
<li>Problem: can still lead to noticeable aliasing unless a very high resolution sub-pixel grid is used</li>
</ul>
<h5 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h5><ul>
<li>Shoot N rays at random points in the pixel</li>
<li>Replaces aliasing artefacts with noise artefacts<ul>
<li>The eye is far less sensitive to noise than to aliasing</li>
</ul>
</li>
</ul>
<h5 id="Jittered"><a href="#Jittered" class="headerlink" title="Jittered"></a>Jittered</h5><ul>
<li>Divide the pixel into N sub-pixels and shoot one ray at a random point in each sub-pixel</li>
<li>An approximation to Poisson disc sampling</li>
<li>For N rays it is better than pure random sampling</li>
<li>Easy to implement</li>
</ul>
<h5 id="Poisson-disc"><a href="#Poisson-disc" class="headerlink" title="Poisson disc"></a>Poisson disc</h5><ul>
<li>Shoot N rays at random points in the pixel with proviso that no two rays shall pass through the pixel closer than $\varepsilon$ to one another</li>
<li>For N rays this produces a better looking image than pure random sampling</li>
<li>Very hard to implement properly</li>
</ul>
<h4 id="Adaptive-super-sampling"><a href="#Adaptive-super-sampling" class="headerlink" title="Adaptive super-sampling"></a>Adaptive super-sampling</h4><ul>
<li>Shoot a few rays through the pixel, check the variance of the resulting values, if similar enough stop, otherwise shoot some more rays</li>
</ul>
<h3 id="Distributed-ray-tracing"><a href="#Distributed-ray-tracing" class="headerlink" title="Distributed ray tracing"></a>Distributed ray tracing</h3><blockquote>
<p><font color="CornflowerBlue">Distributed ray tracing involves calculating multiple rays for each pixel with the sampling distributed over a range of parameter values</font></p>
</blockquote>
<h4 id="Distribute-the-rays-going-to-a-light-source-over-some-area"><a href="#Distribute-the-rays-going-to-a-light-source-over-some-area" class="headerlink" title="Distribute the rays going to a light source over some area"></a>Distribute the rays going to a light source over some area</h4><ul>
<li>Allows <strong>area light sources</strong> in addition to point and directional light sources</li>
<li>Produces <strong>soft shadows</strong> with penumbrae</li>
</ul>
<h4 id="Distribute-the-camera-position-over-some-area"><a href="#Distribute-the-camera-position-over-some-area" class="headerlink" title="Distribute the camera position over some area"></a>Distribute the camera position over some area</h4><ul>
<li>Allows simulation of a camera with a finite aperture lens</li>
<li>Produces depth of field effects</li>
</ul>
<h4 id="Distribute-the-samples-in-time"><a href="#Distribute-the-samples-in-time" class="headerlink" title="Distribute the samples in time"></a>Distribute the samples in time</h4><ul>
<li>Produces motion blur effects on any moving objects </li>
<li>Temporal anti-aliasing</li>
</ul>
<h2 id="Graphics-pipelining"><a href="#Graphics-pipelining" class="headerlink" title="Graphics pipelining"></a>Graphics pipelining</h2><h3 id="Transformations"><a href="#Transformations" class="headerlink" title="Transformations"></a>Transformations</h3><h4 id="2D-coordinates"><a href="#2D-coordinates" class="headerlink" title="2D coordinates"></a>2D coordinates</h4><img src="https://s2.loli.net/2023/02/04/or3v1xbsK8T6S9O.png" alt="image-20230111195831895" style="zoom:50%;">

<h4 id="Homogeneous-2D-coordinates"><a href="#Homogeneous-2D-coordinates" class="headerlink" title="Homogeneous 2D coordinates"></a>Homogeneous 2D coordinates</h4><img src="https://s2.loli.net/2023/02/04/2rw7fvQDyKUuHBc.png" alt="image-20230111195911738" style="zoom:50%;">

<h4 id="Translation-by-matrix-algebra"><a href="#Translation-by-matrix-algebra" class="headerlink" title="Translation by matrix algebra"></a>Translation by matrix algebra</h4><img src="https://s2.loli.net/2023/02/04/5XRnw7kOKAFcIUN.png" alt="image-20230111200010071" style="zoom:50%;">

<h4 id="3D"><a href="#3D" class="headerlink" title="3D"></a>3D</h4><img src="https://s2.loli.net/2023/02/04/Uao7jp9isAbcMDv.png" alt="image-20230111201103228" style="zoom:50%;">

<h4 id="Projection-Matrix-Operation"><a href="#Projection-Matrix-Operation" class="headerlink" title="Projection - Matrix Operation"></a>Projection - Matrix Operation</h4><img src="https://s2.loli.net/2023/02/04/gX8F2jh9eBitV6Y.png" alt="image-20230115173504125" style="zoom: 33%;">

<h4 id="Order"><a href="#Order" class="headerlink" title="Order"></a>Order</h4><ol>
<li>Scale</li>
<li>Rotate</li>
<li>Translate</li>
</ol>
<h2 id="Rasterization"><a href="#Rasterization" class="headerlink" title="Rasterization"></a>Rasterization</h2><ul>
<li>Model surfaces as polyhedra – meshes of polygons</li>
<li>Use composition to build scenes</li>
<li>Apply perspective transformation and project into plane of screen</li>
<li>Work out which surface is closest</li>
<li>Fill pixels with colour of nearest visible polygon</li>
</ul>
<h3 id="Homogenous-barycentric-coordinates"><a href="#Homogenous-barycentric-coordinates" class="headerlink" title="Homogenous barycentric coordinates"></a>Homogenous barycentric coordinates</h3><blockquote>
<p>Used to interpolate colours, normals, texture coordinates, and other attributes inside the triangle</p>
</blockquote>
<img src="https://s2.loli.net/2023/02/04/568PpidyIJUHtRF.png" alt="image-20230111202753464" style="zoom:50%;">

<h3 id="Triangle-rasterization"><a href="#Triangle-rasterization" class="headerlink" title="Triangle rasterization"></a>Triangle rasterization</h3><img src="https://s2.loli.net/2023/02/04/C6GODjVidP8Xzwc.png" alt="image-20230111203215567" style="zoom:50%;">

<h3 id="Z-Buffer-Algorithm"><a href="#Z-Buffer-Algorithm" class="headerlink" title="Z-Buffer Algorithm"></a>Z-Buffer Algorithm</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">For every triangle in the scene do</span><br><span class="line">	For every fragment(x,y) in this triangle do</span><br><span class="line">		Calculate z for current (x,y)</span><br><span class="line">		if (z&lt;depth(x,y)) and (z&gt;z_min) then</span><br><span class="line">			depth(x,y)=z</span><br><span class="line">			colour(x,y) = fragment_colour(x,y)</span><br></pre></td></tr></tbody></table></figure>

<p><strong>Z-buffer must store depth with sufficient precision</strong></p>
<ul>
<li>24 or 32 bit</li>
<li>Integer or float</li>
<li>Often 1/z instead of z</li>
</ul>
<h2 id="Graphics-Hardware-and-modern-OpenGL"><a href="#Graphics-Hardware-and-modern-OpenGL" class="headerlink" title="Graphics Hardware and modern OpenGL"></a>Graphics Hardware and modern OpenGL</h2><h3 id="OpenGL-Rendering-Pipeline"><a href="#OpenGL-Rendering-Pipeline" class="headerlink" title="OpenGL Rendering Pipeline"></a>OpenGL Rendering Pipeline</h3><img src="https://s2.loli.net/2023/02/04/GhLYSazuXdBCDvm.png" alt="image-20230115200128415" style="zoom:50%;">

<h4 id="Vertex-shader"><a href="#Vertex-shader" class="headerlink" title="Vertex shader"></a>Vertex shader</h4><p>Processing of vertices, normals, uv texture coordinates</p>
<h4 id="Tessellation-control-shader-evaluation-shader"><a href="#Tessellation-control-shader-evaluation-shader" class="headerlink" title="Tessellation control shader + evaluation shader"></a>Tessellation control shader + evaluation shader</h4><p>[Optional] Create new primitives by tessellating existing primitives (patches).</p>
<h4 id="Geometry-shader"><a href="#Geometry-shader" class="headerlink" title="Geometry shader"></a>Geometry shader</h4><p>[Optional] Operate on tessellated geometry. Can create new primitives. </p>
<h4 id="Primitive-assembly"><a href="#Primitive-assembly" class="headerlink" title="Primitive assembly"></a>Primitive assembly</h4><p>Organizes vertices into primitives and prepared them for rendering</p>
<h4 id="Clipping"><a href="#Clipping" class="headerlink" title="Clipping"></a>Clipping</h4><p>Remove or modify vertices so that they all lie within the viewport (view frustum)</p>
<h4 id="Rasterization-1"><a href="#Rasterization-1" class="headerlink" title="Rasterization"></a>Rasterization</h4><p>Generates fragments(pixels) to be drawn for each primitive. Interpolated vertex attributes</p>
<h4 id="Fragment-shader"><a href="#Fragment-shader" class="headerlink" title="Fragment shader"></a>Fragment shader</h4><p>Computes colour per each fragment. Can lookup colour in the texture. Can modify pixels’ depth value.</p>
<p>Also used for tone mapping</p>
<h3 id="Shaders"><a href="#Shaders" class="headerlink" title="Shaders"></a>Shaders</h3><p>Shaders are small programs executed on a GPU</p>
<ul>
<li>Executed for each vertex, each pixel (fragment), etc.</li>
</ul>
<h3 id="OpenGL-Application-flow"><a href="#OpenGL-Application-flow" class="headerlink" title="OpenGL Application flow"></a>OpenGL Application flow</h3><img src="https://s2.loli.net/2023/02/04/gJpnIe3SkPEuadc.png" alt="image-20230115195754192" style="zoom: 33%;">

<h3 id="Textures"><a href="#Textures" class="headerlink" title="Textures"></a>Textures</h3><h4 id="Up-Sampling"><a href="#Up-Sampling" class="headerlink" title="Up Sampling"></a>Up Sampling</h4><p>When the texture resolution is insufficient for the rendered object, the values between texels needs to be interpolated. This operation is known as upsampling. OpenGL offers two interpolation filters:</p>
<h5 id="Nearest-neighbour"><a href="#Nearest-neighbour" class="headerlink" title="Nearest-neighbour"></a>Nearest-neighbour</h5><p>Set interpolated values to the value of the nearest texel</p>
<h5 id="Bi-linear-interpolation"><a href="#Bi-linear-interpolation" class="headerlink" title="Bi-linear interpolation"></a>Bi-linear interpolation</h5><p>Interpolate values in a piece-wise linear manner for both horizontal and vertical dimensions</p>
<h4 id="Down-Sampling"><a href="#Down-Sampling" class="headerlink" title="Down Sampling"></a>Down Sampling</h4><p>When multiple texels are mapped to a single pixel, the values of these texels need to be averaged to avoid aliasing artefacts. The image processing operation of averaging and reducing resolution is known as <strong>downsampling</strong>. Because averaging texels for each drawn pixel could be very time-consuming, OpenGL often uses a pre-averaged values stored in a data structure called <strong>mip-map</strong>. A mip-map is a pyramid of textures, in which the resolution of each higher level is halved.</p>
<h4 id="Bump-normal-mapping"><a href="#Bump-normal-mapping" class="headerlink" title="Bump (normal) mapping"></a>Bump (normal) mapping</h4><ul>
<li>Special kind of texture that modifies surface normal</li>
<li>The surface is still flat but the shading appears as on an uneven surface</li>
<li>Easily done in <strong>fragment shader</strong></li>
</ul>
<h4 id="Displacement-mapping"><a href="#Displacement-mapping" class="headerlink" title="Displacement mapping"></a>Displacement mapping</h4><ul>
<li>Texture that modifies surface</li>
<li>Better results than bump mapping since the surface is not flat</li>
<li>Requires <strong>geometry shader</strong></li>
</ul>
<h4 id="Environment-mapping"><a href="#Environment-mapping" class="headerlink" title="Environment mapping"></a>Environment mapping</h4><ul>
<li>To show environment reflected by the object</li>
</ul>
<h5 id="Environment-cube"><a href="#Environment-cube" class="headerlink" title="Environment cube"></a>Environment cube</h5><ul>
<li>Each face captures environment in that direction</li>
</ul>
<h3 id="Raster-buffers-colour-depth-stencil"><a href="#Raster-buffers-colour-depth-stencil" class="headerlink" title="Raster buffers (colour, depth, stencil)"></a>Raster buffers (colour, depth, stencil)</h3><h4 id="Stencil-Buffers"><a href="#Stencil-Buffers" class="headerlink" title="Stencil Buffers"></a>Stencil Buffers</h4><p>To block rendering selected pixels</p>
<h4 id="Double-buffering"><a href="#Double-buffering" class="headerlink" title="Double buffering"></a>Double buffering</h4><ul>
<li>To avoid flicker, tearing</li>
<li>Use two buffers (raster)<ul>
<li>Front buffer - what is shown on the screen</li>
<li>Back buffer - not shown, GPU draws into that buffer</li>
</ul>
</li>
</ul>
<img src="https://s2.loli.net/2023/02/04/b2CuoAcIU8dwm7D.png" alt="image-20230115201444829" style="zoom:15%;">

<h4 id="Triple-buffering"><a href="#Triple-buffering" class="headerlink" title="Triple buffering"></a>Triple buffering</h4><ul>
<li>Do not wait for swapping to start drawing the next frame</li>
<li>More memory needed</li>
<li>Higher delay between drawing and displaying a frame</li>
</ul>
<img src="https://s2.loli.net/2023/02/04/RgZaGc6dEftPpm3.png" alt="image-20230115201416196" style="zoom: 15%;">

<h3 id="Vertical-Synchronization-V-Sync"><a href="#Vertical-Synchronization-V-Sync" class="headerlink" title="Vertical Synchronization: V-Sync"></a>Vertical Synchronization: V-Sync</h3><ul>
<li>Pixels are copied from colour buffer to monitor row-by-row</li>
<li>If front &amp; back buffer are swapped during thsi process<ul>
<li>Upper part of the screen contains previous frame</li>
<li>Lower part of the screen contains current frame</li>
<li>Result: tearing artefact</li>
</ul>
</li>
</ul>
<h4 id="Solution-V-Sync"><a href="#Solution-V-Sync" class="headerlink" title="Solution: V-Sync"></a>Solution: V-Sync</h4><p>waits until the last row of pixels is copied to the display</p>
<img src="https://s2.loli.net/2023/02/04/6p5wKCjxtHJVy2q.png" alt="image-20230115201723828" style="zoom: 33%;">

<h3 id="FreeSync-AMD-amp-G-Sync-Nvidia"><a href="#FreeSync-AMD-amp-G-Sync-Nvidia" class="headerlink" title="FreeSync (AMD) &amp; G-Sync (Nvidia)"></a>FreeSync (AMD) &amp; G-Sync (Nvidia)</h3><h4 id="Adaptive-Sync"><a href="#Adaptive-Sync" class="headerlink" title="Adaptive Sync"></a>Adaptive Sync</h4><ul>
<li>Graphics card controls timing of the frames on the display</li>
<li>Can save power for 30fps video of when the screen is static</li>
<li>Can reduce lag for real-time graphics</li>
</ul>
<h2 id="Human-vision-colour-and-tone-mapping"><a href="#Human-vision-colour-and-tone-mapping" class="headerlink" title="Human vision, colour, and tone mapping"></a>Human vision, colour, and tone mapping</h2><h3 id="Structure-of-Human-Eye"><a href="#Structure-of-Human-Eye" class="headerlink" title="Structure of Human Eye"></a>Structure of Human Eye</h3><ul>
<li><strong>Retina:</strong> an array of light detection cells</li>
<li><strong>Fovea:</strong> the high resolution area of retina</li>
<li>Photoreceptors:<ul>
<li><p><strong>Cones:</strong>  responsible for day-light vision and colour perception</p>
<ul>
<li>Three types of cones: sensitive to <strong>short(S)</strong>, <strong>medium(M)</strong>, and <strong>long(L)</strong> wavelengths</li>
</ul>
</li>
<li><p><strong>Rods:</strong> responsible for night-light vision</p>
</li>
</ul>
</li>
</ul>
<h3 id="Colour"><a href="#Colour" class="headerlink" title="Colour"></a>Colour</h3><ul>
<li><p>There is no physical definition of colour - colour is the result of our perception</p>
<ul>
<li><p>For emissive displays/objects:</p>
<ul>
<li>Colour = Perception(spectral emission)</li>
</ul>
</li>
<li><p>For reflective displays/objects:</p>
<ul>
<li>Colour = Perception(illumination * reflectance)</li>
</ul>
</li>
<li><p>$L(\lambda)=I(\lambda)R(\lambda)$</p>
</li>
</ul>
</li>
<li><p><strong>Sensitivity Curves</strong> - Probability that a photon of that wavelengths will be absorbed by a photoreceptor. </p>
<img src="https://s2.loli.net/2023/02/04/u7LjFWfKgBVs2DZ.png" alt="image-20230108150255115" style="zoom:50%;"></li>
</ul>
<blockquote>
<p>The light spectra that appear to have the same colour are called <strong>metamers</strong> </p>
</blockquote>
<blockquote>
<p><strong>Noun:</strong> Metamerism</p>
</blockquote>
<h5 id="You-are-given-spectra-of-two-colours-c1-λ-c2-λ-and-cone-response-functions-l-λ-m-λ-s-λ-How-would-you-test-whether-the-colours-c1-and-c2-are-metamers-Write-down-the-equations-for-such-a-test"><a href="#You-are-given-spectra-of-two-colours-c1-λ-c2-λ-and-cone-response-functions-l-λ-m-λ-s-λ-How-would-you-test-whether-the-colours-c1-and-c2-are-metamers-Write-down-the-equations-for-such-a-test" class="headerlink" title="You are given spectra of two colours: c1(λ), c2(λ) and cone response functions l(λ), m(λ), s(λ). How would you test whether the colours c1 and c2 are metamers? Write down the equations for such a test"></a><u>You are given spectra of two colours: c1(λ), c2(λ) and cone response functions l(λ), m(λ), s(λ). How would you test whether the colours c1 and c2 are metamers? Write down the equations for such a test</u></h5><p><img src="https://s2.loli.net/2023/02/04/nXG7gouWjmBbUp4.png" alt="image-20230108150437696"></p>
<h3 id="Tristimulus-Colour-Representation"><a href="#Tristimulus-Colour-Representation" class="headerlink" title="Tristimulus Colour Representation"></a>Tristimulus Colour Representation</h3><h4 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h4><ul>
<li>Any colour can be matched using three linear independent reference colours </li>
<li>May require “negative” contribution to test colour</li>
</ul>
<h4 id="Standard-Colour-Space-CIE-XYZ"><a href="#Standard-Colour-Space-CIE-XYZ" class="headerlink" title="Standard Colour Space CIE XYZ"></a>Standard Colour Space CIE XYZ</h4><ul>
<li>1931 Colour matching experiments</li>
<li>Could match all physically realisable colour stimuli</li>
<li>Cone sensitivity curve can be obtained by a linear transformation of CIE XYZ</li>
<li>Y is roughly equivalent to luminance</li>
<li><img src="https://s2.loli.net/2023/02/04/Grydvbk1OacEH3B.png" alt="image-20230108150915829" style="zoom:67%;"></li>
</ul>
<h4 id="CIE-chromaticity-diagram"><a href="#CIE-chromaticity-diagram" class="headerlink" title="CIE chromaticity diagram"></a>CIE chromaticity diagram</h4><ul>
<li><p>$x = X/(X+Y+Z),y= Y/(X+Y+Z),z= Z/(X+Y+Z)$</p>
<img src="https://s2.loli.net/2023/02/04/25rVwUvPWH9TbhJ.png" alt="image-20230108151250894" style="zoom:50%;">
</li>
<li><h3 id="Achromatic-x2F-chromatic-vision-mechanism"><a href="#Achromatic-x2F-chromatic-vision-mechanism" class="headerlink" title="Achromatic/chromatic vision mechanism"></a>Achromatic/chromatic vision mechanism</h3><img src="https://s2.loli.net/2023/02/04/j8CBdLlyVOHgtiF.png" alt="image-20230108151412096" style="zoom:50%;">
</li>
<li><ul>
<li>M+L - Luminance achromatic (without colour) </li>
<li>M+L - Green-red chromatic</li>
<li>S+M+L - Blue-Yellow chromatic</li>
</ul>
</li>
</ul>
<h3 id="Visible-x2F-displayable-colour"><a href="#Visible-x2F-displayable-colour" class="headerlink" title="Visible/displayable colour"></a>Visible/displayable colour</h3><ul>
<li>All physically possible and visible colour form a solid in XYZ space<ul>
<li><p>Each displayable device can produce a subspace of that solid</p>
</li>
<li><p>A chromaticity diagram is a slice taken from the 3D solid in XYZ space</p>
</li>
<li><p>Colour Gamut - the solid in a colour space</p>
</li>
<li><p>Usually defined in XYZ to be device-independent</p>
</li>
</ul>
</li>
<li><img src="https://s2.loli.net/2023/02/04/oJ4DICzjqfTkmx5.png" alt="image-20230108151612241" style="zoom:50%;"></li>
</ul>
<h3 id="From-rendering-to-display"><a href="#From-rendering-to-display" class="headerlink" title="From rendering to display"></a>From rendering to display</h3><img src="https://s2.loli.net/2023/02/04/WM4CZcsHeQDuyir.png" alt="image-20230111210025906" style="zoom:50%;">

<ol>
<li><p>HDR / Physical rendering</p>
<ul>
<li>Scene-referred colours</li>
</ul>
</li>
<li><p>Tone mapping</p>
<ul>
<li>Display-referred colours </li>
<li>Floating-point values</li>
</ul>
</li>
<li><p>Display encoding;EOTF(Electro-Optical transfer function) / Inverse display model</p>
<ul>
<li><p>Gamma-corrected colour space </p>
<ul>
<li><img src="https://s2.loli.net/2023/02/04/Sklh3E4z1GncMZF.png" alt="image-20230108151728857" style="zoom: 25%;">
</li>
<li><p>Gamma encoding of images is used to optimize the usage of bits when encoding an image, or bandwidth used to transport an image, by taking advantage of the non-linear manner in which humans perceive light and colour.</p>
</li>
<li><p>Gamma-corrected pixel values give a scale of brightness levels that is more perceptually uniform.</p>
</li>
<li><p><font color="CornflowerBlue">One of the main reasons for using gamma correction is to preserve the overall contrast of an image when it is displayed on different devices. Without gamma correction, an image that looks correct on one device may appear too dark or too light on another device, due to differences in the way the devices handle the brightness values of the pixels.</font></p>
</li>
<li><p><font color="CornflowerBlue">Gamma correction is also used to compensate for the fact that the human eye is more sensitive to light at certain wavelengths than at others. By encoding the brightness values in a way that takes this into account, the overall contrast and perceived brightness of an image can be more accurately reproduced on different devices.</font></p>
</li>
<li><p>8-12 bits integer encoded for efficiency</p>
<ul>
<li>8-10bits for SDR</li>
<li>10-12bits for HDR</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<img src="https://s2.loli.net/2023/02/04/5mcZbW26wruANlD.png" alt="image-20230108151948639" style="zoom: 50%;">

<p><u>What is the purpose of mapping from scene-referred to display-referred colours</u>:</p>
<p><font color="CornflowerBlue">The rendered scene-referred colours may exceed the dynamic range and colour gamut of the display. The mapping is performed to map the rendered colours to the gamut that can be reproduced on the target display</font></p>
<p><u>How does display encoding differ between standard and high-dynamic-range displays</u></p>
<p><font color="CornflowerBlue">Display encoding for SDR and HDR displays differ in the used colour spaces and transfer functions (display coding function). The colour space for HDR displays spans a larger colour gamut. The transfer function for HDR displays can encode a much larger range of colour values. Images that are display-encoded for HDR display have higher bit-depth(10-12bits) than those encoded for SDR displays (8-10 bits)</font></p>
<img src="C:\Users\Samuel\AppData\Roaming\Typora\typora-user-images\image-20230111231319900.png" alt="image-20230111231319900" style="zoom:50%;">

<h3 id="Representing-colour"><a href="#Representing-colour" class="headerlink" title="Representing colour"></a>Representing colour</h3><table>
<thead>
<tr>
<th><strong>Colour spaces</strong></th>
<th>Linear and gamma corrected RGB, sRGB</th>
<th>HSV(Hue saturation value), HLS(Hue lightness saturation)</th>
<th>CIE Lab, CIE Luv</th>
<th>CMY Space</th>
</tr>
</thead>
<tbody><tr>
<td>Features:</td>
<td>Can be quantised to small number of bits <br>Can be linear(RGB) or display encoded (R’G’B’) <br>Can be scene-referred(HDR) or display-referred(SDR)</td>
<td>A set of numbers that are easy to interpret<img src="https://s2.loli.net/2023/02/04/Kq3zc9nog2JDp1Q.png" alt="image-20230108152254253"><img src="https://s2.loli.net/2023/02/04/fswrihK69WOkaJj.png" alt="image-20230108152306406"></td>
<td>Perceptually uniform         colour difference corresponded by the distance in the colour space</td>
<td>The important difference between CMY and RGB: Lights emit light, inks absorb light CMY is, at its simplest, the inverse of RGB</td>
</tr>
<tr>
<td>Applications:</td>
<td>Televisions, CRT monitors, LCD screens <br>RGB is usually used to represent colours of emissive display devices.</td>
<td>Colour pickers in the user-interface</td>
<td>Useful for computing colour differences or performing image processing operations</td>
<td>Printers: In real printing, CMYK (K refers to key, black)         Because inks are not perfect absorbers     Mixing CMY does not give us black     Lots of text is printed in black</td>
</tr>
<tr>
<td>Colour Gamut</td>
<td>A cube</td>
<td>Complex</td>
<td>Complex</td>
<td></td>
</tr>
</tbody></table>
<h3 id="Tone-Mapping-amp-Display-Encoding"><a href="#Tone-Mapping-amp-Display-Encoding" class="headerlink" title="Tone Mapping &amp; Display Encoding"></a>Tone Mapping &amp; Display Encoding</h3><p>Why tone mapping?</p>
<ul>
<li>Reduce dynamic range<ul>
<li>Customize the look (colour grading)</li>
<li>To simulate human vision</li>
<li>To simulate a camera </li>
<li>To adapt a displayed images to a display and viewing conditions</li>
<li>Make the rendered image more realistic</li>
<li><strong>To map from scene to display-referred colour</strong> <strong>(primary purpose)</strong></li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2023/02/04/8tKYkvGlbFm5iBO.png" alt="image-20230108152952764"></p>
<ul>
<li><h5 id="Explain-how-simulating-glare-that-happens-in-the-eyes-or-in-a-camera-can-enhance-the-appearance-of-rendered-scenes"><a href="#Explain-how-simulating-glare-that-happens-in-the-eyes-or-in-a-camera-can-enhance-the-appearance-of-rendered-scenes" class="headerlink" title="Explain how simulating glare that happens in the eyes or in a camera can enhance the appearance of rendered scenes."></a>Explain how simulating glare that happens in the eyes or in a camera can enhance the appearance of rendered scenes.</h5><ul>
<li>Rendered glare (or blooming) introduces the visual illusion that makes the sources of glare appear brighter than the maximum brightness of the display. It also makes the rendered scenes look more natural — closer to the look of perceived or camera-captured images.</li>
</ul>
</li>
<li><h5 id="Why-is-glare-typically-simulated-only-for-the-values-that-exceed-the-maximum-displayable-value"><a href="#Why-is-glare-typically-simulated-only-for-the-values-that-exceed-the-maximum-displayable-value" class="headerlink" title="Why is glare typically simulated only for the values that exceed the maximum displayable value?"></a>Why is glare typically simulated only for the values that exceed the maximum displayable value?</h5><ul>
<li>Glare is typically simulated only for the clipped/saturated values to avoid blurring of the rendered image. It is also done because the values reproduced on the display also cause glare in the eye and there is no need to simulate additional glare for those values.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Cambridge</category>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Graphics</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript_Basics(constantly updated)</title>
    <url>/WebDevelopment/JavaScript/JavaScript-Basics/</url>
    <content><![CDATA[<p style="text-align:center; color:#19547b; font-weight:bold;"> A flexible language that powers dynamic websites and apps </p>

<span id="more"></span>

<h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p>Dynamic websites need to remember information to display or change. For that, JavaScript has <strong>variables</strong><br>Like moving boxes, variables have content and names that tell us what’s inside</p>
<hr>
<h4 id="Variable-types"><a href="#Variable-types" class="headerlink" title="Variable types"></a>Variable types</h4><ul>
<li><strong>number:</strong><ul>
<li>variable type that stores number</li>
</ul>
</li>
<li><strong>string:</strong><ul>
<li>variable type that stores a series of char</li>
<li>can be recognized with the two double quotes, between which any symbol can stay</li>
<li>Eg: <code>"ajjef91239mca dsjfjja03"</code></li>
</ul>
</li>
<li><strong>boolean:</strong><ul>
<li>stores the result of comparison</li>
<li><code>true</code> </li>
<li><code>false</code></li>
</ul>
</li>
<li><code>var thisIsAVariable</code></li>
<li><code>var name="Samuel";</code><ul>
<li>variable name - name</li>
<li>Variable value - “Samuel”<ul>
<li>“Samuel” is a string</li>
</ul>
</li>
<li>A statement ends with semicolon <code>;</code></li>
</ul>
</li>
<li><code>var time = 5;</code><ul>
<li>5 is a number, not a string : since there’s no “ “</li>
</ul>
</li>
<li><code>var lighton = true</code></li>
<li><code>var finishedHW = false</code></li>
</ul>
<hr>
<h4 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h4><p>With special instruction <code>console.log()</code>, we tell the computer to display a value in an area called the <strong>console</strong>.</p>
<ul>
<li><code>console.log("Hello World");</code><br>When we display variables in the console, their values appear instead of their names. If we log <code>name</code> here, it’ll show its value.</li>
</ul>
<p>Arithmetic operations are supported with numbers:</p>
<ul>
<li><code>+</code> plus</li>
<li><code>-</code> minus</li>
<li><code>*</code> multiply</li>
<li><code>/</code> divides</li>
</ul>
<h2 id="joining-operator-when-is-used-between-two-numbers-the-result-will-be-their-sum-when-is-used-between-two-strings-the-result-will-be-the-joining-of-the-string-quot-name-quot-quot-Samuel-quot-gt-quot-name-Samuel-quot-when-is-used-between-a-string-and-a-number-the-number-will-be-automatically-transformed-into-a-string-quot-age-quot-8-gt-quot-age-8-quot-when-is-used-between-a-string-and-a-boolean-the-boolean-will-be-automatically-transformed-into-a-string-quot-Passed-quot-true-gt-quot-passed-true-quot"><a href="#joining-operator-when-is-used-between-two-numbers-the-result-will-be-their-sum-when-is-used-between-two-strings-the-result-will-be-the-joining-of-the-string-quot-name-quot-quot-Samuel-quot-gt-quot-name-Samuel-quot-when-is-used-between-a-string-and-a-number-the-number-will-be-automatically-transformed-into-a-string-quot-age-quot-8-gt-quot-age-8-quot-when-is-used-between-a-string-and-a-boolean-the-boolean-will-be-automatically-transformed-into-a-string-quot-Passed-quot-true-gt-quot-passed-true-quot" class="headerlink" title="joining operator: ++ when + is used between two numbers, the result will be their sum+ when + is used between two strings, the result will be the joining of the string  + &quot;name:&quot; + &quot; Samuel&quot; -> &quot;name: Samuel&quot;+ when + is used between a string and a number, the number will be automatically transformed into a string  + &quot;age: &quot; + 8 -> &quot;age: 8&quot;+ when + is used between a string and a boolean, the boolean will be automatically transformed into a string  + &quot;Passed&quot;:  + true -> &quot;passed: true&quot;"></a>joining operator: <code>+</code><br>+ when <code>+</code> is used between two numbers, the result will be their sum<br>+ when <code>+</code> is used between two strings, the result will be the joining of the string<br>  + <code>"name:" + " Samuel"</code> -&gt; <code>"name: Samuel"</code><br>+ when <code>+</code> is used between a string and a number, the number will be automatically transformed into a string<br>  + <code>"age: " + 8</code> -&gt; <code>"age: 8"</code><br>+ when <code>+</code> is used between a string and a boolean, the boolean will be automatically transformed into a string<br>  + <code>"Passed":  + true</code> -&gt; <code>"passed: true"</code></h2><h4 id="Using-Variables"><a href="#Using-Variables" class="headerlink" title="Using Variables"></a>Using Variables</h4><p>Variables are called variables because the values they store can change </p>
<h2 id="Use-the-sign-to-change-the-value-in-status-from-quot-Watching-Netflix-quot-to-quot-Playing-frisbee-quot"><a href="#Use-the-sign-to-change-the-value-in-status-from-quot-Watching-Netflix-quot-to-quot-Playing-frisbee-quot" class="headerlink" title="Use the = sign to change the value in status from &quot;Watching Netflix&quot; to &quot;Playing frisbee&quot;"></a>Use the <code>=</code> sign to change the value in <code>status</code> from <code>"Watching Netflix"</code> to <code>"Playing frisbee"</code><br><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">var</span> currentStatus = "Watching Netflix";</span><br><span class="line">currentStatus = "Playing frisbee";</span><br><span class="line">console<span class="selector-class">.log</span>(currentStatus);</span><br></pre></td></tr></tbody></table></figure></h2><h4 id="Comparing-operators"><a href="#Comparing-operators" class="headerlink" title="Comparing operators"></a>Comparing operators</h4><p>All comparison statements returns a boolean value</p>
<ul>
<li><code>===</code><ul>
<li>this is used to check whether two variables are equal<ul>
<li>variables can be of type <code>string</code> or <code>number</code></li>
</ul>
</li>
<li><code>1===2</code> returns <code>false</code></li>
<li><code>"apple"==="apple"</code> returns <code>true</code></li>
</ul>
</li>
<li><code>!==</code><ul>
<li>this is used to check whether two variables are not equal</li>
<li><code>1!==2</code> returns <code>true</code></li>
</ul>
</li>
<li><code>&gt;</code><ul>
<li>this is used to check whether a variable is larger than another variable</li>
<li><code>1&gt;2</code> returns <code>false</code></li>
</ul>
</li>
<li><code>&lt;</code><ul>
<li>this is used to check whether a variable is smaller than another variable</li>
<li><code>1&lt;2</code> returns <code>true</code></li>
</ul>
</li>
<li><code>&lt;=</code><ul>
<li>this is used to check whether a variable is smaller or equal than another variable</li>
<li><code>1&lt;=2</code> returns <code>true</code></li>
<li><code>1&lt;=1</code> returns <code>true</code></li>
</ul>
</li>
<li><code>&gt;=</code> this is used to check whether a variable is larger or equal than another variable<ul>
<li><code>1&gt;=2</code> returns <code>false</code></li>
</ul>
</li>
</ul>
<h3 id="If-x2F-else-statement"><a href="#If-x2F-else-statement" class="headerlink" title="If/else statement"></a>If/else statement</h3><p>How can we write code that adapts to different situations? By using the <strong>if statement</strong>.</p>
<h4 id="Structure"><a href="#Structure" class="headerlink" title="Structure:"></a>Structure:</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition){<span class="comment">//place a boolean value in the bracket</span></span><br><span class="line">   <span class="comment">//statement1</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line">    <span class="comment">//statement2</span></span><br><span class="line">}</span><br><span class="line"><span class="title class_">This</span> is equivalent <span class="attr">to</span>:</span><br><span class="line"><span class="keyword">if</span>(condition){</span><br><span class="line">   <span class="comment">//statement1</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(!condition){<span class="comment">//negating the condition</span></span><br><span class="line">    <span class="comment">//statement2</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties:"></a>Properties:</h4><ul>
<li>The if statement runs code only if the boolean it’s relying on is <code>true</code>. It’s like saying, of something is true, then do this.</li>
</ul>
<ul>
<li>We use <code>false</code> instead to skip the code inside the curly braces. </li>
<li>The <code>else</code> statement doesn’t need its own condition. That’s because it handles the cases where the if’s condition <code>false</code></li>
</ul>
<h4 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions:"></a>Definitions:</h4><ul>
<li><p>Values like <code>true</code> that are placed inside the parenthesis are called <strong>conditions.</strong> </p>
<ul>
<li>These can be:</li>
<li><code>true</code></li>
<li><code>false</code></li>
<li>comparison of variables<ul>
<li><code>a === b</code></li>
<li><code>a !=== b </code></li>
<li><code>a &lt; b</code></li>
<li><code>a &lt;= b</code></li>
<li><code>a &gt; b</code></li>
<li><code>a &gt;= b</code></li>
</ul>
</li>
</ul>
</li>
<li><p>Statements relying on conditions are called <strong>conditionals.</strong></p>
</li>
</ul>
<h3 id="Incorporating-else-if"><a href="#Incorporating-else-if" class="headerlink" title="Incorporating else if"></a>Incorporating <code>else if</code></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (age &lt; <span class="number">16</span>){</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"children"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(age &lt; <span class="number">65</span>){</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"working population"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"elderly"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Properties-1"><a href="#Properties-1" class="headerlink" title="Properties:"></a>Properties:</h4><ul>
<li>As long as they go before the <code>else</code> statement, we can add as many <code>else if</code> statement as we’d like</li>
</ul>
]]></content>
      <categories>
        <category>WebDevelopment</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX Personal CheatSheet</title>
    <url>/Mathematics/tools/LaTeX-Personal-CheatSheet/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>Key formulae</th>
<th>Explanation</th>
<th>Example formulae</th>
<th>Representation</th>
</tr>
</thead>
<tbody><tr>
<td><code>\limits_a^b</code></td>
<td>Setting limits for the integral</td>
<td><code>$\int\limits_a^b {1\over 1+x^2}dx$</code></td>
<td>$\int\limits_a^b {1\over 1+x^2}dx$</td>
</tr>
<tr>
<td><code>\\</code></td>
<td>start a new line</td>
<td><code>$1=1\\2=2$</code></td>
<td>$1=1$ <br>$2=2$</td>
</tr>
<tr>
<td><code>\frac{a}{b}</code></td>
<td>Fraction</td>
<td><code>$\frac{-b\pm \sqrt{b^2-4ac}}{2a}$</code></td>
<td>$\frac{-b\pm \sqrt{b^2-4ac}}{2a}$</td>
</tr>
<tr>
<td><code>\times</code></td>
<td>The multiplication sign</td>
<td><code>$a \times b$</code></td>
<td>$a \times b$</td>
</tr>
<tr>
<td><code>\div</code></td>
<td>The division sign</td>
<td><code>$a \div b$</code></td>
<td>$a \div b$</td>
</tr>
<tr>
<td><code>\text{}</code></td>
<td>Allows for text with space</td>
<td><code>$\text{Hello World!}$</code></td>
<td>$\text{Hello World!}$</td>
</tr>
<tr>
<td><code>\hat{}</code></td>
<td>The hat accent</td>
<td><code>$\hat{y}$</code></td>
<td>$\hat{y}$</td>
</tr>
<tr>
<td><code>\partial{}</code></td>
<td>The partial derivative sign</td>
<td><code>$\frac{\partial}{\partial \theta_j}$</code></td>
<td>$\frac{\partial}{\partial \theta_j}$</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Mathematics</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>Monte Carlo simulation| 蒙特卡洛模拟</title>
    <url>/WhatandwhY/Monte-Carlo-%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B/</url>
    <content><![CDATA[<div class="note info no-icon"><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><blockquote>
<p>翻译自 《The New Turing Omnimbus》Chapter 4 Paragraph 1</p>
</blockquote>
<p>为了了解组成现代世界的许多系统，我们越来越多转向计算机模拟。系统，无论是非人为的或者人工的，总是有许多部分有着复杂的行为，使得唯一可行的的模拟这种行为的方法为假设它是<code>随机的</code>. 显而易见的是，咱们可以利用更简单的，符合统计学定律的部分替代这些系统中复杂的部分。</p>
<p>举个例子，如果我们想要模拟一场两边实力平均的排球比赛，我们可以通过抛硬币的方法来建立一个简单的模型：如果一个队伍正在发球，抛硬币的结果属于是不利于他们的那一面，则另一个队伍加一分且轮到他们发球；否则，这个发球队伍加一分并且继续发球。这个抛硬币的过程让我们想起了一个简单的打赌方式 ——<mark class="label primary">蒙特卡洛</mark></p>
</div>

<span id="more"></span>

<h4 id="A-lil-bit-of-history-1"><a href="#A-lil-bit-of-history-1" class="headerlink" title="A lil bit of history[^1]"></a>A lil bit of history[^1]</h4><p>故事从一个波兰犹太裔数学家 斯塔尼斯拉夫·烏拉姆(Stanislaw Ulam) 开始讲起。有一次他生病，身体不适时，一个人喜欢宅在家里玩纸牌接龙游戏（solitaire)。作为一个数学家，他一个自然的想法就是思考有没有办法计算出他赢得一盘游戏的概率，利用组合数学以及概率。虽然他是一个伟大的数学家，但他最后失败了，这个组合情况实在是太复杂了。后来他想到一个比较简单担又不太简单的办法：不断一次又一次的玩这个游戏 最终通过 $\frac{\text{胜利次数}}{总场次}$ 的方法来计算除这个概率，只要是总场次够多，这个概率就会越来越接近真实概率。</p>
<p>问题出现了：他的实力是在不怎么样，使得他玩到想出这个想法的时候其实一局都没赢过。这样来看的话，如果想要足够准确 他可能要天天玩这个纸牌游戏 持续好几年<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>  他很快想出了个解决办法：“寻求电脑的帮助呀”! 虽然他本身不是个懂电脑的人（在那个世界上只有几台计算机的时代），他和冯诺依曼认识呀！那个被称为计算机科学的叔叔的大人物（图灵被称为计算机之父，巴贝奇被称为计算机之爷爷）。冯诺依曼说，我可以帮你这个忙！我用ENIAC几个小时就可以模拟完了！（现在的电脑可能几微秒就跑完了） </p>
<p>自此 <code>蒙特卡洛模拟</code> 就此诞生 他们在后续研究氢弹的时候甚至还用到了 这足以证明这它的作用并不仅限于卡牌 </p>
<h4 id="赌徒谬误-VS-趋均数回归-1"><a href="#赌徒谬误-VS-趋均数回归-1" class="headerlink" title="赌徒谬误 VS. 趋均数回归[^1]"></a>赌徒谬误 VS. 趋均数回归[^1]</h4><blockquote>
<p>又是抛硬币：这个经典的例子足以区分这两个经常让人混淆的概念。</p>
</blockquote>
<p><strong>让我们先重申一些抛硬币的特性</strong><del>（可能大部分人都知道了）</del></p>
<ul>
<li>抛出正反面的概率都是$\frac{1}{2}$ ;   $P(正)=P(反)=\frac{1}{2}=0.5$</li>
<li>每一次抛硬币这个事件都是互相独立的(independent events)</li>
</ul>
<p><strong>想要理解赌徒谬论，自然而然的 让我们从一个赌徒的角度看世界！</strong></p>
<p>这个游戏非常简单，就是抛硬币然后猜是正面还是反面；猜对了的人会均分所有猜错了的人的赌注。现在非常神奇的事情发生了，这个硬币已经连续十次抛到正面了！一堆赌徒们听到消息蜂拥而至，他们心想太好了太好了我终于要猜对下一次了，然后他们猜第十一次为反面。他们为什么这么猜呢？原因有两个:</p>
<ol>
<li>运气守恒定律！这就和我今天倒霉了所以明天运气会更好一样的道理</li>
<li>连续十一次是正面的概率是 $\frac{1}{2}^{11}=\frac{1}{2048}$ ! 所以这么小的概率 我一定要选反面</li>
</ol>
<p>那他们是正确的吗？其实不是的: 因为抛硬币的第二个特性 – 每次抛硬币的事件都是互相独立的。所以说下一次抛到正面的概率是1/2，抛到反面的概率也是1/2. 那(连续十一次是正面的概率是 $\frac{1}{2}^{11}=\frac{1}{2048}$ )难道是错的吗？其实也没错。但是我们所经历的 并不是<code>P(连续11次正面)</code>这个概率 而是 <code>P(连续十次正面，那么第十一次是正面)</code> 这个概率。前者为$\frac{1}{2048}$，后者为 $\frac{1}{2}$.</p>
<p>这就是赌徒谬论：也就是为什么有那么多人沉迷赌博的原因之一：他们做出了虚假的判断，并相信有运气守恒 : <u>只要再来一局我一定能赢</u></p>
<p>诶那难道世界上没有<strong>运气守恒</strong>这个东西了吗? 其实是有的，而那就是<strong>趋均数回归</strong></p>
<p><strong>趋均数回归</strong>的故事，还是和之前一样，非常神奇的事情发生了！硬币连续十次抛到正面了！但是现在猜的并不是第十一次，而是在抛硬币第11-20次这十次中，会有多少个正面。</p>
<p>用人话来讲 去均属回归是这样的一个定理：<em>如果一个离谱的事情发生了 下一个事情大概率不会有这么离谱 会更趋向于这件事情的平均（在这个例子的情况下是5）</em>  </p>
<p>回归到抛硬币的例子里，在抛第1-10个硬币这件事情上，全都是正面 – 这比较离谱。趋均数回归告诉我们，在抛第11-20个硬币的时候，大概率不会有十个全是正面这种情况了。可能是九个，八个，七个这么离谱的情况，但大概率会比之前不离谱一点 会离5更近一点。</p>
<p>那很多人可能会搞糊涂 很奇怪呀 为什么你说赌徒谬论告诉我们没有运气守恒 趋均数回归告诉我们有运气守恒了。我只能说他俩对运气守恒的定义不太一样。如果是赌徒谬论 它所讲的运气守恒 在接下来这十个硬币的情况下 判断出来的是什么呢：因为我前面全是正面 那我后面肯定大部分都是反面！因为要守恒嘛 按理说正面和反面要一样多的 所以他们的判断可能说 接下来有八个反面 或者接下来有七个反面。而趋均数回归告诉我们的是：接下来的正面数量我觉得会离5更近一点 相比于之前的这么离谱的正面数量=10的情况。它没有说我接下来会有少于五个正面，只是说接下来的正面数量会比起之前的正面数量来 离平均更近一点。</p>
<p>[^1]: MIT 6.0002 Introduction to Computational Thinking and Data Science, Fall 2016; <a href="https://www.youtube.com/watch?v=OgO1gpXSUzU">https://www.youtube.com/watch?v=OgO1gpXSUzU</a></p>
]]></content>
      <categories>
        <category>WhatandwhY</category>
      </categories>
      <tags>
        <tag>Statistics</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/WebDevelopment/Project/Spotlight-Text/</url>
    <content><![CDATA[<img src="https://media.giphy.com/media/r0qmZ6SyKILYYxmyHK/giphy.gif" alt="gif" style="zoom:1000%;" class="full-image">

<span id="more"></span>

<h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spotlight on texts<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a>style.css</h2><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">*{</span><br><span class="line">    <span class="comment">/* Initialization, cancle the margin and padding of elements */</span></span><br><span class="line">    <span class="attribute">margin</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>{</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#222</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>{</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="comment">/* capitalize */</span></span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">112px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 伪元素 */</span></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">::after</span>{</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="attribute">color</span>: transparent;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#ff59b3</span>, <span class="number">#fe0000</span>, <span class="number">#ffff01</span>, <span class="number">#40d1d2</span>, <span class="number">#8b059f7d</span>);</span><br><span class="line">    <span class="comment">/* change the background so that it fits exactly the text */</span></span><br><span class="line">    <span class="attribute">background-clip</span>: text;</span><br><span class="line">    -webkit-<span class="attribute">background-clip</span>: text;</span><br><span class="line">    <span class="comment">/* clip the element so that it becomes a circle: 100 suggests the diameter, 0%, 50% suggests the position of the center of the circle */</span></span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">circle</span>(<span class="number">100px</span> at <span class="number">0%</span> <span class="number">50%</span>);</span><br><span class="line">    <span class="comment">/* animation: name, duration, infinite means repeat */</span></span><br><span class="line">    <span class="attribute">animation</span>: light <span class="number">5s</span> infinite;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* define an animation that changes the position of the center of the circle  */</span></span><br><span class="line"><span class="keyword">@keyframes</span> light{</span><br><span class="line">    <span class="number">0%</span>{</span><br><span class="line">        <span class="attribute">clip-path</span>: <span class="built_in">circle</span>(<span class="number">100px</span> at <span class="number">0%</span> <span class="number">50%</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="number">50%</span>{</span><br><span class="line">        <span class="attribute">clip-path</span>: <span class="built_in">circle</span>(<span class="number">100px</span> at <span class="number">100%</span> <span class="number">50%</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="number">100%</span>{</span><br><span class="line">        <span class="attribute">clip-path</span>: <span class="built_in">circle</span>(<span class="number">100px</span> at <span class="number">0%</span> <span class="number">50%</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>WebDevelopment</category>
        <category>Project</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>Start of Blog</title>
    <url>/blogging/start/Start-of-Blog/</url>
    <content><![CDATA[<h3 id="Inspiration"><a href="#Inspiration" class="headerlink" title="Inspiration"></a>Inspiration</h3><p>很多时候感觉缘分就是如此奇妙。最近申请季结束开始研究<code>Github</code>（<del>是有点晚了哈</del>), 因为觉得命令行操作很酷就下载了<code>git</code>(谁不想了解这个世界上最先进的分布式管理系统呢), 虽然最终可能<code>Github desktop</code>的用户体验更好一点 当然日常生活中两个都会被用到; </p>
<p>又是机缘巧合在逛 <u>appstore</u> 的时候看到了<code>mimo</code>。当时只知道这是个教编程的软件，下载后一度被会员制/membership劝退，但最终发现只要使用的仔细认真，答题尽量不错，其实还是可以用的​（<span class="github-emoji"><span>✈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2708.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 起飞~）至此便开始了对于Web Development的学习: 从 <code>html</code> 到 <code>css</code> 到 <code>javaScript</code>. 在准备配置自己电脑vscode上的js编程环境的时候，下载的<code>jsnode</code> 搞了近一个小时 东搞搞西搞搞。</p>
<p>晚上睡觉前刷了刷b站，看到 up主 codesheep 上传的一篇视频 “<strong>如何0基础创建自己的博客</strong>“ 立马就感兴趣住了！说hexo配置的两个前置: <code>git</code> 和 <code>jsnode</code> 的时候 才意识到自己无意中已经给自己铺好了路。 </p>
<p>搜集好教程后 准备第二天直接做起！</p>
<p>写到这里 我的博客基本配置已经ok啦 以及这就是我的第一篇文章。</p>
<p>希望以后的我看到这里能回想起当时那个 <mark class="label primary">求知、热情、上进</mark>的自己  <span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
]]></content>
      <categories>
        <category>blogging</category>
        <category>start</category>
      </categories>
      <tags>
        <tag>Inspiration</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML+CSS: Loading Animation</title>
    <url>/WebDevelopment/Project/loadingAnimation/</url>
    <content><![CDATA[<img src="https://media.giphy.com/media/KcMqhBHGYydbQqf7z1/giphy.gif" alt="loadingAnimation" style="zoom:300%;">

<span id="more"></span>

<h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Interesting Loading Animation<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loading"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>loading..<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a>style.css</h2><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">*{</span><br><span class="line">    <span class="comment">/* initialization, defining the margin and padding */</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>{</span><br><span class="line">    <span class="comment">/* 100% window height */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="comment">/* gradient background  */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom, <span class="number">#2b6876</span>, <span class="number">#09203f</span>);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="comment">/* center at the main axis, which is horizontally */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="comment">/* center flex items along the cross axis of the current line of the flex container */</span></span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span>{</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="comment">/* this tells the browser that the sum of padding and margin of the box is 200px */</span></span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">10px</span> solid <span class="number">#63a69f</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">animation</span>: a1 <span class="number">2s</span> linear infinite;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span><span class="selector-pseudo">::after</span>,<span class="selector-class">.loading</span><span class="selector-pseudo">::before</span>{</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span><span class="selector-pseudo">::after</span>{</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">10px</span> solid <span class="number">#f2e1ac</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">240deg</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span><span class="selector-pseudo">::before</span>{</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">10px</span> solid <span class="number">#f2836f</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">120deg</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-tag">span</span>{</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: beige;</span><br><span class="line">    <span class="attribute">animation</span>: a2 <span class="number">2s</span> linear infinite;</span><br><span class="line">    <span class="attribute">font-size</span>: larger;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> a1 {</span><br><span class="line">    <span class="selector-tag">to</span>{</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> a2 {</span><br><span class="line">    <span class="selector-tag">to</span>{</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">360deg</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>WebDevelopment</category>
        <category>Project</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>那些你该知道的markdown操作</title>
    <url>/blogging/start/markdown-tricks/</url>
    <content><![CDATA[<h2 id="基于HTML-HTML-based"><a href="#基于HTML-HTML-based" class="headerlink" title="基于HTML: HTML-based"></a>基于HTML: HTML-based</h2><h3 id="point-right-改变字体颜色-Text-Colour"><a href="#point-right-改变字体颜色-Text-Colour" class="headerlink" title=":point_right:改变字体颜色: Text Colour"></a><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>改变字体颜色: Text Colour</h3><h4 id="表示方法-lt-value-gt"><a href="#表示方法-lt-value-gt" class="headerlink" title="表示方法<value>:"></a>表示方法<code>&lt;value&gt;</code>:</h4><ol>
<li>十六进制值 如 <code>#f1c40f</code></li>
<li>RGB值 如 <code>RGB(255,254,253)</code></li>
<li>RGBA值 如 <code>RGBA(255,0,0,0.5)</code> 其中最后一个参数为<code>alpha参数</code> 代表不透明度 范围在0-1之间</li>
<li>颜色的名称 如 <code>blue</code>, <code>lightpink</code></li>
</ol>
<span id="more"></span> 

<h4 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h4><ul>
<li><input checked="" disabled="" type="checkbox"> 在任意可以表达文字的html标签 (如<code>&lt;h1&gt;</code> ,<code>&lt;p&gt;</code>) 的开始标签内添加 <code>style="corlor:&lt;value&gt;" </code>。</li>
</ul>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:RGB(255,38,79);"</span>&gt;</span>This is a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"color:indianred;"</span>&gt;</span>this is a level2 heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:#3867d6"</span>&gt;</span>这个颜色是海军蓝<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">"color: rgba(17,28,19,0.3)"</span>&gt;</span>设置了0.3不透明度<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<hr>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><ol>
<li><p style="color:rgb(255,38,79);">This is a paragraph</p>
</li>
<li><h2 style="color:indianred;">this is a level2 heading</h2>
</li>
<li><p style="color:#3867d6">这个颜色是海军蓝</p>
</li>
<li><h3 style="color: rgba(17,28,250,0.3)">设置了0.3不透明度</h3></li>
</ol>
<hr>
<h3 id="point-right-高光-Highlight"><a href="#point-right-高光-Highlight" class="headerlink" title=":point_right:高光: Highlight"></a><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><font style="background-color:lightpink;">高光: Highlight</font></h3><h4 id="添加方法-1"><a href="#添加方法-1" class="headerlink" title="添加方法"></a>添加方法</h4><ul>
<li><input checked="" disabled="" type="checkbox"> 在任意可以表达文字的html标签 (如<code>&lt;h1&gt;</code> ,<code>&lt;p&gt;</code>) 的开始标签内添加 <code>style="background-color:&lt;value&gt;;"</code></li>
</ul>
<h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"background-color:lightpink"</span>&gt;</span>The background color is pink<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p style="background-color:lightpink">The background color is light pink</p>

<hr>
<h3 id="point-right-lt-details-gt-与-lt-summary-gt-标签"><a href="#point-right-lt-details-gt-与-lt-summary-gt-标签" class="headerlink" title=":point_right:<details> 与 <summary>标签"></a><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><code>&lt;details&gt;</code> 与 <code>&lt;summary&gt;</code>标签</h3><blockquote>
<p> <code>&lt;details&gt;</code>标签可以使得文字/内容可以展开收起；<code>&lt;summary&gt;</code>标签则是收起时展现给浏览者的内容</p>
</blockquote>
<h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span>学习资料:<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>语文资料<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>数学资料<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>英语资料<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h4><details>
    <summary>学习资料:</summary>
    <ol>
        <li>语文资料</li>
        <li>数学资料</li>
        <li>英语资料</li>
    </ol>
</details>

<hr>
<h2 id="Non-HTML-based"><a href="#Non-HTML-based" class="headerlink" title="Non HTML-based"></a>Non HTML-based</h2><h3 id="point-right-脚注-Footnote-1"><a href="#point-right-脚注-Footnote-1" class="headerlink" title=":point_right:脚注: Footnote[^1]"></a><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>脚注: Footnote[^1]</h3><p>脚注可以在你想添加reference[^2], 想解释一个词或者一句话但又不像占太多地方的时候被使用。</p>
<h4 id="添加方法-2"><a href="#添加方法-2" class="headerlink" title="添加方法:"></a>添加方法:</h4><ul>
<li><input checked="" disabled="" type="checkbox"> 在正文中插入 <code>[^1]</code> , 当然这个1可以是任何数字 也可以是词语，比如<code>[^脚注]</code></li>
<li><input checked="" disabled="" type="checkbox"> 在文章的其他地方插入对应解释<code>[^1]:解释</code>，一般是在文末<ul>
<li><input checked="" disabled="" type="checkbox"> 在列表，表格，以及引用<code>&gt;this is a blockquote</code>中无法添加</li>
</ul>
</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例:"></a>实例:</h4><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">To be or not to be, this is a question[^footnote].</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^footnote</span>]: <span class="link">出自莎士比亚，哈姆雷特</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="效果-3"><a href="#效果-3" class="headerlink" title="效果:"></a>效果:</h4><p>To be or not to be, this is a question<a href="%E5%87%BA%E8%87%AA%E8%8E%8E%E5%A3%AB%E6%AF%94%E4%BA%9A%EF%BC%8C%E5%93%88%E5%A7%86%E9%9B%B7%E7%89%B9">^footnote</a>.</p>
<h3 id="point-right-x3D-x3D-高光-Highlight-x3D-x3D"><a href="#point-right-x3D-x3D-高光-Highlight-x3D-x3D" class="headerlink" title=":point_right:==高光: Highlight=="></a><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>==高光: Highlight==</h3><h4 id="添加方法-3"><a href="#添加方法-3" class="headerlink" title="添加方法:"></a>添加方法:</h4><ul>
<li><input checked="" disabled="" type="checkbox"> <code>==想要添加高光的文字==</code></li>
</ul>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性:"></a>特性:</h4><ul>
<li>默认颜色取决于使用的软件，一般来说是<font color="yellow" style="background-color:grey;">黄色</font></li>
</ul>
<hr>
<p>[^1]: footnote allows you to reference, or add additional explanations/details to the word/sentence you selected<br>[^2]: 参考, 引用</p>
]]></content>
      <categories>
        <category>blogging</category>
        <category>start</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Mathematical Terminology Explained</title>
    <url>/Mathematics/tools/Mathematical-Terminology-Explained/</url>
    <content><![CDATA[<div class="note success no-icon"><h3 id="Axiom"><a href="#Axiom" class="headerlink" title="Axiom"></a>Axiom</h3><blockquote>
<p>An <em><strong>axiom</strong></em>, <strong>postulate</strong>, or <strong>assumption</strong> is a statement that is taken to be true, to serve as a premise or starting point for further reasoning and arguments. [1]</p>
</blockquote>
<h3 id="Lemma"><a href="#Lemma" class="headerlink" title="Lemma"></a>Lemma</h3><blockquote>
<p>In mathematics, informal logic and argument mapping, a lemma (plural lemmas or lemmata) is <strong>a generally minor, proven proposition which is used as a stepping stone to a larger result</strong>. For that reason, it is also known as a “helping theorem” or an “auxiliary theorem”.[2]</p>
</blockquote>
<h3 id="Proposition"><a href="#Proposition" class="headerlink" title="Proposition"></a>Proposition</h3><blockquote>
<p>A proposition is a statement that is either true or false. In our course, we will usually call a mathematical proposition a theorem. A theorem is a main result. A proposition that is mainly of interest to prove a larger theorem is called a lemma. Some intermediate results are called propositions. Finally, a corollary is a statement that follows easily from a theorem. [3]</p>
</blockquote>
</div>



<h3 id="Acknowledgements"><a href="#Acknowledgements" class="headerlink" title="Acknowledgements"></a>Acknowledgements</h3><p><code>[1]</code>: <a href="https://en.wikipedia.org/wiki/Axiom">https://en.wikipedia.org/wiki/Axiom</a><br><code>[2]</code>: <a href="https://en.wikipedia.org/wiki/Lemma_(mathematics)#:~:text=In%20mathematics%2C%20informal%20logic%20and,or%20an%20%22auxiliary%20theorem%22">https://en.wikipedia.org/wiki/Lemma_(mathematics)#:~:text=In%20mathematics%2C%20informal%20logic%20and,or%20an%20%22auxiliary%20theorem%22</a>.<br><code>[3]</code>: <a href="http://math.northwestern.edu/~clark/285/handouts/abs-math.pdf">http://math.northwestern.edu/~clark/285/handouts/abs-math.pdf</a></p>
]]></content>
      <categories>
        <category>Mathematics</category>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>Paper4:Practical Notes</title>
    <url>/Notes/ALCS/practical/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Tips, reminders, and sample codes for paper5</p>

</blockquote>

<span id="more"></span> 

<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="Trend"><a href="#Trend" class="headerlink" title="Trend"></a>Trend</h3><blockquote>
<p>一般来说 每套卷子的每道题的知识点都是差不多固定的</p>
</blockquote>
<p>Q1: Queue, Stack; Binary tree, Linked list.<br>Q2: Binary search; Insertion Sort Bubble Sort; Recursion<br>Q3: OOP with file handling.</p>
<h3 id="Keyboard-shortcuts"><a href="#Keyboard-shortcuts" class="headerlink" title="Keyboard shortcuts"></a>Keyboard shortcuts</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p><code>Win</code>+<code>shift</code>+<code>s</code>: 截图 存在剪贴板</p>
<h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><p><code>command</code>+<code>shift</code>+<code>4</code>: 截图 - 可选择存在剪贴板/删除/存在某个位置</p>
<h3 id="Java-tricks"><a href="#Java-tricks" class="headerlink" title="Java tricks"></a>Java tricks</h3><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> function传 by reference 的 parameter(除array以外) 可以用global variable 代替</p>
<ul>
<li><span class="github-emoji"><span>🉑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f251.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>见 9618 y21 41 Q3 第一小题</li>
<li><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> array是可以被引用传递的(can be passed by reference)</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//one dimensional array</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        arr[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        change(arr);</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span>[] arr)</span> {</span><br><span class="line">        arr[<span class="number">0</span>]=<span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//two dimentional array</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">        arr[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        change(arr);</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span>[][] arr)</span> {</span><br><span class="line">        arr[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Output: <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure>

<p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 注意题目问的是”takes xx, xx, as <strong>input</strong>“ 还是 “takes xx, xx as <strong>parameter</strong>“</p>
<ul>
<li><code>input</code>: 在console 用 <code>scanner</code>输入</li>
<li><code>parameter</code>: 作为 function/procedure 的参数输入</li>
</ul>
<p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> input注意是否有要求在某个范围内或者是某种形式 记得validate</p>
<p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>记得看完题目再开始写代码！！</p>
<p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>reader</code>用完记得关掉！</p>
<p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>不要盲目用global variable 可以用local variable的尽量用 注意审题</p>
<ul>
<li>如果需要update的话就用global, 否则用local是ok的</li>
</ul>
<p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>需要print解释信息的时候记得print</p>
<hr>
<h2 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h2><h3 id="9618"><a href="#9618" class="headerlink" title="9618"></a><code>9618</code></h3><h4 id="S21-41"><a href="#S21-41" class="headerlink" title="S21-41:"></a>S21-41:</h4><ul>
<li><strong>Q1</strong><ul>
<li><code>Linked list</code></li>
<li><strong>mark scheme</strong> 错误<span class="github-emoji"><span>☠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2620.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>:  <ol>
<li>把class <code>node</code>的 <code>data</code> 和<code>nextNode</code>设置成<code>private</code>后, 在后面<code>addNode</code>方法中却可以直接<code>.data</code>&amp;<code>.nextNode</code>来进行访问。错误原因是因为用<code>private</code>修饰符过后是不能直接访问的 而是需要通过class里面的method来访问, 所以我写了两个getter methods. </li>
<li><code>addNode</code>方法中 只有array能够传入, <code>startPointer</code>和<code>emptyList</code>需要作为global variable因为他们不能<code>by Reference</code>传入</li>
</ol>
</li>
<li>这题的<code>addNode</code>方法在本题当linked List已有数据的时候是<strong>可用的</strong>, 但如果linked List 一开始是空的话, <code>addNode</code>方法就不能更新<code>startPointer</code>。修改方案为在<a href="https://haoran-jie.github.io/2022/04/17/Algorithm/">[Chapter19.1 Algorithm]</a>中Linked List的<code>insertAtend</code>方法. 只需在while循环结束后判断<code>prevPointer</code>是否为-1, 如是则改变<code>startpointer</code>为<code>newPointer</code>;如不是则为本题写法，将<code>linkedList[prevPointer]</code>的指针指向<code>newPointer</code>. <ul>
<li><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 在本题情况下<strong>不需要</strong>修改：链表为空则添加会不更新<code>startPointer</code>，而本题链表不为空</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//9618 s21 41</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">papei_9618_s21_41_Q1</span> {</span><br><span class="line">	<span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">startPointer</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">emptyList</span> <span class="operator">=</span><span class="number">5</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">		node[] linkedList = <span class="keyword">new</span> <span class="title class_">node</span>[<span class="number">10</span>];</span><br><span class="line">		linkedList[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">node</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">		linkedList[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">node</span>(<span class="number">5</span>,<span class="number">4</span>);</span><br><span class="line">	    linkedList[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">node</span>(<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line">	    linkedList[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">node</span>(<span class="number">7</span>,-<span class="number">1</span>);</span><br><span class="line">	    linkedList[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">node</span>(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">	    linkedList[<span class="number">5</span>] = <span class="keyword">new</span> <span class="title class_">node</span>(<span class="number">0</span>,<span class="number">6</span>);</span><br><span class="line">	    linkedList[<span class="number">6</span>] = <span class="keyword">new</span> <span class="title class_">node</span>(<span class="number">0</span>,<span class="number">8</span>);</span><br><span class="line">	    linkedList[<span class="number">7</span>] = <span class="keyword">new</span> <span class="title class_">node</span>(<span class="number">56</span>,<span class="number">3</span>);</span><br><span class="line">	    linkedList[<span class="number">8</span>] = <span class="keyword">new</span> <span class="title class_">node</span>(<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">	    linkedList[<span class="number">9</span>] = <span class="keyword">new</span> <span class="title class_">node</span>(<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line">	    System.out.println(<span class="string">"before adding node, the contents are:"</span>);</span><br><span class="line">	    outputNodes(linkedList, startPointer);</span><br><span class="line">	    System.out.println(<span class="string">"adding node now"</span>);<span class="comment">//inputting data: 5</span></span><br><span class="line">	    <span class="keyword">if</span>(addNode(linkedList)) {</span><br><span class="line">	    	System.out.println(<span class="string">"added successfully"</span>);</span><br><span class="line">	    }</span><br><span class="line">	    <span class="keyword">else</span> {</span><br><span class="line">	    	System.out.println(<span class="string">"linked list is full, cannot add"</span>);</span><br><span class="line">	    }</span><br><span class="line">	    System.out.println(<span class="string">"after adding nodem the contents are:"</span>);</span><br><span class="line">	    outputNodes(linkedList, startPointer);</span><br><span class="line">	    </span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">outputNodes</span><span class="params">(node[] linkedList, Integer currentPointer)</span> {</span><br><span class="line">		<span class="keyword">while</span>(currentPointer!=-<span class="number">1</span>) {</span><br><span class="line">			System.out.println(linkedList[currentPointer].getData());</span><br><span class="line">			currentPointer=linkedList[currentPointer].getnextNode();</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">addNode</span><span class="params">(node[] linkedList)</span> {</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">sca</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		System.out.println(<span class="string">"input the number you want to add"</span>);</span><br><span class="line">		<span class="type">Integer</span> <span class="variable">input</span> <span class="operator">=</span> sca.nextInt();</span><br><span class="line">		<span class="keyword">if</span>(emptyList&gt;=<span class="number">0</span> &amp;&amp; emptyList&lt;=<span class="number">9</span>) {</span><br><span class="line">		<span class="type">Integer</span> <span class="variable">newPointer</span> <span class="operator">=</span> emptyList;</span><br><span class="line">		emptyList=linkedList[emptyList].getnextNode();</span><br><span class="line">		linkedList[newPointer]= <span class="keyword">new</span> <span class="title class_">node</span>(input, -<span class="number">1</span>);</span><br><span class="line">		Integer prevpointer=startPointer;</span><br><span class="line">		<span class="keyword">while</span>(linkedList[prevpointer].getnextNode()!=-<span class="number">1</span>) {</span><br><span class="line">			prevpointer=linkedList[prevpointer].getnextNode();</span><br><span class="line">		}</span><br><span class="line">		linkedList[prevpointer]=<span class="keyword">new</span> <span class="title class_">node</span>(linkedList[prevpointer].getData(),newPointer);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">addNode1</span><span class="params">(node[] linkedlist)</span> {</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">sca</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		System.out.println(<span class="string">"Input the data you want to add to the linkedList"</span>);</span><br><span class="line">		<span class="type">Integer</span> <span class="variable">input</span> <span class="operator">=</span> sca.nextInt();</span><br><span class="line">		<span class="keyword">if</span>(emptyList&lt;<span class="number">0</span> || emptyList&gt;<span class="number">9</span>) {</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			<span class="type">int</span> <span class="variable">newPointer</span> <span class="operator">=</span> emptyList;</span><br><span class="line">			emptyList=linkedlist[emptyList].getnextNode();</span><br><span class="line">			linkedlist[newPointer]=<span class="keyword">new</span> <span class="title class_">node</span>(input,-<span class="number">1</span>);</span><br><span class="line">			<span class="type">int</span> prevPointer=-<span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> nowPointer=startPointer;</span><br><span class="line">			<span class="keyword">while</span>(nowPointer!=-<span class="number">1</span>) {</span><br><span class="line">				prevPointer=nowPointer;</span><br><span class="line">				nowPointer=linkedlist[nowPointer].getnextNode();</span><br><span class="line">			}</span><br><span class="line">			linkedlist[prevPointer].setNextNode(newPointer);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">node</span>{</span><br><span class="line">	<span class="keyword">private</span> Integer data;</span><br><span class="line">	<span class="keyword">private</span> Integer nextNode;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">node</span><span class="params">(Integer dataP, Integer nextNodep)</span> {</span><br><span class="line">		<span class="built_in">this</span>.data=dataP;</span><br><span class="line">		<span class="built_in">this</span>.nextNode=nextNodep;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> Integer <span class="title function_">getData</span><span class="params">()</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> Integer <span class="title function_">getnextNode</span><span class="params">()</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.nextNode;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNextNode</span><span class="params">(Integer nextN)</span> {</span><br><span class="line">		<span class="built_in">this</span>.nextNode=nextN;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><strong>Q2</strong><ul>
<li><code>Linear search</code></li>
<li><code>Bubble sort</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">papei_9618_s21_41_Q2</span> {</span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span>[] arrayData = {<span class="number">10</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">21</span>,<span class="number">8</span>};</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">sca</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		System.out.println(<span class="string">"input the value you want to search"</span>);</span><br><span class="line">		<span class="type">int</span> <span class="variable">item</span> <span class="operator">=</span> sca.nextInt();</span><br><span class="line">		<span class="keyword">if</span>(linearSearch(item)) {</span><br><span class="line">			System.out.println(<span class="string">"the search data is found"</span>);</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			System.out.println(<span class="string">"the search data is not found"</span>);</span><br><span class="line">		}</span><br><span class="line">	</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">linearSearch</span><span class="params">(<span class="type">int</span> item)</span> {</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&gt;arrayData.length;++i) {</span><br><span class="line">			<span class="keyword">if</span>(arrayData[i]==item){</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">()</span> {</span><br><span class="line">		Integer temp;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;<span class="number">10</span>;++x) {</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>;y&lt;<span class="number">9</span>;++y) {</span><br><span class="line">				<span class="keyword">if</span>(arrayData[y]&lt;arrayData[y+<span class="number">1</span>]) {</span><br><span class="line">					temp=arrayData[y];</span><br><span class="line">					arrayData[y]=arrayData[y+<span class="number">1</span>];</span><br><span class="line">					arrayData[y+<span class="number">1</span>]=temp;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><strong>Q3</strong><ul>
<li><code>Object Oriented Programming</code></li>
<li><code>File handling</code></li>
<li><code>Exception handling</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">papei_9618_s21_41_Q3</span> {</span><br><span class="line">	<span class="keyword">static</span> treasureChest[] arraryTreasure;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">		readData();</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">sca</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		System.out.println(<span class="string">"pick a trasure chest to open"</span>);</span><br><span class="line">		Integer answer,choice;</span><br><span class="line">		choice=sca.nextInt();</span><br><span class="line">		Integer attempts;</span><br><span class="line">		<span class="keyword">if</span>(choice&gt;<span class="number">0</span> &amp;&amp; choice&lt;<span class="number">6</span>) {</span><br><span class="line">			Boolean result=<span class="literal">false</span>;</span><br><span class="line">			attempts=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span>(result==<span class="literal">false</span>) {</span><br><span class="line">				System.out.println(arraryTreasure[choice-<span class="number">1</span>].getQuestion());</span><br><span class="line">				answer = sca.nextInt();</span><br><span class="line">				result = arraryTreasure[choice-<span class="number">1</span>].checkAnswer(answer);</span><br><span class="line">				attempts++;</span><br><span class="line">			}</span><br><span class="line">			System.out.println(<span class="string">"the number of points obtained is: "</span>+ arraryTreasure[choice=<span class="number">1</span>].getPoints(attempts));</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readData</span><span class="params">()</span> {</span><br><span class="line">		arraryTreasure = <span class="keyword">new</span> <span class="title class_">treasureChest</span>[<span class="number">5</span>];</span><br><span class="line">		<span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">"treasureChestData.txt"</span>;</span><br><span class="line">		String dataRead;</span><br><span class="line">		String question;</span><br><span class="line">		String answer;</span><br><span class="line">		String points;</span><br><span class="line">		<span class="type">File</span> <span class="variable">fi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">		Integer numberOfQuestions=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">try</span> {</span><br><span class="line">			<span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(fi);</span><br><span class="line">			<span class="type">BufferedReader</span> <span class="variable">bfr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br><span class="line">			dataRead=bfr.readLine();</span><br><span class="line">			<span class="keyword">while</span>(dataRead!=<span class="literal">null</span>) {</span><br><span class="line">				question=dataRead;</span><br><span class="line">				answer=bfr.readLine();</span><br><span class="line">				points=bfr.readLine();</span><br><span class="line">				arraryTreasure[numberOfQuestions]=<span class="keyword">new</span> <span class="title class_">treasureChest</span>(question, Integer.parseInt(answer), Integer.parseInt(points));</span><br><span class="line">			    numberOfQuestions++;</span><br><span class="line">			    dataRead=bfr.readLine();</span><br><span class="line">			}</span><br><span class="line">			bfr.close();</span><br><span class="line">			fr.close();</span><br><span class="line">		}<span class="keyword">catch</span>(FileNotFoundException e) {</span><br><span class="line">			System.out.println(<span class="string">"No file found"</span>);</span><br><span class="line">		}<span class="keyword">catch</span> (IOException e) {</span><br><span class="line">			System.out.println(<span class="string">"No file found"</span>);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">treasureChest</span>{</span><br><span class="line">	<span class="keyword">private</span> String question;</span><br><span class="line">	<span class="keyword">private</span> Integer answer,points;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">treasureChest</span><span class="params">(String que,Integer ans, Integer poi)</span> {</span><br><span class="line">		<span class="built_in">this</span>.question=que;</span><br><span class="line">		<span class="built_in">this</span>.answer=ans;</span><br><span class="line">		<span class="built_in">this</span>.points=poi;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getQuestion</span><span class="params">()</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.question;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> Boolean <span class="title function_">checkAnswer</span><span class="params">(Integer ans)</span> {</span><br><span class="line">		<span class="keyword">return</span> ans==<span class="built_in">this</span>.answer;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> Integer <span class="title function_">getPoints</span><span class="params">(Integer attempts)</span> {</span><br><span class="line">		<span class="keyword">if</span>(attempts==<span class="number">1</span>) {</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">this</span>.points;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(attempts==<span class="number">2</span>) {</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">this</span>.points/<span class="number">2</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(attempts==<span class="number">3</span> || attempts==<span class="number">4</span>) {</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">this</span>.points/<span class="number">4</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="W21-41"><a href="#W21-41" class="headerlink" title="W21-41"></a>W21-41</h4><ul>
<li><strong>Q1</strong><ul>
<li><code>Iteration</code></li>
<li><code>Recursion</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">papei_9618_w21_41_Q1</span> {</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">		System.out.println(<span class="string">"Running with paramters:10，15"</span>);</span><br><span class="line">		System.out.println(<span class="string">"The return value is:"</span>+Unknown(<span class="number">10</span>, <span class="number">15</span>));</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"Running with paramters:10，10"</span>);</span><br><span class="line">		System.out.println(<span class="string">"The return value is:"</span>+Unknown(<span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"Running with paramters:15,10"</span>);</span><br><span class="line">		System.out.println(<span class="string">"The return value is:"</span>+Unknown(<span class="number">15</span>, <span class="number">10</span>));</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">Unknown</span><span class="params">(Integer X,Integer Y)</span> {</span><br><span class="line">		<span class="keyword">if</span>(X&lt;Y) {</span><br><span class="line">			System.out.println(X+Y);</span><br><span class="line">			<span class="keyword">return</span> Unknown(X+<span class="number">1</span>, Y)*<span class="number">2</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			<span class="keyword">if</span>(X==Y) {</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">else</span> {</span><br><span class="line">				System.out.println(X+Y);</span><br><span class="line">				<span class="keyword">return</span> Unknown(X-<span class="number">1</span>, Y)/<span class="number">2</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">IterativeUnknown</span><span class="params">(Integer X,Integer Y)</span> {</span><br><span class="line">		Integer total=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(X!=Y) {</span><br><span class="line">			System.out.println(X+Y);</span><br><span class="line">			<span class="keyword">if</span>(X&lt;Y) {</span><br><span class="line">				X=X+<span class="number">1</span>;</span><br><span class="line">				total=total*<span class="number">2</span>;</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">else</span> {</span><br><span class="line">				X=X-<span class="number">1</span>;</span><br><span class="line">				total=total/<span class="number">2</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">return</span> total;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><strong>Q2</strong><ul>
<li><code>Object Oriented Programming</code></li>
<li><code>File handling</code></li>
<li><strong>mark scheme</strong> 错误<span class="github-emoji"><span>☠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2620.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>:  <ol>
<li>g问要求的colour无视大小写, mark scheme给出的答案是把input的colour全大写或者小写，但后面对比的时候仍然用的是<code>.equals()</code>直接与<code>pictArray[i].getColour()</code>进行对比。设想当<code>pictArray[i].getColour()</code> 为”Silver” 而input的colour为全大写或全小写时 “SILVER” “silver”; 这时候对比就不是equal的了。有两种<strong>解决方案</strong><ol>
<li>把<code>pictArray[i].getColour()</code>也对应的全大写或全小写</li>
<li>运用 <code>.equalsIgnoreCase()</code>方法</li>
</ol>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">papei_9618_w21_41_Q2</span> {</span><br><span class="line">	<span class="keyword">static</span> Integer numberOfPictures;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">		Picture[] pictArray = <span class="keyword">new</span> <span class="title class_">Picture</span>[<span class="number">100</span>];</span><br><span class="line">		ReadData(pictArray);</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">sca</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		System.out.println(<span class="string">"Now, try to input the requirements"</span>);</span><br><span class="line">		System.out.println(<span class="string">"Input the colour of frame"</span>);</span><br><span class="line">		String colourOfFrame=sca.nextLine();</span><br><span class="line">		System.out.println(<span class="string">"Input the maximum width"</span>);</span><br><span class="line">		Integer maxWid=Integer.parseInt(sca.nextLine());</span><br><span class="line">		System.out.println(<span class="string">"Input the maximum height"</span>);</span><br><span class="line">		Integer maxHei=Integer.parseInt(sca.nextLine());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numberOfPictures;++i) {</span><br><span class="line">			<span class="keyword">if</span>(pictArray[i].getColour().equalsIgnoreCase(colourOfFrame) &amp;&amp; pictArray[i].GetHeight()&lt;=maxHei &amp;&amp; pictArray[i].GetWidth()&lt;=maxWid) {</span><br><span class="line">				System.out.println(<span class="string">"found:\n"</span>+pictArray[i].GetDescription()+<span class="string">" width: "</span>+pictArray[i].GetWidth()+<span class="string">" Height: "</span>+pictArray[i].GetHeight());</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">ReadData</span><span class="params">(Picture[] pictArray)</span> {</span><br><span class="line">		String readData;</span><br><span class="line">		String Description,Width,Height,FrameColour;</span><br><span class="line">		numberOfPictures=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">try</span> {</span><br><span class="line">		String fileName=<span class="string">"Pictures.txt"</span>;</span><br><span class="line">		<span class="type">File</span> <span class="variable">fi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">		<span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(fi);</span><br><span class="line">		<span class="type">BufferedReader</span> <span class="variable">bfr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br><span class="line">		readData=bfr.readLine();</span><br><span class="line">		<span class="keyword">while</span>(readData!=<span class="literal">null</span>) {</span><br><span class="line">			Description=readData;</span><br><span class="line">			Width=bfr.readLine();</span><br><span class="line">			Height=bfr.readLine();</span><br><span class="line">			FrameColour=bfr.readLine();</span><br><span class="line">			pictArray[numberOfPictures]=<span class="keyword">new</span> <span class="title class_">Picture</span>(Description, Integer.parseInt(Width), Integer.parseInt(Height), FrameColour);</span><br><span class="line">			numberOfPictures++;</span><br><span class="line">			readData=bfr.readLine();</span><br><span class="line">		}</span><br><span class="line">		bfr.close();</span><br><span class="line">		fr.close();</span><br><span class="line">		}<span class="keyword">catch</span>(FileNotFoundException e) {</span><br><span class="line">			System.out.println(<span class="string">"File not found"</span>);</span><br><span class="line">		}<span class="keyword">catch</span> (IOException e) {</span><br><span class="line">			System.out.println(<span class="string">"File not found"</span>);</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">return</span> numberOfPictures;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Picture</span>{</span><br><span class="line">	<span class="keyword">private</span> String Description;</span><br><span class="line">	<span class="keyword">private</span> Integer Width;</span><br><span class="line">	<span class="keyword">private</span> Integer Height;</span><br><span class="line">	<span class="keyword">private</span> String FrameColour;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Picture</span><span class="params">(String Desc, Integer Wid, Integer Hei, String Fra)</span> {</span><br><span class="line">		<span class="built_in">this</span>.Description=Desc;</span><br><span class="line">		<span class="built_in">this</span>.Width=Wid;</span><br><span class="line">		<span class="built_in">this</span>.Height=Hei;</span><br><span class="line">		<span class="built_in">this</span>.FrameColour=Fra;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">GetDescription</span><span class="params">()</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.Description;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> Integer <span class="title function_">GetWidth</span><span class="params">()</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.Width;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> Integer <span class="title function_">GetHeight</span><span class="params">()</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.Height;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getColour</span><span class="params">()</span>{</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.FrameColour;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SetDescription</span><span class="params">(String fra)</span> {</span><br><span class="line">		<span class="built_in">this</span>.FrameColour=fra;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><strong>Q3</strong><ul>
<li><code>Binary tree</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">papei_9618_w21_41_Q3</span> {</span><br><span class="line">	<span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">RootPointer</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">FreeNode</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">		Integer[][] ArrayNodes = <span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">20</span>][<span class="number">3</span>];</span><br><span class="line">		<span class="comment">//10 5 15 8 12 6 20 11 9 4</span></span><br><span class="line">		AddNode(ArrayNodes);</span><br><span class="line">		AddNode(ArrayNodes);</span><br><span class="line">		AddNode(ArrayNodes);</span><br><span class="line">		AddNode(ArrayNodes);</span><br><span class="line">		AddNode(ArrayNodes);</span><br><span class="line">		AddNode(ArrayNodes);</span><br><span class="line">		AddNode(ArrayNodes);</span><br><span class="line">		AddNode(ArrayNodes);</span><br><span class="line">		AddNode(ArrayNodes);</span><br><span class="line">		AddNode(ArrayNodes);</span><br><span class="line">		InOrder(<span class="number">0</span>,ArrayNodes);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">AddNode</span><span class="params">(Integer[][] ArrayNodes)</span> {</span><br><span class="line">		System.out.println(<span class="string">"Enter the data"</span>);</span><br><span class="line">		Integer NodeData;</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">sca</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		NodeData = sca.nextInt();</span><br><span class="line">		<span class="keyword">if</span>(FreeNode&lt;=<span class="number">19</span>) {</span><br><span class="line">			ArrayNodes[FreeNode][<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">			ArrayNodes[FreeNode][<span class="number">1</span>] = NodeData;</span><br><span class="line">			ArrayNodes[FreeNode][<span class="number">2</span>] = -<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(RootPointer==-<span class="number">1</span>) {</span><br><span class="line">				RootPointer=<span class="number">0</span>;</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">else</span> {</span><br><span class="line">				Boolean placed=<span class="literal">false</span>;</span><br><span class="line">				Integer nownode=RootPointer;</span><br><span class="line">				<span class="keyword">while</span>(placed==<span class="literal">false</span>) {</span><br><span class="line">					<span class="keyword">if</span>(NodeData&lt;ArrayNodes[nownode][<span class="number">1</span>]) {</span><br><span class="line">						<span class="keyword">if</span>(ArrayNodes[nownode][<span class="number">0</span>]==-<span class="number">1</span>) {</span><br><span class="line">							ArrayNodes[nownode][<span class="number">0</span>]=FreeNode;</span><br><span class="line">							placed=<span class="literal">true</span>;</span><br><span class="line">						}</span><br><span class="line">						<span class="keyword">else</span> {</span><br><span class="line">							nownode=ArrayNodes[nownode][<span class="number">0</span>];</span><br><span class="line">						}</span><br><span class="line">					}</span><br><span class="line">					<span class="keyword">else</span> {</span><br><span class="line">						<span class="keyword">if</span>(ArrayNodes[nownode][<span class="number">2</span>]==-<span class="number">1</span>) {</span><br><span class="line">							ArrayNodes[nownode][<span class="number">2</span>]=FreeNode;</span><br><span class="line">							placed=<span class="literal">true</span>;</span><br><span class="line">						}</span><br><span class="line">						<span class="keyword">else</span> {</span><br><span class="line">							nownode=ArrayNodes[nownode][<span class="number">2</span>];</span><br><span class="line">						}</span><br><span class="line">					}</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">			FreeNode++;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			System.out.println(<span class="string">"Unable to add node, tree is full"</span>);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">PrintAll</span><span class="params">(Integer[][] ArrayNodes)</span> {</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;++i) {</span><br><span class="line">			System.out.println(ArrayNodes[i][<span class="number">0</span>]+<span class="string">" "</span>+ArrayNodes[i][<span class="number">1</span>]+<span class="string">" "</span>+ArrayNodes[i][<span class="number">2</span>]);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">InOrder</span><span class="params">(Integer nowNode,Integer[][] ArrayNodes)</span> {</span><br><span class="line">		<span class="keyword">if</span>(ArrayNodes[nowNode][<span class="number">0</span>]!=-<span class="number">1</span>) {</span><br><span class="line">		InOrder(ArrayNodes[nowNode][<span class="number">0</span>],ArrayNodes);</span><br><span class="line">		}</span><br><span class="line">		System.out.println(ArrayNodes[nowNode][<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">if</span>(ArrayNodes[nowNode][<span class="number">2</span>]!=-<span class="number">1</span>) {</span><br><span class="line">		InOrder(ArrayNodes[nowNode][<span class="number">2</span>],ArrayNodes);</span><br><span class="line">		}</span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="Y21-4"><a href="#Y21-4" class="headerlink" title="Y21-4"></a>Y21-4</h4><ul>
<li><strong>Q1</strong><ul>
<li><code>Insertion sort</code></li>
<li><code>Linear search</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">papei_9618_y21_4_Q1</span> {</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">		<span class="type">int</span>[] TheData = {<span class="number">20</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">99</span>,<span class="number">4</span>,<span class="number">26</span>,<span class="number">4</span>};</span><br><span class="line"><span class="comment">//		System.out.println("the data before sorting");</span></span><br><span class="line"><span class="comment">//		printContent(TheData);</span></span><br><span class="line"><span class="comment">//		InsertionSort(TheData);</span></span><br><span class="line"><span class="comment">//		System.out.println("the data after sorting");</span></span><br><span class="line"><span class="comment">//		printContent(TheData);</span></span><br><span class="line">		search(TheData);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">InsertionSort</span><span class="params">(<span class="type">int</span>[] TheData)</span> {</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> Count=<span class="number">1</span>;Count&lt;TheData.length;++Count) {</span><br><span class="line">			<span class="type">int</span> DataToInsert=TheData[Count];</span><br><span class="line">			<span class="type">int</span> Inserted=<span class="number">0</span>;</span><br><span class="line">			<span class="type">int</span> NextValue=Count-<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">while</span>(NextValue&gt;=<span class="number">0</span> &amp;&amp; Inserted!=<span class="number">1</span>) {</span><br><span class="line">				<span class="keyword">if</span>(DataToInsert&lt;TheData[NextValue]) {</span><br><span class="line">					TheData[NextValue+<span class="number">1</span>]=TheData[NextValue];</span><br><span class="line">					NextValue--;</span><br><span class="line">					TheData[NextValue+<span class="number">1</span>]=DataToInsert;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">else</span> {</span><br><span class="line">					Inserted=<span class="number">1</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printContent</span><span class="params">(<span class="type">int</span>[] TheData)</span> {</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;TheData.length;++i) {</span><br><span class="line">			System.out.print(<span class="string">"At index: "</span>+i+<span class="string">" :"</span>);</span><br><span class="line">			System.out.println(TheData[i]);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] TheData)</span> {</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">sca</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		System.out.println(<span class="string">"Input the data that you want to search:"</span>);</span><br><span class="line">		<span class="type">int</span> searchData=sca.nextInt();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;TheData.length;++i) {</span><br><span class="line">			<span class="keyword">if</span>(TheData[i]==searchData) {</span><br><span class="line">				System.out.println(<span class="string">"found"</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">		System.out.println(<span class="string">"not found"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><strong>Q2</strong><ul>
<li><code>Object Oriented Programming</code><ul>
<li><code>inheritance</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">papei_9618_y21_4_Q2</span> {</span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> boxNum;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">		HiddenBox[] TheBoxes=<span class="keyword">new</span> <span class="title class_">HiddenBox</span>[<span class="number">10000</span>];</span><br><span class="line">		NewBox(TheBoxes);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">NewBox</span><span class="params">(HiddenBox[] TheBoxes)</span> {</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">sca</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		System.out.println(<span class="string">"input name"</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sca.nextLine();</span><br><span class="line">		System.out.println(<span class="string">"input creator"</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">creator</span> <span class="operator">=</span> sca.nextLine();</span><br><span class="line">		System.out.println(<span class="string">"input datehidden"</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">datehidden</span> <span class="operator">=</span> sca.nextLine();</span><br><span class="line">		System.out.println(<span class="string">"input gamelocation"</span>);</span><br><span class="line">		String gamelocation=sca.nextLine();</span><br><span class="line">		TheBoxes[boxNum]=<span class="keyword">new</span> <span class="title class_">HiddenBox</span>(name, creator, datehidden, gamelocation);</span><br><span class="line">		boxNum++;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HiddenBox</span>{</span><br><span class="line">	<span class="keyword">private</span> String BoxName;</span><br><span class="line">	<span class="keyword">private</span> String Creator;</span><br><span class="line">	<span class="keyword">private</span> String DateHidden;</span><br><span class="line">	<span class="keyword">private</span> String GameLocation;</span><br><span class="line">	<span class="keyword">private</span> String[][] LastFinds;</span><br><span class="line">	<span class="keyword">private</span> Boolean Active;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">HiddenBox</span><span class="params">(String boxp,String creap,String datep,String gamep)</span> {</span><br><span class="line">		<span class="built_in">this</span>.BoxName=boxp;</span><br><span class="line">		<span class="built_in">this</span>.Creator=creap;</span><br><span class="line">		<span class="built_in">this</span>.DateHidden=datep;</span><br><span class="line">		<span class="built_in">this</span>.GameLocation=gamep;</span><br><span class="line">		<span class="built_in">this</span>.Active=<span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i) {</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;++j) {</span><br><span class="line">				<span class="built_in">this</span>.LastFinds[i][j]=<span class="string">""</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">GetBoxName</span><span class="params">()</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.BoxName;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">GetGameLocation</span><span class="params">()</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.GameLocation;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PuzzleBox</span> <span class="keyword">extends</span> <span class="title class_">HiddenBox</span>{</span><br><span class="line">	String PuzzleText;</span><br><span class="line">	String Solution;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">PuzzleBox</span><span class="params">(String name, String creator, String date, String location,String Puzzle,String solu)</span> {</span><br><span class="line">		<span class="built_in">super</span>(name,creator,date,location);</span><br><span class="line">		<span class="built_in">this</span>.PuzzleText=Puzzle;</span><br><span class="line">		<span class="built_in">this</span>.Solution= solu;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><strong>Q3</strong><ul>
<li><code>Queue</code></li>
<li><code>File handling</code></li>
<li><code>Exception handling</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">papei_9618_y21_4_Q3</span> {</span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> startPointer=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> endPointer=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">		String[] QueueData = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">20</span>];</span><br><span class="line">		<span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> ReadFile(QueueData);</span><br><span class="line">		<span class="keyword">if</span>(ans==-<span class="number">1</span>) {</span><br><span class="line">			System.out.println(<span class="string">"file not found"</span>);</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(ans==<span class="number">1</span>) {</span><br><span class="line">			System.out.println(<span class="string">"queue is full and not all data could be inserted"</span>);</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			System.out.println(<span class="string">"successfully added"</span>);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">Enqueue</span><span class="params">(String item,String[] QueueData)</span>{</span><br><span class="line">		<span class="keyword">if</span>(endPointer==<span class="number">20</span>) {</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			QueueData[endPointer]=item;</span><br><span class="line">			endPointer++;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">Remove</span><span class="params">(String[] QueueData)</span> {</span><br><span class="line">		<span class="keyword">if</span>(endPointer-startPointer&gt;<span class="number">1</span>) {</span><br><span class="line">			String ans=QueueData[startPointer]+<span class="string">" "</span>+QueueData[startPointer+<span class="number">1</span>];</span><br><span class="line">			startPointer+=<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">return</span> ans;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"No items"</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ReadFile</span><span class="params">(String[] QueueData)</span> {</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">sca</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		System.out.println(<span class="string">"input file name"</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> sca.nextLine();</span><br><span class="line">		<span class="type">File</span> <span class="variable">fi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">		<span class="keyword">if</span>(fi.exists()) {</span><br><span class="line">		<span class="keyword">try</span> {</span><br><span class="line">		<span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(fi);</span><br><span class="line">		<span class="type">BufferedReader</span> <span class="variable">bfr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br><span class="line">		String dataRead=bfr.readLine();</span><br><span class="line">		Boolean flag=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">while</span>(dataRead!=<span class="literal">null</span> &amp;&amp; flag) {</span><br><span class="line">			flag=Enqueue(dataRead, QueueData);</span><br><span class="line">			dataRead=bfr.readLine();</span><br><span class="line">		}</span><br><span class="line">		bfr.close();</span><br><span class="line">		fr.close();</span><br><span class="line">		<span class="keyword">if</span>(!flag) {</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">		}</span><br><span class="line">		}<span class="keyword">catch</span>(FileNotFoundException e) {</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		}<span class="keyword">catch</span>(IOException e) {</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		}</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="9608"><a href="#9608" class="headerlink" title="9608"></a><code>9608</code></h3><h4 id="S21-42"><a href="#S21-42" class="headerlink" title="S21-42"></a>S21-42</h4><ul>
<li><strong>Q4</strong><ul>
<li><code>circular queue</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">papei_9608_s21_42_Q4</span> {</span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> HeadIndex;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> TailIndex;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> NumberInQueue;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span>[] MyNumbers= <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        </span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">Enqueue</span><span class="params">(Integer DataToInsert)</span> {</span><br><span class="line">		<span class="keyword">if</span>(NumberInQueue&gt;<span class="number">9</span>) {</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			MyNumbers[TailIndex]=DataToInsert;</span><br><span class="line">			TailIndex=TailIndex+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(TailIndex&gt;<span class="number">9</span>) {</span><br><span class="line">				TailIndex=<span class="number">0</span>;</span><br><span class="line">			}</span><br><span class="line">			NumberInQueue+=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		}</span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">Dequeue</span><span class="params">()</span> {</span><br><span class="line">		<span class="keyword">if</span>(NumberInQueue==<span class="number">0</span>) {</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			Integer ans=MyNumbers[HeadIndex];</span><br><span class="line">			HeadIndex++;</span><br><span class="line">			<span class="keyword">if</span>(HeadIndex&gt;<span class="number">9</span>) {</span><br><span class="line">				HeadIndex=<span class="number">0</span>;</span><br><span class="line">			}</span><br><span class="line">			NumberInQueue--;</span><br><span class="line">			<span class="keyword">return</span> ans;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="S18-42"><a href="#S18-42" class="headerlink" title="S18-42"></a>S18-42</h4><ul>
<li><strong>Q5:</strong><ul>
<li><code>Object Oriented Programming</code><ul>
<li><code>inheritance</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">papei_9608_s18_41_Q5</span> {</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">		<span class="type">Scenery</span> <span class="variable">GiftBox</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scenery</span>(<span class="number">150</span>, <span class="number">150</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="string">"box.png"</span>, <span class="literal">true</span>, <span class="number">50</span>);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameElement</span>{</span><br><span class="line">	<span class="keyword">private</span> Integer PositionX;</span><br><span class="line">	<span class="keyword">private</span> Integer PositionY;</span><br><span class="line">	<span class="keyword">private</span> Integer Width;</span><br><span class="line">	<span class="keyword">private</span> Integer Height;</span><br><span class="line">	<span class="keyword">private</span> String ImageFilename;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">GameElement</span><span class="params">(Integer Posx, Integer PosY, Integer Wid, Integer Hei, String imgfn)</span> {</span><br><span class="line">		<span class="built_in">this</span>.PositionX=Posx;</span><br><span class="line">		<span class="built_in">this</span>.PositionY=PosY;</span><br><span class="line">		<span class="built_in">this</span>.Width=Wid;</span><br><span class="line">		<span class="built_in">this</span>.Height=Hei;</span><br><span class="line">		<span class="built_in">this</span>.ImageFilename=imgfn;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">GetDetails</span><span class="params">()</span> {</span><br><span class="line">		String message=<span class="string">"PositionX: "</span>+<span class="built_in">this</span>.PositionX+<span class="string">" PositionY: "</span>+<span class="built_in">this</span>.PositionY+<span class="string">" Width: "</span>+<span class="built_in">this</span>.Width+<span class="string">" Height: "</span>+<span class="built_in">this</span>.Height+<span class="string">" ImageFileName: "</span>+<span class="built_in">this</span>.ImageFilename;</span><br><span class="line">		<span class="keyword">return</span> message;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Scenery</span> <span class="keyword">extends</span> <span class="title class_">GameElement</span>{</span><br><span class="line">	<span class="keyword">private</span> Boolean CauseDamage;</span><br><span class="line">	<span class="keyword">private</span> Integer DamagePoints;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Scenery</span><span class="params">(Integer Posx, Integer PosY, Integer Wid, Integer Hei, String imgfn, Boolean Caus,Integer DamaP)</span> {</span><br><span class="line">		<span class="built_in">super</span>(Posx, PosY, Wid, Hei, imgfn);</span><br><span class="line">		<span class="built_in">this</span>.CauseDamage=Caus;</span><br><span class="line">		<span class="built_in">this</span>.DamagePoints=DamaP;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> Integer <span class="title function_">GiveDamagePoints</span><span class="params">()</span> {</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">this</span>.CauseDamage) {</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">this</span>.DamagePoints;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">GetScenery</span><span class="params">()</span> {</span><br><span class="line">		String message=<span class="built_in">super</span>.GetDetails()+<span class="string">" CauseDamage: "</span>+<span class="built_in">this</span>.CauseDamage+<span class="string">" DamagedPoints: "</span>+<span class="built_in">this</span>.DamagePoints;</span><br><span class="line">		<span class="keyword">return</span> message;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>





]]></content>
      <categories>
        <category>Notes</category>
        <category>ALCS</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML+CSS: Blinking Rhombus</title>
    <url>/WebDevelopment/Project/blinkingRhombus/</url>
    <content><![CDATA[<img src="https://media.giphy.com/media/RUI6VnZ1hQjWfYlcdz/giphy.gif" alt="blinking_rhombus" style="zoom:300%;">

<span id="more"></span> 

<h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>菱形加载动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loading"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a>style.css</h2><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>{</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="comment">/*place the content at the center, set body as flex container, thus the div element is the flex item*/</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">background</span>:  <span class="built_in">linear-gradient</span>(<span class="number">200deg</span>,<span class="number">#f4efef</span>,<span class="number">#e3eeff</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span>{</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="comment">/* grid display */</span></span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="comment">/* set the grid to be three columns per row */</span></span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>,<span class="number">1</span>fr);</span><br><span class="line">    <span class="comment">/* set the gap between grid items: both horizontally and vertically gap */</span></span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="comment">/* number the items for later use: nth-child() */</span></span><br><span class="line">    <span class="comment">/* counter-reset: number; */</span></span><br><span class="line">    <span class="comment">/* ctrl + shift / */</span></span><br><span class="line">    <span class="comment">/* rotate by 45 degrees */</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-tag">span</span>{</span><br><span class="line">    <span class="comment">/* user-defined property: grammar is `--` followed by name */</span></span><br><span class="line">    <span class="attr">--c</span>:red;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--c);</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">/* animation  name  duration   easing function  repeat */</span></span><br><span class="line">    <span class="attribute">animation</span>: blinking  <span class="number">2s</span> linear infinite;</span><br><span class="line">    <span class="comment">/* wait for a few sec */</span></span><br><span class="line">    <span class="attribute">animation-delay</span>: <span class="built_in">var</span>(--d);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-tag">span</span><span class="selector-pseudo">::before</span>{</span><br><span class="line">    <span class="comment">/* setting increasing number */</span></span><br><span class="line">    <span class="comment">/* counter-increment: number; */</span></span><br><span class="line">    <span class="comment">/*  */</span></span><br><span class="line">    <span class="comment">/* content:counter(number); */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">7</span>){</span><br><span class="line">    <span class="attr">--c</span>:<span class="number">#f15a5a</span>;</span><br><span class="line">    <span class="attr">--d</span>:<span class="number">0s</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>),</span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">8</span>){</span><br><span class="line">    <span class="attr">--c</span>:<span class="number">#f0c419</span>;</span><br><span class="line">    <span class="attr">--d</span>:<span class="number">0.2s</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>),</span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>),</span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">9</span>){</span><br><span class="line">    <span class="attr">--c</span>:<span class="number">#4eba6f</span>;</span><br><span class="line">    <span class="attr">--d</span>:<span class="number">0.4s</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>),</span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>){</span><br><span class="line">    <span class="attr">--c</span>:<span class="number">#2d95bf</span>;</span><br><span class="line">    <span class="attr">--d</span>:<span class="number">0.6s</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>){</span><br><span class="line">    <span class="attr">--c</span>:<span class="number">#955ba5</span>;</span><br><span class="line">    <span class="attr">--d</span>:<span class="number">0.8s</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> blinking {</span><br><span class="line">    <span class="number">0%</span>,<span class="number">100%</span>{</span><br><span class="line">        <span class="comment">/* scale(x,y) suggests the change in width and height*/</span></span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="number">40%</span>,<span class="number">80%</span>{</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>WebDevelopment</category>
        <category>Project</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>Chapter2_Communication</title>
    <url>/Notes/ASCS/Chapter2-Communication/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/02/04/u783haFtjUzSJLD.png" alt="Networks Including the Internet"></p>
<span id="more"></span>

<img src="https://s2.loli.net/2023/02/04/LaEJkOlqYBVjmvK.png" style="zoom: 67%;">

<h3 id="Networking-Devices"><a href="#Networking-Devices" class="headerlink" title="Networking Devices"></a>Networking Devices</h3><p><u>Benefits of networking devices:</u></p>
<ul>
<li>Devices, such as printers, can be shared.</li>
<li>Licences to run software on networks are often far cheaper than buying licences for an equivalent number of stand-alone computers.</li>
<li>Users can share files and data</li>
<li>Data and files can be backed up centrally at the end of each day</li>
<li>User can communicate using email and instant messaging</li>
<li>A network manager can oversee the network and, for example, apply access rights to certain files, or restrict access to external networks, such as the internet.</li>
<li><font color="#4a69bd">The employee’s computers are the clients</font></li>
<li><font color="#4a69bd">The server hosts the (shared) files</font></li>
<li><font color="#4a69bd">An employee can request a file from the server from any of the client computers</font></li>
<li><font color="#4a69bd">Several employee can access the same file at the same time. </font></li>
</ul>
<h3 id="LAN-amp-WAN"><a href="#LAN-amp-WAN" class="headerlink" title="LAN &amp; WAN"></a>LAN &amp; WAN</h3><p><strong>LAN</strong>(Local area network): network limited to one building or site. </p>
<ul>
<li><font color="#4a69bd">Device connected over a small geographical area</font></li>
<li><font color="#4a69bd">Uses a dedicated infrastructure// company-owned infrastructure</font></li>
</ul>
<p><strong>WAN</strong>(Wide area network): covers a wider distance.</p>
<ul>
<li>A number of LANs are joined together using a modem or router.</li>
<li>Eg: ATMs</li>
<li>Make use of public communication networks: telephone lines, satellite.</li>
</ul>
<h3 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h3><table>
<thead>
<tr>
<th></th>
<th><strong>Client-server</strong></th>
<th><strong>P2P</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Properties:</strong></td>
<td>· At least one computer used to be the “server”<br>· The other computers are the client<br>· Server provides services<br>    · Which may be requested by clients<br>· <strong>Examples</strong>: Email server, print server, File server, Web server, Proxy server</td>
<td>· Each nodes provides and receive service<br>· “look up computer”<br>· Peers to participate as equals</td>
</tr>
<tr>
<td><strong>Benefits:</strong></td>
<td>1. Different servers provide different services<br>2. Central storage of all files<br>3. Administration of critical info is centralized, more secure Internet monitoring<br>4. Intranet capability<br>5. Clients can be less powerful machine and less expensive to buy<br>6. Saving resources on server<br>7. reduces the burden on clients<br>8. Creation of security<br>9. Users need user name and password to access network.</td>
<td>1. No server required<br>2. Additional computer can join easily(no requirement for authenticate user) <br>3. Each computer can provide and receive resources</td>
</tr>
<tr>
<td><strong>Drawbacks:</strong></td>
<td>1. Set-up cost <br>2. Require specific OS<br>3. All user depend on server</td>
<td>1. De-centralized, hard to administrator<br>2. Easily attacked</td>
</tr>
<tr>
<td><strong>Reasons:</strong></td>
<td>1. Large user-base <br>2. Access to network resource needs to be properly controlled<br>3. Need for network security<br>4. Data needs to be backed up</td>
<td>1. The network of user is fairly small<br>2. No need for robust security<br>3. Workstation-based application rather than server-based</td>
</tr>
</tbody></table>
<h3 id="Thin-amp-Thick-Clients"><a href="#Thin-amp-Thick-Clients" class="headerlink" title="Thin&amp;Thick Clients"></a>Thin&amp;Thick Clients</h3><table>
<thead>
<tr>
<th></th>
<th><strong>Thin-client</strong></th>
<th><strong>Thick-client</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Benefits:</strong></td>
<td>1. Require few local resources<br>2. Server can offer protection<br>3. Easy to expand</td>
<td>1. Job can also be done without connection<br>2. Works under slow network<br>3. More customization<br>4. Store data on local resources such as HDD or SSD<br>5. More robust<br>6. Client have more control</td>
</tr>
<tr>
<td><strong>Drawbacks:</strong></td>
<td>1. Highly rely on server<br>2. Highly rely on good network<br>3. Start-up cost</td>
<td>1. Rely on local resources<br>2. Easily attacked<br>3. Synchronization<br>4. Data integrity issues<br>5. Need to update data and software individually<br>6. Less secure</td>
</tr>
<tr>
<td><strong>Differences:</strong></td>
<td>· Relies on a connection to a remote server or computer for it to work<br>· Requires very few local resources<br>· Relies on good, stable, and fast network connection for it to work<br> · Data is stored on a remote     server</td>
<td>· Can run some of the features of the software even when not connected to the server<br>· Relies heavily on local resources (SSD, HDD, RAM, processing time)<br>· More tolerant of a slow network connection<br>·Data is stored on local resources such as HDD and SSD.</td>
</tr>
</tbody></table>
<h3 id="Topologies"><a href="#Topologies" class="headerlink" title="Topologies"></a>Topologies</h3><h4 id="Star-star2"><a href="#Star-star2" class="headerlink" title="Star:star2:"></a>Star<span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><blockquote>
<p>uses a central hub/switch and each computer/devices in connected to the hub/switch.</p>
</blockquote>
<blockquote>
<p><strong>Hub</strong>: Packets will be send to every device<br><strong>Switch</strong>: Packets will only be send to the node where the recipient address matches.</p>
</blockquote>
<ul>
<li>Packets has address of the recipient</li>
<li>Sender transmits packets directly to the server</li>
<li>Server reads the address and identifies where recipient is</li>
<li>Server transmit packets directly to the recipient</li>
<li>Server transmit packets only to the recipient</li>
</ul>
<h5 id="Pros"><a href="#Pros" class="headerlink" title="Pros"></a>Pros</h5><ol>
<li>Less data collision</li>
<li>More secure</li>
<li>Node doesn’t effect others</li>
</ol>
<h5 id="Cons"><a href="#Cons" class="headerlink" title="Cons"></a>Cons</h5><ol>
<li>Set-up cost</li>
<li>Central hub effects all</li>
</ol>
<h4 id="Bus-bus"><a href="#Bus-bus" class="headerlink" title="Bus :bus:"></a>Bus <span class="github-emoji"><span>🚌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><blockquote>
<p>uses a sigle central cable to which all computers and devices are connected. </p>
</blockquote>
<ul>
<li>Packets pass through every node</li>
<li>Each node looks at each packet and determines whether or not the address of recipient in the package match the node address</li>
<li>If so, the node accept the package.</li>
<li>If not, the package is ignored.</li>
</ul>
<p>Suitable for a small company or an office environment. (light traffic occurring)</p>
<h5 id="Pros-1"><a href="#Pros-1" class="headerlink" title="Pros"></a>Pros</h5><ol>
<li>Node doesn’t effect others</li>
<li>Easy to connect new nodes</li>
</ol>
<h5 id="Cons-1"><a href="#Cons-1" class="headerlink" title="Cons"></a>Cons</h5><ol>
<li>Less secure</li>
<li>Heavy traffic</li>
<li>Main cable effects all</li>
</ol>
<h4 id="Mesh"><a href="#Mesh" class="headerlink" title="Mesh"></a>Mesh</h4><ul>
<li><p><strong>Routing</strong>: by giving the nodes routing logic, so that data/packets is directed to its destination by the shortest route.</p>
</li>
<li><p><strong>Flooding</strong>: simple send to all the nodes</p>
</li>
</ul>
<h5 id="Pros-2"><a href="#Pros-2" class="headerlink" title="Pros"></a>Pros</h5><ul>
<li>Failed link doesn’t affect other parts</li>
<li>Secure</li>
</ul>
<h5 id="Cons-2"><a href="#Cons-2" class="headerlink" title="Cons"></a>Cons</h5><ol>
<li>Hard to maintain</li>
<li>Need lots of cable</li>
</ol>
<h4 id="Hybrid"><a href="#Hybrid" class="headerlink" title="Hybrid"></a>Hybrid</h4><h5 id="Pro"><a href="#Pro" class="headerlink" title="Pro"></a>Pro</h5><ul>
<li>Could have all the pros above</li>
</ul>
<h5 id="Cons-3"><a href="#Cons-3" class="headerlink" title="Cons"></a>Cons</h5><ul>
<li>Try to minimize the cost above</li>
</ul>
<h3 id="Cloud"><a href="#Cloud" class="headerlink" title="Cloud"></a>Cloud</h3><blockquote>
<p>a method of data storage where data is stored on offsite servers - the physical storage covers hundreds of servers in many locations. </p>
</blockquote>
<blockquote>
<p><strong>Public cloud</strong>: a storage environment where the customer/client and cloud storage provider are different companies</p>
<p><strong>Private cloud</strong>: a storage provided by a dedicated environment behind a company firewall. Customer/client and cloud storage provider are integrated and operate as a single entity.</p>
</blockquote>
<p><u><strong>Pros:</strong></u></p>
<ol>
<li>No need to carry an external storage device</li>
<li>Recovers data when hard disk failure happens</li>
<li>Almost unlimited storage capacity</li>
<li>Access data any time and place with internet connection</li>
</ol>
<p><u><strong>Cons:</strong></u></p>
<ol>
<li>Accessing problem under slow or unstable internet connection</li>
<li>Costs can be high</li>
<li>Limits with internet service provider (ISP)</li>
<li>Potential failure of the cloud storage company</li>
</ol>
<h3 id="Wired-and-Wireless-networking"><a href="#Wired-and-Wireless-networking" class="headerlink" title="Wired and Wireless networking"></a>Wired and Wireless networking</h3><ul>
<li><p>Wireless: Wi-Fi and Bluetooth.</p>
</li>
<li><ul>
<li>Spread spectrum frequency hopping: If a channel is already being used, it randomly picks another      channel. </li>
<li>Wi-Fi offers much faster data transfer rates, better range and better security.</li>
</ul>
</li>
<li><p>Use of <strong>satellite</strong>: the curvature of the earth prevents the use of microwaves/radio waves transmitting data globally. To overcome this problem, we need to adopt satellite technology.</p>
</li>
</ul>
<h4 id="Wired"><a href="#Wired" class="headerlink" title="Wired"></a>Wired</h4><ul>
<li>More reliable and stable network</li>
<li>Data transfer rate tend to be faster</li>
<li>Tends to be cheaper overall</li>
<li>Devices are not mobile</li>
<li>Lots of wires can lead to tripping hazards.</li>
</ul>
<h4 id="Wireless"><a href="#Wireless" class="headerlink" title="Wireless"></a>Wireless</h4><ul>
<li>It is easier to expand networks and is not necessary to connect devices using cables</li>
<li>Devices have increased mobility</li>
<li>Increased chance of interference from external sources</li>
<li>Data is less secure than with wired systems</li>
<li>Data transmission rate is slower than wired networks</li>
<li>Signals can be stopped by thick walls.</li>
<li>Different types of device can be connected at the same time</li>
</ul>
<h4 id="Twisted-pair"><a href="#Twisted-pair" class="headerlink" title="Twisted pair"></a>Twisted pair</h4><ul>
<li>Usage: Telephone, LANs</li>
<li>Capacity: Lower bandwidth than fibre optic </li>
<li>Larger and heavier cables than FO for similar data capacity</li>
</ul>
<h4 id="Fibre-optic"><a href="#Fibre-optic" class="headerlink" title="Fibre optic:"></a>Fibre optic:</h4><blockquote>
<p>Transmits data as light; uses a glass/plastic thread to transmit data.</p>
</blockquote>
<ul>
<li><p>High-speed network Asynchronous Transfer mode (ATM) and long cable runs.</p>
</li>
<li><p>Faster data transmission</p>
</li>
<li><p>More stable</p>
</li>
<li><p>Greater bandwidth</p>
</li>
<li><p>Need less signal boosting/ can travel over longer distances</p>
</li>
<li><p>Greater security / more difficult to hack</p>
</li>
<li><p>Lighter in weight</p>
</li>
<li><p>Less interference in signal</p>
</li>
<li><p>Trained personnel needed to install</p>
</li>
<li><p>Expensive</p>
</li>
<li><p>Difficult to terminate</p>
</li>
<li><p>Break when bent</p>
</li>
<li><p>Only transmits data in one direction</p>
</li>
<li><p>If a fibre-optic cable connection fails, more services can be affected.</p>
</li>
</ul>
<h4 id="Copper-cable-use-of-existing-telephone-network"><a href="#Copper-cable-use-of-existing-telephone-network" class="headerlink" title="Copper cable: use of existing telephone network"></a>Copper cable: use of existing telephone network</h4><p>Carries data as electrical signals and can consist of a twisted pair. </p>
<ul>
<li>Less expensive overall</li>
<li>Easier to install because it is more flexible</li>
<li>Easier to make terminations using copper cabling </li>
<li>The expertise in use of copper cabling is more extensive</li>
</ul>
<h4 id="Radio-waves"><a href="#Radio-waves" class="headerlink" title="Radio waves"></a>Radio waves</h4><ul>
<li>Carries data wirelessly, often known as Wi-Fi.</li>
<li>Carries data in the form of electromagnetic wave</li>
</ul>
<h4 id="Satellite"><a href="#Satellite" class="headerlink" title="Satellite"></a>Satellite</h4><ul>
<li>A communication device in Earth’s orbit that receives and transmits data.</li>
<li>Due to curvature of the earth. </li>
<li>Antenna to Satellite </li>
<li>Signal boosted by the satellite</li>
</ul>
<h3 id="Hardware-for-LAN"><a href="#Hardware-for-LAN" class="headerlink" title="Hardware for LAN"></a>Hardware for LAN</h3><blockquote>
<p><strong>Network interface card(NIC):</strong></p>
<ul>
<li>Unique physical address –  MAC address</li>
<li>Needed to allow a device to connect to a network</li>
</ul>
<p><strong>Wireless Access points(WAPs)</strong></p>
<ul>
<li>Allows a device to access LAN without a wired connection</li>
<li>Forms WLAN</li>
<li>Allows Wi-Fi devices to connect to a wired network</li>
</ul>
<p><strong>Wireless network interface card</strong></p>
<ul>
<li>Allowing devices to connect to the LAN via radio communication</li>
<li>… instead of using cable</li>
<li>… easy to move a device to different location</li>
</ul>
<p><strong>Hubs:</strong></p>
<ul>
<li>Centre of a star topology</li>
<li>Broadcast to all</li>
<li>One hub connected to another hub</li>
<li>Built in broad band modem - connection to the internet</li>
</ul>
<p><strong>Switch:</strong></p>
<ul>
<li>Function as a hub</li>
<li>Connect a number of devices together to form an LAN</li>
<li>MAC address</li>
<li>More intelligent - store addresses of connected devices</li>
<li>Unicast</li>
<li>Reduces network traffic</li>
</ul>
<p><strong>Gateway</strong></p>
<ul>
<li><p>Capable of connecting two dissimilar networks. Connect a LAN to a WAN.</p>
</li>
<li><p>A device used between two dissimilar LANs. The device is required to convert data packets from one protocol to another</p>
</li>
<li><p>Can connect two networks with different protocols</p>
</li>
<li><p>Gateway can also act as firewall or server.</p>
</li>
</ul>
<p><strong>Router</strong></p>
<ul>
<li>Most Intelligent - takes decision to forward the received transmission</li>
<li>May function as a gateway or NAT box.</li>
<li>Forward packets of data from one network to another; routers read each incoming packet of data and decide where to forward the packet.</li>
<li>Can route traffic from one network to another network</li>
<li>Can be used to join LANs to form a WAN and also connect a number of LANs to the internet</li>
<li>Offer additional features such as dynamic routing.</li>
<li>Connects two networks with the same protocol.</li>
<li>Transmit data between the servers and the internet</li>
<li>Connect devices/servers to the internet</li>
</ul>
<p><strong>Modem</strong></p>
<ul>
<li>Converts between digital data and analogue data</li>
<li>To connect the servers to the internet over a telephone line</li>
</ul>
<p><strong>Repeater</strong>: boost the signal so it can travel greater distance.</p>
<p><strong>Bridge</strong>: connect one LAN to another LAN that uses the same protocol. </p>
<p><strong>Server</strong>: a device or software that provides a specific function for computers using a network. The most common examples handle printing, file storage, and the delivery of web pages.</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>Router</th>
<th>Gateway</th>
</tr>
</thead>
<tbody><tr>
<td>Differences</td>
<td>· Forward packets of data from one network to another; read each incoming packets of data and decide (using IP address)<br>· Route traffic from one network to another network<br>· Can be used to join LANs together to form a WAN; connect a number of LANs to the internet<br>· Offers additional features     such as dynamic routing<br>· Connects two or more networks<br>· Assign private IP address<br>· Can be used to segment a network</td>
<td>· Convert one protocol to another protocol used in a different network<br>· Convert data packets from one protocol to another <br>· Translate from one protocol to another<br>· Do not support dynamic routing<br>· Can connect a network to WAN // act as single access point<br>· Assigns private IP address</td>
</tr>
<tr>
<td>Similarities</td>
<td>Both regulate network traffic between two network</td>
<td>Both receives packets from one network and forward it to another.</td>
</tr>
</tbody></table>
<h3 id="Ethernet"><a href="#Ethernet" class="headerlink" title="Ethernet"></a>Ethernet</h3><ul>
<li>A protocol used by many wired LANs. </li>
<li>Adopted by IEEE</li>
<li>Made up of:<ul>
<li>A node</li>
<li>A medium</li>
<li>Frame</li>
</ul>
</li>
<li>Collisions<ul>
<li>Two messages using the same data channel could be sent at the same time, leading to a collision.</li>
<li>Carrier sense multiple access with collision detection (CSMA/CD): define the random time period  for a device to wait before trying again.</li>
</ul>
</li>
</ul>
<p>When a frame is sent it causes a voltage change on the Ethernet cable. When a collision is detected, a node stops transmitting a frame and transmits a ‘jam’ signal and then waits for a random time interval before trying to resend the frame.</p>
<h4 id="CSMA-x2F-CD"><a href="#CSMA-x2F-CD" class="headerlink" title="CSMA/CD"></a>CSMA/CD</h4><ul>
<li><p>Workstations listen to the communication channel</p>
</li>
<li><p>If no data is being transmitted, the computer can send its data</p>
</li>
<li><p>Collision caused when 2 devices transmit at the same time</p>
</li>
<li><p>If collision occurs, each workstation waits a random time</p>
</li>
<li><p>… before retransmitting</p>
</li>
<li><p>Each time a collision occurs, random time is increased.</p>
</li>
<li><p><code>--</code></p>
</li>
<li><p>Carrier sense multiple access with collision detection</p>
</li>
<li><p>Before transmitting a device checks if the channel is busy</p>
</li>
<li><p>If it is busy the device waits // if channel is free data is sent</p>
</li>
<li><p>When transmission begins the device listens for other devices also beginning transmission</p>
</li>
<li><p>If there’s a collision, transmission is aborted</p>
</li>
<li><p>Both devices wait a random time, then try again</p>
</li>
</ul>
<h3 id="Bit-streaming"><a href="#Bit-streaming" class="headerlink" title="Bit streaming"></a>Bit streaming</h3><ul>
<li><p><font color="#4a69bd">Sequence of digital signals</font></p>
</li>
<li><p><font color="#4a69bd">Over a communication path / internet</font></p>
</li>
<li><p><font color="#4a69bd">Transfer data at high speed</font></p>
</li>
<li><p><font color="#4a69bd">Requires fast broadband connection</font></p>
</li>
<li><p><font color="#4a69bd">Requires some form of buffering</font></p>
</li>
<li><p><font color="#4a69bd">Bits arrive in the same order as sent</font></p>
</li>
<li><p><code>--</code></p>
</li>
<li><p><font color="#4a69bd">The data is compressed before transmission </font></p>
</li>
<li><p><font color="#4a69bd">Data is transmitted continuously as a series of bits</font></p>
</li>
<li><p><font color="#4a69bd">Video hosted on a media server</font></p>
</li>
<li><p><font color="#4a69bd">On download, the server sends data to the buffer on the client computer</font></p>
</li>
<li><p><font color="#4a69bd">The recipient receives bit streams from the buffer. </font></p>
</li>
</ul>
<h4 id="On-demand-bit-streaming"><a href="#On-demand-bit-streaming" class="headerlink" title="On-demand bit streaming"></a><u>On-demand bit streaming</u></h4><ul>
<li><font color="#4a69bd">Digital video tape/ digital files are converted to bit streaming format for broadcast on the net; this is known as encoding, these encoded streaming video files are then uploaded to a dedicated server.</font></li>
<li><font color="#4a69bd">A link for the encoded video is placed on the website</font></li>
<li><font color="#4a69bd">A user clicks on the link to download the encoded streaming video</font></li>
<li><font color="#4a69bd">Then broadcast to the user when they require it</font></li>
<li><font color="#4a69bd">Can be paused/ go back and rewatch/ fast-forward.</font></li>
</ul>
<p><u>How is it possible for on-demand to not pause?</u></p>
<ul>
<li><font color="#4a69bd">User needs high speed broadband</font></li>
<li><font color="#4a69bd">Data is streamed to a buffer</font></li>
<li><font color="#4a69bd">Buffering stops video pausing as bits streamed</font></li>
<li><font color="#4a69bd">As buffer is emptied, it fills up again so that viewing is continuous</font></li>
</ul>
<h4 id="Real-time-bit-streaming"><a href="#Real-time-bit-streaming" class="headerlink" title="Real-time bit streaming"></a>Real-time bit streaming</h4><ul>
<li>An event is captured live with a video camera</li>
<li>The video camera is connected to a computer </li>
<li>The video signal is converted to streaming media files on the computer </li>
<li>Encoded feed is then uploaded from the computer to a dedicated streaming server. </li>
<li>The server sends the encoded live videos to all users requesting it as real-time video.</li>
<li>Cannot be paused.</li>
</ul>
<p><strong>Issue:</strong></p>
<ol>
<li>Bandwidth</li>
<li>Security</li>
<li>Copyright</li>
</ol>
<h4 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h4><ul>
<li>No need to wait for the whole film to be downloaded</li>
<li>No need to store large files on user’s computer</li>
<li>Allows on demand play back</li>
<li>No specialist software is required for playback</li>
</ul>
<h4 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h4><ul>
<li>Video stop if very slow internet</li>
<li>Video stop if inadequate buffering capacity</li>
<li>Loss of internet means can’t access films</li>
<li>May require specific software to run the films</li>
<li>Viruses can be downloaded from the website</li>
</ul>
<p><u>Bit streaming to send video:</u></p>
<ul>
<li><font color="#4a69bd">The data is compressed before transmitting.</font></li>
<li><font color="#4a69bd">The video is transmitted continuously as a series of bits.</font></li>
<li><font color="#4a69bd">The video is hosted on a media server.</font></li>
<li><font color="#4a69bd">The server sends the data to a buffer on the client computers.</font></li>
<li><font color="#4a69bd">The user’s software receives the bit stream from the buffer. </font></li>
</ul>
<h3 id="Difference-between-WWW-and-internet"><a href="#Difference-between-WWW-and-internet" class="headerlink" title="Difference between WWW and internet"></a>Difference between WWW and internet</h3><table>
<thead>
<tr>
<th><strong>Internet</strong></th>
<th><strong>World wide web</strong></th>
</tr>
</thead>
<tbody><tr>
<td>· A massive network of networks<br>· Interconnected network    <br>· Makes use of transmission control protocol(TCP)/ internet protocol(IP)</td>
<td>· Collection of multimedia web pages and other documents<br>    ·  … which are stored on websites   <br>· Https protocols are written using HTML(hypertext mark-up language)<br>· Uniform Resource Locators(URLs) specify the location of all web pages <br>· Web resources are accessed by web browsers<br>· The WWW uses the internet to access information from servers and other computers.</td>
</tr>
</tbody></table>
<h3 id="Hardware-for-the-internet"><a href="#Hardware-for-the-internet" class="headerlink" title="Hardware for the internet"></a>Hardware for the internet</h3><h4 id="Modem"><a href="#Modem" class="headerlink" title="Modem"></a>Modem</h4><ul>
<li>A device that converts digital data to analogue data; </li>
<li>Converts analogue data to digital data</li>
</ul>
<h4 id="Public-switched-telephone-network-PSTN"><a href="#Public-switched-telephone-network-PSTN" class="headerlink" title="Public switched telephone network(PSTN)"></a>Public switched telephone network(PSTN)</h4><ul>
<li>Consists of many different communication lines. </li>
<li>Data is transmitted at both direction at the same time</li>
<li>The communication passes through different switching centres</li>
<li>Connect computers/devices and LANs between towns and cities.</li>
</ul>
<h4 id="Dedicated-Lines"><a href="#Dedicated-Lines" class="headerlink" title="Dedicated Lines"></a>Dedicated Lines</h4><ul>
<li>Connection that is only use for that business/organization</li>
</ul>
<h5 id="Benefits-1"><a href="#Benefits-1" class="headerlink" title="Benefits"></a><u>Benefits</u></h5><ul>
<li>Faster data transmission</li>
<li>Improved security</li>
<li>Consistent transmission speed</li>
</ul>
<h5 id="Drawbacks"><a href="#Drawbacks" class="headerlink" title="Drawbacks"></a><u>Drawbacks</u></h5><ul>
<li>Expensive set up</li>
<li>Disruption to the dedicated lines would leave no alternative</li>
</ul>
<h4 id="Cell-phone-network"><a href="#Cell-phone-network" class="headerlink" title="Cell phone network"></a>Cell phone network</h4><ul>
<li>Send data to cell towers over mobile connection</li>
</ul>
<h4 id="Satellite-1"><a href="#Satellite-1" class="headerlink" title="Satellite"></a>Satellite</h4><ul>
<li>Send data to satellites in orbit</li>
</ul>
<h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><h4 id="IP-address"><a href="#IP-address" class="headerlink" title="IP address:"></a>IP address:</h4><ul>
<li>Gives each device on a network an identifier // used to locate a device on a network</li>
<li>Each address is unique within the network</li>
<li>Allows a device/gateway/node to send data to the correct destination</li>
</ul>
<h4 id="IP-format"><a href="#IP-format" class="headerlink" title="IP format:"></a>IP format:</h4><ul>
<li>Composed of four integers</li>
<li>Each in the range 0-255</li>
<li>Each stored in 8 bits; 32 bits in total</li>
<li>Separated into network ID and host ID.</li>
</ul>
<p><strong>IPV4:</strong></p>
<ul>
<li>Four numbers separated with <code>.</code></li>
<li>Each number range from 0 to 255</li>
<li>32 bits long</li>
</ul>
<p><u>Why the router has both a private and public IP address:</u></p>
<ul>
<li>The router needs a public IP address so it can be identified on the internet.</li>
<li>The router needs a private IP address so that it can be identified on the home network</li>
<li>The router has a public IP and a private IP address so that it can route data between the two networks.</li>
</ul>
<p><u>Why no public IP address:</u></p>
<ul>
<li>Improved security because the IP address is not visible/accessible outside the     network.</li>
<li>An internet presence is not required for each employee computer.</li>
<li>Only the router needs a public Ip address.</li>
<li>Reduces the number of public IP address needed.</li>
<li>All data from the internet must be transmitted via the router.</li>
</ul>
<p><u>Why do laptop has IP address:</u></p>
<ul>
<li>To identify the laptop on the home network.</li>
<li>To allow the router to send data to the laptop from the internet or other devices on the home network.</li>
</ul>
<table>
<thead>
<tr>
<th>Public IP address</th>
<th>Private IP address</th>
</tr>
</thead>
<tbody><tr>
<td>the ones allocated by a user’s ISP to identify the location of their device</td>
<td>are reserved for internal use behind a router or other NAT device</td>
</tr>
<tr>
<td></td>
<td><img src="https://s2.loli.net/2023/02/04/pCs65dykPt8aGfO.png" alt="Private IP range"></td>
</tr>
<tr>
<td>· Public address can be reached across the internet<br>· Public addresses are provided by ISP(internet service provider/ assigned by interNIC)<br>· Public addresses are unique (to the internet)</td>
<td>· Private address can only be reached internally through the LAN/intranet<br>· NAT(network address translation) is necessary for a private IP address to access the internet directly. <br>· A private address is more secure than a public IP address <br>· A private address is assigned by the router of the network connected<br>· Private addresses are only unique within their network, can be duplicated within other networks.</td>
</tr>
<tr>
<td><strong>Static IP address:</strong></td>
<td><strong>Dynamic IP address:</strong></td>
</tr>
<tr>
<td>· When a computer disconnects and re-joins a network<br>·     … the address does not change<br>· Assigned by ISP<br>· The DNS does not need updating<br>· Which might be delayed causing ‘address not found’ errors. <br>· The web server may be accessed directly just using IP address.</td>
<td>· Each time the computer re-joins a network<br>       · … the address changes<br>· Address is assigned by the network OS</td>
</tr>
</tbody></table>
<img src="F:\hexocode\source\_posts\Chapter2-Communication\IPQues.png" alt="Past paper question" style="zoom:67%;">

<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p><strong>DNS(Domain Name System):</strong> - DNS is a hierarchical distributed database installed on domain name servers that is responsible for mapping a domain name to an IP address.</p>
<p><strong>Domain</strong> - This is a section of the internet operated by an authority.</p>
<p><strong>Uniform Resources Locator (URL):</strong> or website address is an address to reference resources on the Internet. </p>
<p><strong>HTTP(Hypertext Transfer Protocol):</strong> - protocol for data communication of the web. It determines how message are formatted , transmitted, and the actions web servers and browsers should take in response to commands. </p>
<ol>
<li>The browser requests the web page</li>
<li>The server access the web page</li>
<li>The server processes/executes the code</li>
<li>The server produce an html</li>
<li>The server returns the html to the client</li>
<li>The browser display the webpage.</li>
</ol>
<p><img src="https://s2.loli.net/2023/02/04/mH4YiXD7uUewopq.png"></p>
]]></content>
      <categories>
        <category>Notes</category>
        <category>ASCS</category>
      </categories>
  </entry>
  <entry>
    <title>Chapter 20.2: File processing and Exception Handling</title>
    <url>/Notes/ALCS/Chapter20.2_FileProcessingAndExceptionHandling/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/02/04/H4MaU9whQV8zvku.png"></p>
<hr>
<span id="more"></span> 

<h2 id="File-Processing"><a href="#File-Processing" class="headerlink" title="File Processing"></a>File Processing</h2><h3 id="Pseudocode"><a href="#Pseudocode" class="headerlink" title="Pseudocode"></a>Pseudocode</h3><h3 id="Program-code"><a href="#Program-code" class="headerlink" title="Program code"></a>Program code</h3><hr>
<h4 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a><code>Scanner</code></h4><blockquote>
<p>API: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html">https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html</a></p>
</blockquote>
<p><code>Scanner</code>和其他读入的一个不同点就是他是存在于<code>java.util</code>包下面的 而其他大多数是在<code>java.io</code>包下面。</p>
<p>有一个好处就是<code>scanner.hasNext</code>可以用来检查文件是否读完</p>
<p><strong>Declaration/construction</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sca1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//从console输入</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sca2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"SamuelJie.txt"</span>));<span class="comment">//can be used to read a file</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sca3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="string">"Samuel is a hardworking boy"</span>);<span class="comment">//can read a string</span></span><br><span class="line"><span class="comment">//then you can carry out other operations</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sca1.nextInt();</span><br></pre></td></tr></tbody></table></figure>

<p><strong>Methods:</strong></p>
<p>A <code>Scanner</code> breaks its input into tokens using a delimiter pattern, which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various <code>next</code> methods.</p>
<p>简单来说 被空格、换行符所分割的 每一个部分 都算一个<code>token</code> 比如<code>"1 2 3  Samuel"</code> 中 <code>1</code>，<code>2</code>，<code>3</code>，<code>"Samuel"</code>都算<code>token</code>. <code>1</code> 可以用<code>nextInt()</code> 来读取, <code>"Samuel"</code>可以用 <code>next()</code>来读取。</p>
<ul>
<li><code>hasNext()</code><ul>
<li>Returns true if this scanner has another token in its input.</li>
</ul>
</li>
<li><code>next()</code><ul>
<li>Finds and returns the next complete token from this scanner.</li>
</ul>
</li>
<li><code>nextLine()</code><ul>
<li>Advances this scanner past the current line and returns the input that was skipped.</li>
</ul>
</li>
<li><code>nextInt()</code><ul>
<li>Scans the next token of the input as an <code>int</code>.</li>
</ul>
</li>
</ul>
<p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://www.cnblogs.com/alterwl/p/java-problem-scanner-nosuchelementexception.html">使用scanner中遇到的nosuchfileException</a></p>
<p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://blog.csdn.net/guanghuichenshao/article/details/81545450">nextLine和next的区别</a></p>
<p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://www.geeksforgeeks.org/why-is-scanner-skipping-nextline-after-use-of-other-next-functions/">next– 与nextline连用时出现读取空白的问题</a></p>
<hr>
<h4 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a><code>FileReader</code></h4><blockquote>
<p>API: <a href="https://docs.oracle.com/javase/8/docs/api/java/io/FileReader.html">https://docs.oracle.com/javase/8/docs/api/java/io/FileReader.html</a></p>
</blockquote>
<p>通常在考试中FileReader都是作为创建BufferedReader的一个前置来使用。</p>
<p><strong>Declaration/construction</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">FileReader(File file);<span class="comment">//can construct with a file</span></span><br><span class="line">FileReader(String Filename);<span class="comment">//can construct with the filename</span></span><br><span class="line"><span class="comment">//for example</span></span><br><span class="line">String fileName=<span class="string">"input.txt"</span>;</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(filename);</span><br></pre></td></tr></tbody></table></figure>

<hr>
<h4 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a><code>BufferedReader</code></h4><blockquote>
<p>API: <a href="https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html">https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html</a></p>
</blockquote>
<p>Buffered Reader 相对于 传统Reader的好处就是 当读入一个文件的时候 能够先把文件的内容存在Buffer(缓存)里面 然后每次从Buffer里面读取，这样比传统Reader直接从文件里读取更加高效</p>
<p><strong>Declaration/construction</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">fi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(fi);</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">bfr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br></pre></td></tr></tbody></table></figure>

<p><strong>Methods(考试会用到的):</strong></p>
<p><code>readLine()</code>: Reads a line of text. A line is considered to be terminated by any one of a line feed (‘\n’), a carriage return (‘\r’), or a carriage return followed immediately by a linefeed.</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">readLine</span><span class="params">()</span></span><br><span class="line"><span class="comment">//Usage</span></span><br><span class="line"><span class="type">String</span> <span class="variable">dataRead</span> <span class="operator">=</span> bfr.readLine();<span class="comment">//bfr is the BufferedReader declared previously</span></span><br></pre></td></tr></tbody></table></figure>

<hr>
<h4 id="RandomAccessFile"><a href="#RandomAccessFile" class="headerlink" title="RandomAccessFile"></a><code>RandomAccessFile</code></h4><blockquote>
<p>API: <a href="https://docs.oracle.com/javase/8/docs/api/java/io/RandomAccessFile.html">https://docs.oracle.com/javase/8/docs/api/java/io/RandomAccessFile.html</a></p>
</blockquote>
<p>Instances of this class support both reading and writing to a random access file. A random access file behaves like a large array of bytes stored in the file system. There is a kind of cursor, or index into the implied array, called the <code>file pointer</code>; input operations read bytes starting at the file pointer and advance the file pointer past the bytes read. If the random access file is created in read/write mode, then output operations are also available; output operations write bytes starting at the file pointer and advance the file pointer past the bytes written. Output operations that write past the current end of the implied array cause the array to be extended. The file pointer can be read by the <code>getFilePointer</code> method and set by the <code>seek</code> method.</p>
<table>
<thead>
<tr>
<th>Data type</th>
<th>Size</th>
</tr>
</thead>
<tbody><tr>
<td><code>byte</code></td>
<td>1 byte</td>
</tr>
<tr>
<td><code>short</code></td>
<td>2 bytes</td>
</tr>
<tr>
<td><code>int</code></td>
<td>4 bytes</td>
</tr>
<tr>
<td><code>long</code></td>
<td>8 bytes</td>
</tr>
<tr>
<td><code>float</code></td>
<td>4 bytes</td>
</tr>
<tr>
<td><code>double</code></td>
<td>8 bytes</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td>1 <strong>bit</strong></td>
</tr>
<tr>
<td><code>char</code></td>
<td>2 bytes</td>
</tr>
</tbody></table>
<p><strong>Declaration/construction</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">RandomAccessFile(File file, String mode);</span><br><span class="line">RandomAccessFile(String fileName, String mode);</span><br></pre></td></tr></tbody></table></figure>

<p><strong><code>mode</code></strong></p>
<p><code>mode</code>本质上就是读写模式，像是pseudocode 中 OPENFILE <code>&lt;file Name&gt;</code> FOR <code>&lt;File mode&gt;</code>中的 <code>&lt;File mode&gt;</code>一样。</p>
<ul>
<li><code>"r"</code> open for read only.</li>
<li><code>"rw"</code>open for read and write</li>
</ul>
<p><strong>Methods(考试会用到的)</strong></p>
<ul>
<li><code>read()</code><ul>
<li>Reads a byte of data from this file.</li>
</ul>
</li>
<li><code>readBoolean()</code><ul>
<li>Reads a <code>boolean</code> from this file.</li>
</ul>
</li>
<li><code>readByte()</code><ul>
<li>Reads a signed eight-bit value from this file.</li>
</ul>
</li>
<li><code>readChar()</code><ul>
<li>Reads a character from this file.</li>
</ul>
</li>
<li><code>readDouble()</code><ul>
<li>Reads a <code>double</code> from this file.</li>
</ul>
</li>
<li><code>readInt()</code></li>
<li><code>readUTF()</code></li>
<li><code>seek(long pos)</code><ul>
<li>Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs.</li>
<li>Inputs the number, representing the position that you want the <code>file pointer</code> to be.</li>
</ul>
</li>
<li><code>writeInt(int num)</code></li>
<li><code>writeChars(String str)</code><ul>
<li>Writes a string to the file as a sequence of characters.</li>
</ul>
</li>
<li><code>writeDouble(String str)</code><ul>
<li>Writes a string to the file using <a href="https://docs.oracle.com/javase/8/docs/api/java/io/DataInput.html#modified-utf-8">modified UTF-8</a> encoding in a machine-independent manner.</li>
</ul>
</li>
</ul>
<p><strong>Example code(from Kamana)</strong>:</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomFileDemo</span> {</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception {</span><br><span class="line">		RandomAccessFile raf=<span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">"file.dat"</span>, <span class="string">"rw"</span>);</span><br><span class="line">		raf.writeChar(<span class="string">'a'</span>);</span><br><span class="line">		raf.writeChar(<span class="string">'b'</span>);</span><br><span class="line">		raf.writeChar(<span class="string">'c'</span>);</span><br><span class="line">		raf.writeChar(<span class="string">'d'</span>);</span><br><span class="line">		raf.writeChar(<span class="string">'e'</span>);</span><br><span class="line">		raf.writeUTF(<span class="string">"kamna"</span>);</span><br><span class="line">		raf.writeInt(<span class="number">50</span>);</span><br><span class="line">		raf.writeDouble(<span class="number">50.555</span>);</span><br><span class="line">		raf.writeChar(<span class="string">'f'</span>);</span><br><span class="line">		raf.close();</span><br><span class="line">		</span><br><span class="line">		RandomAccessFile r=<span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">"file.dat"</span>, <span class="string">"r"</span>);</span><br><span class="line">		r.seek(<span class="number">29</span>);</span><br><span class="line">		<span class="comment">//System.out.println(r.readChar());</span></span><br><span class="line">		<span class="comment">//System.out.println(r.readChar());</span></span><br><span class="line">		<span class="comment">//r.seek(6);</span></span><br><span class="line">		<span class="comment">//System.out.println(r.readChar());</span></span><br><span class="line">		<span class="comment">//System.out.println(r.readChar());</span></span><br><span class="line">		<span class="comment">//System.out.println(r.readChar());</span></span><br><span class="line">		<span class="comment">//System.out.println(r.readUTF());</span></span><br><span class="line">		<span class="comment">//System.out.println(r.readInt());</span></span><br><span class="line">		<span class="comment">//System.out.println(r.readDouble());</span></span><br><span class="line">		System.out.println(r.readChar());</span><br><span class="line">		r.close();</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">randomFileusingArray</span> {</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">		</span><br><span class="line">			<span class="comment">//write the alphabet to a random access file</span></span><br><span class="line">			<span class="type">char</span>[] alphabet = {<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>,</span><br><span class="line">							   <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>,</span><br><span class="line">							   <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>};</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			<span class="type">RandomAccessFile</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">"RandomTest.dat"</span>, <span class="string">"rw"</span>);</span><br><span class="line">			</span><br><span class="line">			System.out.println(<span class="string">"Writing alphabet to the file!"</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; alphabet.length; i++)</span><br><span class="line">				random.writeChar(alphabet[i]);</span><br><span class="line">			</span><br><span class="line">			System.out.println(<span class="string">"Finished writing!"</span>);</span><br><span class="line">			</span><br><span class="line">			random.close();</span><br><span class="line">	</span><br><span class="line">			<span class="comment">//reading characters from the alphabet off the file</span></span><br><span class="line">			<span class="type">RandomAccessFile</span> <span class="variable">rand0m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">"RandomTest.dat"</span>, <span class="string">"r"</span>);</span><br><span class="line">			</span><br><span class="line">			System.out.println(<span class="string">"Beginning to read!"</span>);</span><br><span class="line">			</span><br><span class="line">			rand0m.seek(<span class="number">8</span>); <span class="comment">// 5th character (E)</span></span><br><span class="line">			System.out.println(rand0m.readChar());</span><br><span class="line">			rand0m.seek(<span class="number">24</span>); <span class="comment">//13th character (M)</span></span><br><span class="line">			System.out.println(rand0m.readChar());</span><br><span class="line">			rand0m.seek(<span class="number">40</span>); <span class="comment">//21st character (U)</span></span><br><span class="line">			System.out.println(rand0m.readChar());</span><br><span class="line">			rand0m.seek(<span class="number">19</span>); <span class="comment">//won't read correctly!</span></span><br><span class="line">			System.out.println(rand0m.readChar());</span><br><span class="line">			System.out.println(<span class="string">"Done reading!"</span>);			</span><br><span class="line">			rand0m.close();		</span><br><span class="line">		}</span><br><span class="line">	}</span><br></pre></td></tr></tbody></table></figure>

<hr>
<h4 id="Useful-resources"><a href="#Useful-resources" class="headerlink" title="Useful resources"></a>Useful resources</h4><ul>
<li><a href="https://www.jb51.net/article/226835.htm">Scanner和BufferedReader的对比</a></li>
</ul>
<h2 id="Exception-Handling"><a href="#Exception-Handling" class="headerlink" title="Exception Handling"></a>Exception Handling</h2><blockquote>
<p>All exceptions are <code>class</code> that are derived from the <code>Throwable class</code></p>
</blockquote>
<h3 id="Exception-hierarchy-1"><a href="#Exception-hierarchy-1" class="headerlink" title="Exception hierarchy^1"></a>Exception hierarchy<a href="https://www.runoob.com/java/java-exceptions.html">^1</a></h3><p><img src="https://s2.loli.net/2023/02/04/CNk1u7dQnDhamlW.png" alt="file categories"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Exception</span><br><span class="line">│</span><br><span class="line">├─ RuntimeException</span><br><span class="line">│  │</span><br><span class="line">│  ├─ NullPointerException</span><br><span class="line">│  │</span><br><span class="line">│  ├─ IndexOutOfBoundsException</span><br><span class="line">│  │</span><br><span class="line">│  ├─ SecurityException</span><br><span class="line">│  │</span><br><span class="line">│  └─ IllegalArgumentException</span><br><span class="line">│     │</span><br><span class="line">│     └─ NumberFormatException</span><br><span class="line">│</span><br><span class="line">├─ IOException</span><br><span class="line">│  │</span><br><span class="line">│  ├─ UnsupportedCharsetException</span><br><span class="line">│  │</span><br><span class="line">│  ├─ FileNotFoundException</span><br><span class="line">│  │</span><br><span class="line">│  └─ SocketException</span><br><span class="line">│</span><br><span class="line">├─ ParseException</span><br><span class="line">│</span><br><span class="line">├─ GeneralSecurityException</span><br><span class="line">│</span><br><span class="line">├─ SQLException</span><br><span class="line">│</span><br><span class="line">└─ TimeoutException</span><br><span class="line"></span><br><span class="line">Source: https://www.liaoxuefeng.com/wiki/1252599548343744/1264737765214592</span><br></pre></td></tr></tbody></table></figure>

<hr>
<p><code>Throwable</code> is a derived class of <code>object</code>. <code>Throwable</code> has two subcategories: <code>Error</code> and <code>Exception</code></p>
<p><code>Error</code>: severe problems occurred that cannot be solved</p>
<p><code>Exception</code>:  problems that occur when the program is running. It can be captured by <code>try...catch</code> </p>
<ul>
<li><code>RuntimeException</code> as well as its subclasses</li>
<li>Other Exceptions / Non-RuntimeException Exceptions</li>
</ul>
<div class="note info"><ul>
<li>Exceptions other than RuntimeException <strong>must be</strong> <code>try...catch</code>; else the compiler would report and halt</li>
<li><code>Errors</code> and <code>RuntimeException</code> as well as its derived classes are not forced to be <code>try...catch</code></li>
</ul>
</div>

<h3 id="Capture-the-exception-try-catch"><a href="#Capture-the-exception-try-catch" class="headerlink" title="Capture the exception: try...catch"></a>Capture the exception: <code>try...catch</code></h3><h3 id="Single-catch"><a href="#Single-catch" class="headerlink" title="Single catch"></a>Single catch</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>{</span><br><span class="line">    <span class="comment">//Program</span></span><br><span class="line">}<span class="keyword">catch</span>(ExceptionName e){</span><br><span class="line">    <span class="comment">//What to perform when Exception is detected in the try program</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Multiple-catch"><a href="#Multiple-catch" class="headerlink" title="Multiple catch"></a>Multiple catch</h3><p>It is possible to have multiple catch, so that different program could be run when different exceptions are encountered. </p>
<div class="note warning"><p><strong>Be aware that only <mark class="label warning">one</mark> catch will be executed:</strong></p>
<ul>
<li><p>When the <code>try</code> program is run, it halts and jumps to the <code>catch</code> section when an exception occur</p>
</li>
<li><p>The compiler reads the catch one by another in sequence. If the exception coincides, the corresponding program is executed. </p>
</li>
<li><p>And then it ends</p>
</li>
</ul>
<blockquote>
<p>Hence, it is important to note that Exception1 should be the subclass of Exception2, and Exception2 should be the subclass of Exception3. Else it is impossible to execute the second and third catch</p>
</blockquote>
</div>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>{</span><br><span class="line">   <span class="comment">//Program</span></span><br><span class="line">}<span class="keyword">catch</span>(ExceptionName1 e1){</span><br><span class="line">  <span class="comment">//Program</span></span><br><span class="line">}<span class="keyword">catch</span>(ExceptionName2 e2){</span><br><span class="line">  <span class="comment">//Program</span></span><br><span class="line">}<span class="keyword">catch</span>(ExceptionName3 e3){</span><br><span class="line">  <span class="comment">//Program</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h3><blockquote>
<p>The statement that will be executed anyway no matter whether the Exception occur in the try processes </p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>{</span><br><span class="line">    process1();</span><br><span class="line">    process2();</span><br><span class="line">}<span class="keyword">catch</span>(IOException e){</span><br><span class="line">    System.out.println(<span class="string">"IO excpetion detected"</span>);</span><br><span class="line">}<span class="keyword">finally</span>{</span><br><span class="line">    System.out.println(<span class="string">"END"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//This is equivalent to:</span></span><br><span class="line"><span class="keyword">try</span>{</span><br><span class="line">    process1();</span><br><span class="line">    process2();</span><br><span class="line">    System.out.println(<span class="string">"END"</span>);</span><br><span class="line">}<span class="keyword">catch</span>(IOException e){</span><br><span class="line">    System.out.println(<span class="string">"IO excpetion detected"</span>);</span><br><span class="line">    System.out.println(<span class="string">"END"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<h3 id="Useful-resources-1"><a href="#Useful-resources-1" class="headerlink" title="Useful resources"></a>Useful resources</h3><ul>
<li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255943543190176">https://www.liaoxuefeng.com/wiki/1252599548343744/1255943543190176</a></li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
        <category>ALCS</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Abstract Data Types Notes</title>
    <url>/Cambridge/Notes/Abstract-Data-Types-Notes/</url>
    <content><![CDATA[<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><blockquote>
<p>Lists provide one natural implementation of stacks, and are the data structure of choice in many places where flexible representation of variable amount of data is wanted.</p>
</blockquote>
<h3 id="Doubly-linked-list"><a href="#Doubly-linked-list" class="headerlink" title="Doubly-linked list"></a>Doubly-linked list</h3><p>A feature of lists is that, from one item, you can progress along the list in one direction very easily; but once you have taken the <code>next</code> of a list, there is no way of returning. To make it possible to traverse a list in both directions one might define a new type called <code>Doubly Linked List</code> in which each wagon had both a <code>next</code> and a <code>previous</code> pointer.<br>$$<br>w.next.previous == w<br>$$<br>Equation (1) would hold for every wagon inside the <code>DLL</code> except for the last<br>$$<br>w.previous.next == w<br>$$<br>Euqation (2) would hold for every wagon inside the <code>DLL</code> except for the first.</p>
<h3 id="Graph-representation-using-List"><a href="#Graph-representation-using-List" class="headerlink" title="Graph representation (using List)"></a>Graph representation (using List)</h3><p>Represent each vertex by an integer, and having a vector such that element $i$ in the vector holds the head of a list of all the vertices connected directly to edges radiating from vertex $i$. </p>
<h3 id="ADT-List"><a href="#ADT-List" class="headerlink" title="ADT List"></a>ADT List</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ADT List {</span><br><span class="line">	boolean isEmpty();</span><br><span class="line">	// BEHAVIOUR: Return true iff the structure is empty</span><br><span class="line">	item head();</span><br><span class="line">	// PRECONDITION: isEmpty()==false</span><br><span class="line">	// BEHAVIOR: return the first elemnet of the list (without removing it)</span><br><span class="line">	void prepend(ite x);</span><br><span class="line">	// BEHAVIOUR: add element &lt;x&gt; to the beginning of the list.</span><br><span class="line">	// POSTCONDITION: isEmpty()==false</span><br><span class="line">	// BAHAVIOUR: head() == x</span><br><span class="line">	List tail();</span><br><span class="line">	// PRECONDITION: isEmpty()==false</span><br><span class="line">	// BEHAVIOUR: return the list of all the elements except the first (without removing it).</span><br><span class="line">	</span><br><span class="line">	void setTail(List newTail);</span><br><span class="line">	// PRECONDITION: isEmpty()==false</span><br><span class="line">	// BEHAVIOUR: replace the tail of this list with &lt;newTail&gt;.</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><ul>
<li>LIFO (last in first out)</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ADT Stack {</span><br><span class="line">	boolean isEmpty();</span><br><span class="line">	// BEHAVIOUR: return true iff the structure is empty</span><br><span class="line">	void push(item x);</span><br><span class="line">	// BEHAVIOUR: add element &lt;x&gt; to the top of the stack</span><br><span class="line">	// POSTCONDITION: isEmpty()==false.</span><br><span class="line">	// POSTCONDITION: top()==x</span><br><span class="line">	item pop();</span><br><span class="line">	// PRECONDITION: isEmpty()==false</span><br><span class="line">	// BEHAVIOUR: return the element on the top of the stack</span><br><span class="line">	// As a side effect, remove it from the stack.</span><br><span class="line">	item top();</span><br><span class="line">	// PRECONDITION: isEmpty()==false</span><br><span class="line">	// BEHAVIOUR: Return the element on top of the stack (without removing it).</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Implementations"><a href="#Implementations" class="headerlink" title="Implementations"></a>Implementations</h3><ol>
<li>Combination of an array and an index (pointing to the “top of stack”)<ul>
<li>The <code>push</code> operation writes a value into the array and increments the index</li>
<li>The <code>pop</code> operation delets a value from the array and decrements the index</li>
</ul>
</li>
<li>Linked lists<ul>
<li>Pushing an item adds an extra cell to the front of a list</li>
<li>Popping removes the cell at the front of the list</li>
</ul>
</li>
</ol>
<h3 id="Use-cases"><a href="#Use-cases" class="headerlink" title="Use cases"></a>Use cases</h3><ul>
<li>Reverse Polish Notation (e.g. <code>3 12 add 4 mul 2 sub</code> -&gt; <code>(3 x 12) x 4 - 2</code>)</li>
</ul>
<h2 id="Queue-and-Deque"><a href="#Queue-and-Deque" class="headerlink" title="Queue and Deque"></a>Queue and Deque</h2><ul>
<li>FIFO (first in first out)</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ADT Queue{</span><br><span class="line">	boolean isEmpty();</span><br><span class="line">	// BEHAVIOUR: return true iff the structure is empty.</span><br><span class="line">	void put(item x);</span><br><span class="line">	// BEHAVIOUR: insert element &lt;x&gt; at the end of the queue.</span><br><span class="line">  // POSTCONDITION: isEmpty()==false</span><br><span class="line">  item get();</span><br><span class="line">  // PRECONDITION: isEmpty()==false</span><br><span class="line">  // BEHAVIOUR: return the first elemnt of the queue, and removing it from the queue</span><br><span class="line">  item first();</span><br><span class="line">  // PRECONDITION: isEmpty()==false</span><br><span class="line">  // BEHAVIOUR: return the first element of the queue without removing it</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ADT Queue{</span><br><span class="line">	boolean isEmpty();</span><br><span class="line">	// BEHAVIOUR: return true iff the structure is empty.</span><br><span class="line">	void putFront(item x);</span><br><span class="line">	// BEHAVIOUR: insert element &lt;x&gt; at the front of the queue.</span><br><span class="line">  // POSTCONDITION: isEmpty()==false</span><br><span class="line">  void putRear(item x);</span><br><span class="line">  // BEHAVIOUR: insert element &lt;x&gt; at the back of the queue.</span><br><span class="line">  // POSTCONDITION: isEmpty()==false</span><br><span class="line">  item getFront();</span><br><span class="line">  // PRECONDITION: isEmpty()==false</span><br><span class="line">  // BEHAVIOUR: return the first elemnt of the queue</span><br><span class="line">  item getRear();</span><br><span class="line">  // PRECONDITION: isEmpty()==false</span><br><span class="line">  // BEHAVIOUR: return the last element of the queue </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h2><ul>
<li>Also known as Maps, Tables, Associative arrays, or Symbol tables</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ADT Dictionary {</span><br><span class="line">	void set(Key k, Value v);</span><br><span class="line"> 	// BEHAVIOUR: store the given (&lt;k&gt;, &lt;v&gt;) pair in the dictionary.</span><br><span class="line">	// If a pair with the same &lt;k&gt; had already been stored, the old</span><br><span class="line">	// value is overwritten and lost.</span><br><span class="line">	// POSTCONDITION: get(k) == v</span><br><span class="line"></span><br><span class="line">	Value get(Key k);</span><br><span class="line">	// PRECONDITION: a pair with the sought key &lt;k&gt; is in the dictionary.</span><br><span class="line">	// BEHAVIOUR: return the value associated with the supplied &lt;k&gt;,</span><br><span class="line">  // without removing it from the dictionary.</span><br><span class="line">	</span><br><span class="line">	 void delete(Key k);</span><br><span class="line">	 // PRECONDITION: a pair with the given key &lt;k&gt; has already been inserted.</span><br><span class="line">	 // BEHAVIOUR: remove from the dictionary the key-value pair indexed by</span><br><span class="line">	 // the given &lt;k&gt;.</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>Cambridge</category>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Algorithms</tag>
      </tags>
  </entry>
</search>
